{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar _excluded = [\"progress\", \"onPress\", \"style\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar interpolateDeprecated = _reactNativeReanimated.default.interpolate,\n    interpolateNode = _reactNativeReanimated.default.interpolateNode,\n    cond = _reactNativeReanimated.default.cond,\n    greaterThan = _reactNativeReanimated.default.greaterThan;\nvar interpolate = interpolateNode !== null && interpolateNode !== void 0 ? interpolateNode : interpolateDeprecated;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n      onPress = _ref.onPress,\n      style = _ref.style,\n      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'macos' ? [0, 1] : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(_reactNativeReanimated.default.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style]\n  }), React.createElement(_reactNative.Pressable, {\n    onPress: onPress,\n    style: styles.pressable\n  }));\n});\n\nvar overlayStyle = _reactNative.Platform.select({\n  web: {\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  overlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }),\n  pressable: {\n    flex: 1\n  }\n});\n\nvar _default = Overlay;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAEeA,qBAFf,GAMIC,8BANJ,CAEEC,WAFF;AAAA,IAGEC,eAHF,GAMIF,8BANJ,CAGEE,eAHF;AAAA,IAIEC,IAJF,GAMIH,8BANJ,CAIEG,IAJF;AAAA,IAKEC,WALF,GAMIJ,8BANJ,CAKEI,WALF;AAQA,IAAMH,WAAmC,GACvCC,eADuC,SACvCA,mBADuC,WACvCA,qBAAmBH,qBADrB;AAGA,IAAMM,gBAAgB,GAAG,IAAzB;AAOA,IAAMC,OAAO,GAAGC,KAAK,CAACC,UAAND,CAAiB,SAASD,OAAT,OAE/BG,GAF+B,EAG/B;EAAA,IAFEC,QAEF,QAFEA,QAEF;EAAA,IAFYC,OAEZ,QAFYA,OAEZ;EAAA,IAFqBC,KAErB,QAFqBA,KAErB;EAAA,IAF+BC,KAE/B;EACA,IAAMC,aAAa,GAAG;IACpBC,OAAO,EAAEd,WAAW,CAACS,QAAD,EAAW;MAK7BM,UAAU,EACRC,sBAASC,EAATD,KAAgB,SAAhBA,IAA6BA,sBAASC,EAATD,KAAgB,OAA7CA,GACI,CAAC,CAAD,EAAI,CAAJ,CADJA,GAEI,CAACZ,gBAAD,EAAmB,CAAnB,CARuB;MAS7Bc,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IATgB,CAAX,CADA;IAepBC,MAAM,EAAEjB,IAAI,CAACC,WAAW,CAACM,QAAD,EAAWL,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;EAfQ,CAAtB;EAkBA,OACEE,oBAACP,+BAASqB,IAAV,eACMR,KADN;IAEEJ,GAAG,EAAEA,GAFP;IAGEG,KAAK,EAAE,CAACU,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+BV,aAA/B,EAA8CF,KAA9C;EAHT,IAKEL,oBAACkB,sBAAD;IAAWd,OAAO,EAAEA,OAApB;IAA6BC,KAAK,EAAEU,MAAM,CAACI;EAA3C,EALF,CADF;AAtBc,EAAhB;;AAiCA,IAAMF,YAAY,GAAGP,sBAASU,MAATV,CAAwC;EAC3DW,GAAG,EAAE;IAGHC,uBAAuB,EAAE;EAHtB,CADsD;EAM3DC,OAAO,EAAE;AANkD,CAAxCb,CAArB;;AASA,IAAMK,MAAM,GAAGS,wBAAWC,MAAXD,CAAkB;EAC/BR,OAAO,oBACFQ,wBAAWE,kBADT;IAELC,eAAe,EAAE;EAFZ,EADwB;EAK/BR,SAAS,EAAE;IACTS,IAAI,EAAE;EADG;AALoB,CAAlBJ,CAAf;;eAUezB,O","names":["interpolateDeprecated","Animated","interpolate","interpolateNode","cond","greaterThan","PROGRESS_EPSILON","Overlay","React","forwardRef","ref","progress","onPress","style","props","animatedStyle","opacity","inputRange","Platform","OS","outputRange","zIndex","View","styles","overlay","overlayStyle","Pressable","pressable","select","web","WebkitTapHighlightColor","default","StyleSheet","create","absoluteFillObject","backgroundColor","flex"],"sources":["Overlay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  // @ts-expect-error: this is to support reanimated 1\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateNode =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n  onPress: () => void;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, onPress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    >\n      <Pressable onPress={onPress} style={styles.pressable} />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"script"}