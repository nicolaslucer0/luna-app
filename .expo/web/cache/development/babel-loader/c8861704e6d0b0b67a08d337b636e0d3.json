{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ICON_SIZE = 24;\n\nvar ListIcon = function ListIcon(_ref) {\n  var icon = _ref.icon,\n      iconColor = _ref.color,\n      style = _ref.style;\n  return React.createElement(_reactNative.View, {\n    style: [styles.item, style],\n    pointerEvents: \"box-none\"\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: ICON_SIZE,\n    color: iconColor\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nListIcon.displayName = 'List.Icon';\nvar _default = ListIcon;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAcA,IAAMA,SAAS,GAAG,EAAlB;;AA2BA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;EAAA,IAAGC,IAAH,QAAGA,IAAH;EAAA,IAAgBC,SAAhB,QAASC,KAAT;EAAA,IAA2BC,KAA3B,QAA2BA,KAA3B;EAAA,OACfC,oBAACC,iBAAD;IAAMF,KAAK,EAAE,CAACG,MAAM,CAACC,IAAR,EAAcJ,KAAd,CAAb;IAAmCK,aAAa,EAAC;EAAjD,GACEJ,oBAACK,aAAD;IAAMC,MAAM,EAAEV,IAAd;IAAoBW,IAAI,EAAEb,SAA1B;IAAqCI,KAAK,EAAED;EAA5C,EADF,CADe;AAAjB;;AAMA,IAAMK,MAAM,GAAGM,wBAAWC,MAAXD,CAAkB;EAC/BL,IAAI,EAAE;IACJO,MAAM,EAAE,CADJ;IAEJC,MAAM,EAAE,EAFJ;IAGJC,KAAK,EAAE,EAHH;IAIJC,UAAU,EAAE,QAJR;IAKJC,cAAc,EAAE;EALZ;AADyB,CAAlBN,CAAf;;AAUAb,QAAQ,CAACoB,WAATpB,GAAuB,WAAvBA;eAEeA,Q","names":["ICON_SIZE","ListIcon","icon","iconColor","color","style","React","View","styles","item","pointerEvents","Icon","source","size","StyleSheet","create","margin","height","width","alignItems","justifyContent","displayName"],"sources":["ListIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\nexport type Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={MD3Colors.tertiary70} icon=\"folder\" />\n *     <List.Icon color={MD3Colors.tertiary70} icon=\"equal\" />\n *     <List.Icon color={MD3Colors.tertiary70} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n"]},"metadata":{},"sourceType":"script"}