{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AnimatedText = _interopRequireDefault(require(\"../../Typography/AnimatedText\"));\n\nvar _theming = require(\"../../../core/theming\");\n\nvar InputLabel = function InputLabel(props) {\n  var _useTheme = (0, _theming.useTheme)(),\n      isV3 = _useTheme.isV3;\n\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor,\n      errorColor = _props$labelProps.errorColor,\n      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,\n      maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier,\n      testID = _props$labelProps.testID;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  var labelStyle = Object.assign({}, font, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n  var textColor = error && errorColor ? errorColor : placeholderColor;\n  return label ? _react.default.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), _react.default.createElement(_AnimatedText.default, {\n    variant: \"bodySmall\",\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }, isV3 && styles.md3TextLine],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-label-active\"\n  }, label), _react.default.createElement(_AnimatedText.default, {\n    variant: parentState.focused ? 'bodyLarge' : 'bodySmall',\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: textColor,\n      opacity: placeholderOpacity\n    }, isV3 && styles.md3TextLine],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-label-inactive\"\n  }, label)) : null;\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  },\n  md3TextLine: {\n    lineHeight: undefined\n  }\n});\n\nvar _default = InputLabel;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["InputLabel","props","useTheme","isV3","parentState","labelBackground","labelProps","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","testID","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","textColor","React","Animated","View","pointerEvents","style","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","AnimatedText","variant","onLayout","top","color","md3TextLine","numberOfLines","create","zIndex","lineHeight","undefined"],"sources":["InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { useTheme } from '../../../core/theming';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { isV3 } = useTheme();\n  const { parentState, labelBackground } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n    testID,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  const textColor = error && errorColor ? errorColor : placeholderColor;\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        variant=\"bodySmall\"\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n          isV3 && styles.md3TextLine,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-active`}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        variant={parentState.focused ? 'bodyLarge' : 'bodySmall'}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: textColor,\n            opacity: placeholderOpacity,\n          },\n          isV3 && styles.md3TextLine,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-inactive`}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n  md3TextLine: {\n    lineHeight: undefined,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"script"}