{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Appbar = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _AppbarContent = _interopRequireDefault(require(\"./AppbarContent\"));\n\nvar _AppbarAction = _interopRequireDefault(require(\"./AppbarAction\"));\n\nvar _AppbarBackAction = _interopRequireDefault(require(\"./AppbarBackAction\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _AppbarHeader = _interopRequireDefault(require(\"./AppbarHeader\"));\n\nvar _excluded = [\"children\", \"dark\", \"style\", \"theme\", \"mode\", \"elevated\", \"safeAreaInsets\"],\n    _excluded2 = [\"backgroundColor\", \"elevation\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n      dark = _ref.dark,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'small' : _ref$mode,\n      elevated = _ref.elevated,\n      safeAreaInsets = _ref.safeAreaInsets,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isV3 = theme.isV3;\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      customBackground = _ref2.backgroundColor,\n      _ref2$elevation = _ref2.elevation,\n      elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,\n      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n\n  var isDark;\n  var backgroundColor = (0, _utils.getAppbarColor)(theme, elevation, customBackground, elevated);\n\n  var isMode = function isMode(modeToCompare) {\n    return isV3 && mode === modeToCompare;\n  };\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !(0, _color.default)(backgroundColor).isLight() : true;\n  }\n\n  var isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n\n  if (!isV3 && _reactNative.Platform.OS === 'ios' || isV3CenterAlignedMode) {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === _AppbarContent.default) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  var filterAppbarActions = React.useCallback(function () {\n    var isLeading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return React.Children.toArray(children).filter(function (child) {\n      return isLeading ? child.props.isLeading : !child.props.isLeading;\n    });\n  }, [children]);\n  var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n  var insets = {\n    paddingBottom: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom,\n    paddingTop: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top,\n    paddingLeft: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left,\n    paddingRight: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right\n  };\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      height: isV3 ? _utils.modeAppbarHeight[mode] : _utils.DEFAULT_APPBAR_HEIGHT\n    }, insets, restStyle, !theme.isV3 && {\n      elevation: elevation\n    }],\n    elevation: elevation\n  }, rest), shouldAddLeftSpacing ? React.createElement(_reactNative.View, {\n    style: spacingStyle\n  }) : null, (!isV3 || isMode('small') || isMode('center-aligned')) && (0, _utils.renderAppbarContent)({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent\n  }), (isMode('medium') || isMode('large')) && React.createElement(_reactNative.View, {\n    style: [styles.columnContainer, isMode('center-aligned') && styles.centerAlignedContainer]\n  }, React.createElement(_reactNative.View, {\n    style: styles.controlsRow\n  }, (0, _utils.renderAppbarContent)({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [_AppbarBackAction.default],\n    mode: mode\n  }), (0, _utils.renderAppbarContent)({\n    children: filterAppbarActions(true),\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [_AppbarAction.default],\n    mode: mode\n  }), React.createElement(_reactNative.View, {\n    style: styles.rightActionControls\n  }, (0, _utils.renderAppbarContent)({\n    children: filterAppbarActions(false),\n    isDark: isDark,\n    isV3: isV3,\n    renderExcept: [Appbar, _AppbarBackAction.default, _AppbarContent.default, _AppbarHeader.default],\n    mode: mode\n  }))), (0, _utils.renderAppbarContent)({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [_AppbarContent.default],\n    mode: mode\n  })), shouldAddRightSpacing ? React.createElement(_reactNative.View, {\n    style: spacingStyle\n  }) : null);\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  spacing: {\n    width: 48\n  },\n  v3Spacing: {\n    width: 52\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8\n  },\n  centerAlignedContainer: {\n    paddingTop: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Appbar);\n\nexports.default = _default;\nvar AppbarWithTheme = (0, _theming.withTheme)(Appbar);\nexports.Appbar = AppbarWithTheme;","map":{"version":3,"mappings":"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","names":["Appbar","children","dark","style","theme","mode","elevated","safeAreaInsets","rest","isV3","StyleSheet","flatten","customBackground","backgroundColor","elevation","restStyle","isDark","getAppbarColor","isMode","modeToCompare","color","isLight","isV3CenterAlignedMode","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","OS","hasAppbarContent","leftItemsCount","rightItemsCount","React","Children","forEach","child","isValidElement","type","AppbarContent","filterAppbarActions","useCallback","isLeading","toArray","filter","props","spacingStyle","styles","v3Spacing","spacing","insets","paddingBottom","bottom","paddingTop","top","paddingLeft","left","paddingRight","right","Surface","appbar","height","modeAppbarHeight","DEFAULT_APPBAR_HEIGHT","View","renderAppbarContent","columnContainer","centerAlignedContainer","controlsRow","renderOnly","AppbarBackAction","AppbarAction","rightActionControls","renderExcept","AppbarHeader","create","flexDirection","alignItems","paddingHorizontal","width","flex","justifyContent","withTheme","AppbarWithTheme"],"sources":["Appbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport type { MD3Elevation, Theme } from '../../types';\nimport {\n  getAppbarColor,\n  renderAppbarContent,\n  DEFAULT_APPBAR_HEIGHT,\n  modeAppbarHeight,\n  AppbarModes,\n} from './utils';\nimport AppbarHeader from './AppbarHeader';\n\nexport type Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (64).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * @supported Available in v5.x\n   * Safe area insets for the Appbar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   */\n  safeAreaInsets?: {\n    bottom?: number;\n    top?: number;\n    left?: number;\n    right?: number;\n  };\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ### Top bar\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Appbar.Header>\n *     <Appbar.BackAction onPress={() => {}} />\n *     <Appbar.Content title=\"Title\" />\n *     <Appbar.Action icon=\"calendar\" onPress={() => {}} />\n *     <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *   </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * ### Bottom bar\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { Appbar, FAB, useTheme } from 'react-native-paper';\n * import { useSafeAreaInsets } from 'react-native-safe-area-context';\n *\n * const BOTTOM_APPBAR_HEIGHT = 80;\n * const MEDIUM_FAB_HEIGHT = 56;\n *\n * const MyComponent = () => {\n *   const { bottom } = useSafeAreaInsets();\n *   const theme = useTheme();\n *\n *   return (\n *     <Appbar\n *       style={[\n *         styles.bottom,\n *         {\n *           height: BOTTOM_APPBAR_HEIGHT + bottom,\n *           backgroundColor: theme.colors.elevation.level2,\n *         },\n *       ]}\n *       safeAreaInsets={{ bottom }}\n *     >\n *       <Appbar.Action icon=\"archive\" onPress={() => {}} />\n *       <Appbar.Action icon=\"email\" onPress={() => {}} />\n *       <Appbar.Action icon=\"label\" onPress={() => {}} />\n *       <Appbar.Action icon=\"delete\" onPress={() => {}} />\n *       <FAB\n *         mode=\"flat\"\n *         size=\"medium\"\n *         icon=\"plus\"\n *         onPress={() => {}}\n *         style={[\n *           styles.fab,\n *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },\n *         ]}\n *       />\n *     </Appbar>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     backgroundColor: 'aquamarine',\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n *   fab: {\n *     position: 'absolute',\n *     right: 16,\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Appbar = ({\n  children,\n  dark,\n  style,\n  theme,\n  mode = 'small',\n  elevated,\n  safeAreaInsets,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = getAppbarColor(\n    theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const isMode = (modeToCompare: AppbarModes) => {\n    return isV3 && mode === modeToCompare;\n  };\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  const isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if ((!isV3 && Platform.OS === 'ios') || isV3CenterAlignedMode) {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent &&\n      leftItemsCount < 2 &&\n      rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  const filterAppbarActions = React.useCallback(\n    (isLeading = false) =>\n      React.Children.toArray(children).filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        isLeading ? child.props.isLeading : !child.props.isLeading\n      ),\n    [children]\n  );\n\n  const spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n\n  const insets = {\n    paddingBottom: safeAreaInsets?.bottom,\n    paddingTop: safeAreaInsets?.top,\n    paddingLeft: safeAreaInsets?.left,\n    paddingRight: safeAreaInsets?.right,\n  };\n\n  return (\n    <Surface\n      style={[\n        { backgroundColor },\n        styles.appbar,\n        {\n          height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n        },\n        insets,\n        restStyle,\n        !theme.isV3 && { elevation },\n      ]}\n      elevation={elevation as MD3Elevation}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={spacingStyle} /> : null}\n      {(!isV3 || isMode('small') || isMode('center-aligned')) &&\n        renderAppbarContent({\n          children,\n          isDark,\n          isV3,\n          shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent,\n        })}\n      {(isMode('medium') || isMode('large')) && (\n        <View\n          style={[\n            styles.columnContainer,\n            isMode('center-aligned') && styles.centerAlignedContainer,\n          ]}\n        >\n          {/* Appbar top row with controls */}\n          <View style={styles.controlsRow}>\n            {/* Left side of row container, can contain AppbarBackAction or AppbarAction if it's leading icon  */}\n            {renderAppbarContent({\n              children,\n              isDark,\n              isV3,\n              renderOnly: [AppbarBackAction],\n              mode,\n            })}\n            {renderAppbarContent({\n              children: filterAppbarActions(true),\n              isDark,\n              isV3,\n              renderOnly: [AppbarAction],\n              mode,\n            })}\n            {/* Right side of row container, can contain other AppbarAction if they are not leading icons */}\n            <View style={styles.rightActionControls}>\n              {renderAppbarContent({\n                children: filterAppbarActions(false),\n                isDark,\n                isV3,\n                renderExcept: [\n                  Appbar,\n                  AppbarBackAction,\n                  AppbarContent,\n                  AppbarHeader,\n                ],\n                mode,\n              })}\n            </View>\n          </View>\n          {/* Middle of the row, can contain only AppbarContent */}\n          {renderAppbarContent({\n            children,\n            isDark,\n            isV3,\n            renderOnly: [AppbarContent],\n            mode,\n          })}\n        </View>\n      )}\n      {shouldAddRightSpacing ? <View style={spacingStyle} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n  v3Spacing: {\n    width: 52,\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8,\n  },\n  centerAlignedContainer: {\n    paddingTop: 0,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"script"}