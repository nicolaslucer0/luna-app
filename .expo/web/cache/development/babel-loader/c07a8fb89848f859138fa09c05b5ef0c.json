{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PanGesture = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _gesture = require(\"./gesture\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY\n    };\n  }\n\n  return Object.assign({}, current, changePayload);\n}\n\nvar PanGesture = function (_ContinousBaseGesture) {\n  (0, _inherits2.default)(PanGesture, _ContinousBaseGesture);\n\n  var _super = _createSuper(PanGesture);\n\n  function PanGesture() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PanGesture);\n    _this = _super.call(this);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", {});\n\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n\n  (0, _createClass2.default)(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }, {\n    key: \"activateAfterLongPress\",\n    value: function activateAfterLongPress(duration) {\n      this.config.activateAfterLongPress = duration;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(PanGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n  return PanGesture;\n}(_gesture.ContinousBaseGesture);\n\nexports.PanGesture = PanGesture;","map":{"version":3,"sources":["panGesture.ts"],"names":["previous","changePayload","changeX","current","changeY","translationY","constructor","activeOffsetY","Array","offset","activeOffsetX","failOffsetY","failOffsetX","minPointers","maxPointers","minDistance","minVelocity","minVelocityX","minVelocityY","averageTouches","enableTrackpadTwoFingerGesture","activateAfterLongPress","onChange"],"mappings":"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","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport type PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  activateAfterLongPress(duration: number) {\n    this.config.activateAfterLongPress = duration;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"script"}