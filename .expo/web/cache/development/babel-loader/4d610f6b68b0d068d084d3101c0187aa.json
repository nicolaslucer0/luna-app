{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCardCoverStyle = exports.getCardColors = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar getCardCoverStyle = function getCardCoverStyle(_ref) {\n  var theme = _ref.theme,\n      index = _ref.index,\n      total = _ref.total;\n  var isV3 = theme.isV3,\n      roundness = theme.roundness;\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness\n      };\n    }\n\n    if (isV3) {\n      return {\n        borderRadius: roundness\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness\n    };\n  }\n\n  return undefined;\n};\n\nexports.getCardCoverStyle = getCardCoverStyle;\n\nvar getBorderColor = function getBorderColor(_ref2) {\n  var theme = _ref2.theme;\n\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return (0, _color.default)(_colors.white).alpha(0.12).rgb().string();\n  }\n\n  return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref3) {\n  var theme = _ref3.theme,\n      isMode = _ref3.isMode;\n\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n\n    return theme.colors.surface;\n  }\n\n  return undefined;\n};\n\nvar getCardColors = function getCardColors(_ref4) {\n  var theme = _ref4.theme,\n      mode = _ref4.mode;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme: theme,\n      isMode: isMode\n    }),\n    borderColor: getBorderColor({\n      theme: theme\n    })\n  };\n};\n\nexports.getCardColors = getCardColors;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAKO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAQ3B;EAAA,IAPJC,KAOI,QAPJA,KAOI;EAAA,IANJC,KAMI,QANJA,KAMI;EAAA,IALJC,KAKI,QALJA,KAKI;EACJ,IAAQC,IAAR,GAA4BH,KAA5B,CAAQG,IAAR;EAAA,IAAcC,SAAd,GAA4BJ,KAA5B,CAAcI,SAAd;;EAEA,IAAIH,KAAK,KAAK,CAAd,EAAiB;IACf,IAAIC,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO;QACLG,YAAY,EAAED;MADT,CAAP;IAGD;;IAED,IAAID,IAAJ,EAAU;MACR,OAAO;QACLE,YAAY,EAAED;MADT,CAAP;IAGD;;IAED,OAAO;MACLE,mBAAmB,EAAEF,SADhB;MAELG,oBAAoB,EAAEH;IAFjB,CAAP;EAID;;EAED,IAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IADnB,CAAP;EAGD;;EAED,OAAOK,SAAP;AApCK;;;;AAuCP,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,QAAiC;EAAA,IAA9BV,KAA8B,SAA9BA,KAA8B;;EACtD,IAAIA,KAAK,CAACG,IAAV,EAAgB;IACd,OAAOH,KAAK,CAACW,MAANX,CAAaY,OAApB;EACD;;EAED,IAAIZ,KAAK,CAACa,IAAV,EAAgB;IACd,OAAOC,oBAAMC,aAAND,EAAaE,KAAbF,CAAmB,IAAnBA,EAAyBG,GAAzBH,GAA+BI,MAA/BJ,EAAP;EACD;;EACD,OAAOA,oBAAMK,aAANL,EAAaE,KAAbF,CAAmB,IAAnBA,EAAyBG,GAAzBH,GAA+BI,MAA/BJ,EAAP;AARF;;AAWA,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,QAMrB;EAAA,IALJpB,KAKI,SALJA,KAKI;EAAA,IAJJqB,MAII,SAJJA,MAII;;EACJ,IAAIrB,KAAK,CAACG,IAAV,EAAgB;IACd,IAAIkB,MAAM,CAAC,WAAD,CAAV,EAAyB;MACvB,OAAOrB,KAAK,CAACW,MAANX,CAAasB,cAApB;IACD;;IACD,OAAOtB,KAAK,CAACW,MAANX,CAAauB,OAApB;EACD;;EACD,OAAOd,SAAP;AAbF;;AAgBO,IAAMe,aAAa,GAAG,SAAhBA,aAAgB,QAMvB;EAAA,IALJxB,KAKI,SALJA,KAKI;EAAA,IAJJyB,IAII,SAJJA,IAII;;EACJ,IAAMJ,MAAM,GAAIK,SAAVL,MAAUK,cAAD,EAA6B;IAC1C,OAAOD,IAAI,KAAKC,aAAhB;EADF;;EAIA,OAAO;IACLC,eAAe,EAAEP,kBAAkB,CAAC;MAClCpB,KADkC,EAClCA,KADkC;MAElCqB;IAFkC,CAAD,CAD9B;IAKLO,WAAW,EAAElB,cAAc,CAAC;MAAEV;IAAF,CAAD;EALtB,CAAP;AAXK","names":["getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","color","white","alpha","rgb","string","black","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"sources":["utils.tsx"],"sourcesContent":["import color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: Theme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    if (isV3) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: Theme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: Theme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    return theme.colors.surface;\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: Theme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}