{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.IconAdornment = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _IconButton = _interopRequireDefault(require(\"../../IconButton/IconButton\"));\n\nvar _theming = require(\"../../../core/theming\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _constants = require(\"../constants\");\n\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar StyleContext = _react.default.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\n\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n      topPosition = _ref.topPosition,\n      side = _ref.side,\n      isTextInputFocused = _ref.isTextInputFocused,\n      forceFocus = _ref.forceFocus,\n      testID = _ref.testID;\n\n  var _useTheme = (0, _theming.useTheme)(),\n      isV3 = _useTheme.isV3;\n\n  var _getConstants = (0, _helpers.getConstants)(isV3),\n      ICON_OFFSET = _getConstants.ICON_OFFSET;\n\n  var style = (0, _defineProperty2.default)({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID\n  };\n  return _react.default.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\nexports.IconAdornment = IconAdornment;\n\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n      onPress = _ref2.onPress,\n      forceTextInputFocus = _ref2.forceTextInputFocus,\n      color = _ref2.color,\n      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n\n  var _React$useContext = _react.default.useContext(StyleContext),\n      style = _React$useContext.style,\n      isTextInputFocused = _React$useContext.isTextInputFocused,\n      forceFocus = _React$useContext.forceFocus,\n      testID = _React$useContext.testID;\n\n  var onPressWithFocusControl = _react.default.useCallback(function () {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  var theme = (0, _theming.useTheme)();\n  var iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return _react.default.createElement(_reactNative.View, {\n    style: [styles.container, style]\n  }, _react.default.createElement(_IconButton.default, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: _constants.ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID\n  }, rest)));\n};\n\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: _constants.ICON_SIZE,\n    height: _constants.ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\n\nvar _default = TextInputIcon;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["StyleContext","React","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","icon","topPosition","side","useTheme","isV3","getConstants","ICON_OFFSET","top","contextState","Provider","value","TextInputIcon","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","View","styles","container","IconButton","iconButton","size","ICON_SIZE","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton/IconButton';\nimport type { $Omit, Theme } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { useTheme } from '../../../core/theming';\nimport { getConstants } from '../helpers';\nimport { ICON_SIZE } from '../constants';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus, testID }) => {\n  const { isV3 } = useTheme();\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus, testID };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  const theme = useTheme();\n\n  let iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\n        }\n        testID={testID}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"script"}