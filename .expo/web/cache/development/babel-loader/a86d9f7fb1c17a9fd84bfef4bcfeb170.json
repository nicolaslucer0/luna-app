{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Drawer;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _DrawerProgressContext = _interopRequireDefault(require(\"../../utils/DrawerProgressContext\"));\n\nvar _Overlay = _interopRequireDefault(require(\"./Overlay\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\n\nvar minmax = function () {\n  var _f = function _f(value, start, end) {\n    return Math.min(Math.max(value, start), end);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(value,start,end){return Math.min(Math.max(value,start),end);}\";\n  _f.__workletHash = 12387352865556;\n  _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (12:15)\";\n  return _f;\n}();\n\nfunction Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n      drawerPosition = _ref.drawerPosition,\n      drawerStyle = _ref.drawerStyle,\n      drawerType = _ref.drawerType,\n      gestureHandlerProps = _ref.gestureHandlerProps,\n      hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n      keyboardDismissMode = _ref.keyboardDismissMode,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      open = _ref.open,\n      overlayStyle = _ref.overlayStyle,\n      renderDrawerContent = _ref.renderDrawerContent,\n      renderSceneContent = _ref.renderSceneContent,\n      statusBarAnimation = _ref.statusBarAnimation,\n      swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n      swipeEdgeWidth = _ref.swipeEdgeWidth,\n      swipeEnabled = _ref.swipeEnabled,\n      swipeVelocityThreshold = _ref.swipeVelocityThreshold;\n\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref2 = _reactNative.StyleSheet.flatten(drawerStyle) || {},\n        _ref2$width = _ref2.width,\n        width = _ref2$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref2$width;\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function () {\n    var _f = function _f(open) {\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    };\n\n    _f._closure = {\n      drawerPosition: drawerPosition,\n      drawerWidth: drawerWidth\n    };\n    _f.asString = \"function _f(open){const{drawerPosition,drawerWidth}=jsThis._closure;{if(drawerPosition==='left'){return open?0:-drawerWidth;}return open?0:drawerWidth;}}\";\n    _f.__workletHash = 4752955090285;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (60:50)\";\n    return _f;\n  }(), [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      _reactNative.StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = _reactNative.InteractionManager.createInteractionHandle();\n  };\n\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      _reactNative.InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n\n      interactionHandleRef.current = null;\n    }\n  };\n\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      _reactNative.Keyboard.dismiss();\n    }\n  };\n\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  var onGestureFinish = function onGestureFinish() {\n    endInteraction();\n  };\n\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = (0, _reactNativeReanimated.useSharedValue)(0);\n  var touchX = (0, _reactNativeReanimated.useSharedValue)(0);\n  var translationX = (0, _reactNativeReanimated.useSharedValue)(getDrawerTranslationX(open));\n  var gestureState = (0, _reactNativeReanimated.useSharedValue)(_reactNativeGestureHandler.State.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function () {\n    var _f = function _f(open, velocity) {\n      var translateX = getDrawerTranslationX(open);\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = (0, _reactNativeReanimated.withSpring)(translateX, {\n        velocity: velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01\n      });\n\n      if (open) {\n        (0, _reactNativeReanimated.runOnJS)(onOpen)();\n      } else {\n        (0, _reactNativeReanimated.runOnJS)(onClose)();\n      }\n    };\n\n    _f._closure = {\n      getDrawerTranslationX: getDrawerTranslationX,\n      touchStartX: touchStartX,\n      touchX: touchX,\n      translationX: translationX,\n      withSpring: _reactNativeReanimated.withSpring,\n      runOnJS: _reactNativeReanimated.runOnJS,\n      onOpen: onOpen,\n      onClose: onClose\n    };\n    _f.asString = \"function _f(open,velocity){const{getDrawerTranslationX,touchStartX,touchX,translationX,withSpring,runOnJS,onOpen,onClose}=jsThis._closure;{const translateX=getDrawerTranslationX(open);touchStartX.value=0;touchX.value=0;translationX.value=withSpring(translateX,{velocity:velocity,stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01});if(open){runOnJS(onOpen)();}else{runOnJS(onClose)();}}}\";\n    _f.__workletHash = 13769858983382;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (122:41)\";\n    return _f;\n  }(), [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer(open);\n  }, [open, toggleDrawer]);\n  var onGestureEvent = (0, _reactNativeReanimated.useAnimatedGestureHandler)({\n    onStart: function () {\n      var _f = function _f(event, ctx) {\n        ctx.startX = translationX.value;\n        gestureState.value = event.state;\n        touchStartX.value = event.x;\n        (0, _reactNativeReanimated.runOnJS)(onGestureStart)();\n      };\n\n      _f._closure = {\n        translationX: translationX,\n        gestureState: gestureState,\n        touchStartX: touchStartX,\n        runOnJS: _reactNativeReanimated.runOnJS,\n        onGestureStart: onGestureStart\n      };\n      _f.asString = \"function _f(event,ctx){const{translationX,gestureState,touchStartX,runOnJS,onGestureStart}=jsThis._closure;{ctx.startX=translationX.value;gestureState.value=event.state;touchStartX.value=event.x;runOnJS(onGestureStart)();}}\";\n      _f.__workletHash = 5837278583014;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (146:13)\";\n      return _f;\n    }(),\n    onActive: function () {\n      var _f = function _f(event, ctx) {\n        touchX.value = event.x;\n        translationX.value = ctx.startX + event.translationX;\n        gestureState.value = event.state;\n      };\n\n      _f._closure = {\n        touchX: touchX,\n        translationX: translationX,\n        gestureState: gestureState\n      };\n      _f.asString = \"function _f(event,ctx){const{touchX,translationX,gestureState}=jsThis._closure;{touchX.value=event.x;translationX.value=ctx.startX+event.translationX;gestureState.value=event.state;}}\";\n      _f.__workletHash = 16355851393191;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (152:14)\";\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f(event) {\n        gestureState.value = event.state;\n        var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n        toggleDrawer(nextOpen, event.velocityX);\n      };\n\n      _f._closure = {\n        gestureState: gestureState,\n        SWIPE_DISTANCE_MINIMUM: SWIPE_DISTANCE_MINIMUM,\n        swipeVelocityThreshold: swipeVelocityThreshold,\n        swipeDistanceThreshold: swipeDistanceThreshold,\n        drawerPosition: drawerPosition,\n        open: open,\n        toggleDrawer: toggleDrawer\n      };\n      _f.asString = \"function _f(event){const{gestureState,SWIPE_DISTANCE_MINIMUM,swipeVelocityThreshold,swipeDistanceThreshold,drawerPosition,open,toggleDrawer}=jsThis._closure;{gestureState.value=event.state;const nextOpen=Math.abs(event.translationX)>SWIPE_DISTANCE_MINIMUM&&Math.abs(event.translationX)>swipeVelocityThreshold||Math.abs(event.translationX)>swipeDistanceThreshold?drawerPosition==='left'?(event.velocityX===0?event.translationX:event.velocityX)>0:(event.velocityX===0?event.translationX:event.velocityX)<0:open;toggleDrawer(nextOpen,event.velocityX);}}\";\n      _f.__workletHash = 8167669550273;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (157:11)\";\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        (0, _reactNativeReanimated.runOnJS)(onGestureFinish)();\n      };\n\n      _f._closure = {\n        runOnJS: _reactNativeReanimated.runOnJS,\n        onGestureFinish: onGestureFinish\n      };\n      _f.asString = \"function _f(){const{runOnJS,onGestureFinish}=jsThis._closure;{runOnJS(onGestureFinish)();}}\";\n      _f.__workletHash = 10753070071248;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (164:14)\";\n      return _f;\n    }()\n  });\n  var translateX = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      var touchDistance = drawerType === 'front' && gestureState.value === _reactNativeGestureHandler.State.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n      var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n      return translateX;\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      gestureState: gestureState,\n      GestureState: {\n        ACTIVE: _reactNativeGestureHandler.State.ACTIVE\n      },\n      minmax: minmax,\n      drawerPosition: drawerPosition,\n      touchStartX: touchStartX,\n      drawerWidth: drawerWidth,\n      dimensions: {\n        width: dimensions.width\n      },\n      translationX: translationX\n    };\n    _f.asString = \"function _f(){const{drawerType,gestureState,GestureState,minmax,drawerPosition,touchStartX,drawerWidth,dimensions,translationX}=jsThis._closure;{const touchDistance=drawerType==='front'&&gestureState.value===GestureState.ACTIVE?minmax(drawerPosition==='left'?touchStartX.value-drawerWidth:dimensions.width-drawerWidth-touchStartX.value,0,dimensions.width):0;const translateX=drawerPosition==='left'?minmax(translationX.value+touchDistance,-drawerWidth,0):minmax(translationX.value-touchDistance,0,drawerWidth);return translateX;}}\";\n    _f.__workletHash = 16881564590342;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (168:37)\";\n    return _f;\n  }());\n\n  var isRTL = _reactNative.I18nManager.getConstants().isRTL;\n\n  var drawerAnimatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    var _f = function _f() {\n      var distanceFromEdge = dimensions.width - drawerWidth;\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n        }]\n      };\n    };\n\n    _f._closure = {\n      dimensions: {\n        width: dimensions.width\n      },\n      drawerWidth: drawerWidth,\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerPosition: drawerPosition,\n      isRTL: isRTL\n    };\n    _f.asString = \"function _f(){const{dimensions,drawerWidth,drawerType,translateX,drawerPosition,isRTL}=jsThis._closure;{const distanceFromEdge=dimensions.width-drawerWidth;return{transform:drawerType==='permanent'?[]:[{translateX:(drawerType==='back'?0:translateX.value)+(drawerPosition==='left'?isRTL?-distanceFromEdge:0:isRTL?0:distanceFromEdge)}]};}}\";\n    _f.__workletHash = 17545005580326;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (199:47)\";\n    _f.__optimalization = 3;\n    return _f;\n  }());\n  var contentAnimatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    var _f = function _f() {\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n        }]\n      };\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerWidth: drawerWidth,\n      drawerPosition: drawerPosition\n    };\n    _f.asString = \"function _f(){const{drawerType,translateX,drawerWidth,drawerPosition}=jsThis._closure;{return{transform:drawerType==='permanent'?[]:[{translateX:drawerType==='front'?0:translateX.value+drawerWidth*(drawerPosition==='left'?1:-1)}]};}}\";\n    _f.__workletHash = 10940802030343;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (210:48)\";\n    _f.__optimalization = 3;\n    return _f;\n  }());\n  var progress = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      return drawerType === 'permanent' ? 1 : (0, _reactNativeReanimated.interpolate)(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      interpolate: _reactNativeReanimated.interpolate,\n      translateX: translateX,\n      getDrawerTranslationX: getDrawerTranslationX\n    };\n    _f.asString = \"function _f(){const{drawerType,interpolate,translateX,getDrawerTranslationX}=jsThis._closure;{return drawerType==='permanent'?1:interpolate(translateX.value,[getDrawerTranslationX(false),getDrawerTranslationX(true)],[0,1]);}}\";\n    _f.__workletHash = 10677902672597;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (220:35)\";\n    return _f;\n  }());\n  return React.createElement(_DrawerProgressContext.default.Provider, {\n    value: progress\n  }, React.createElement(_reactNativeGestureHandler.PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(_reactNativeReanimated.default.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(_reactNative.View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(_Overlay.default, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer(false);\n    },\n    style: overlayStyle\n  }) : null), React.createElement(_reactNativeReanimated.default.View, {\n    accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n    removeClippedSubviews: _reactNative.Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: Object.assign({\n    flex: 1\n  }, _reactNative.Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","Math","swipeVelocityThreshold","getDrawerWidth","width","StyleSheet","percentage","Number","dimensions","drawerWidth","isOpen","drawerType","isRight","drawerPosition","getDrawerTranslationX","open","hideStatusBar","hide","StatusBar","React","interactionHandleRef","startInteraction","InteractionManager","endInteraction","hideKeyboard","keyboardDismissMode","Keyboard","onGestureStart","onGestureFinish","hitSlop","right","swipeEdgeWidth","left","touchStartX","useSharedValue","touchX","translationX","gestureState","GestureState","toggleDrawer","translateX","withSpring","velocity","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","runOnJS","onGestureEvent","useAnimatedGestureHandler","onStart","ctx","event","onActive","onEnd","nextOpen","onFinish","useDerivedValue","touchDistance","isRTL","I18nManager","drawerAnimatedStyle","useAnimatedStyle","distanceFromEdge","transform","contentAnimatedStyle","progress","interpolate","styles","flexDirection","content","renderSceneContent","overlayStyle","Platform","position","zIndex","renderDrawerContent","container","top","bottom","maxWidth","flex","main","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureFinish = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(translateX, {\n        velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n      });\n\n      if (open) {\n        runOnJS(onOpen)();\n      } else {\n        runOnJS(onClose)();\n      }\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n    },\n    onFinish: () => {\n      runOnJS(onGestureFinish)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const isRTL = I18nManager.getConstants().isRTL;\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    const distanceFromEdge = dimensions.width - drawerWidth;\n\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The drawer stays in place when `drawerType` is `back`\n                  (drawerType === 'back' ? 0 : translateX.value) +\n                  (drawerPosition === 'left'\n                    ? isRTL\n                      ? -distanceFromEdge\n                      : 0\n                    : isRTL\n                    ? 0\n                    : distanceFromEdge),\n              },\n            ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The screen content stays in place when `drawerType` is `front`\n                  drawerType === 'front'\n                    ? 0\n                    : translateX.value +\n                      drawerWidth * (drawerPosition === 'left' ? 1 : -1),\n              },\n            ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"script"}