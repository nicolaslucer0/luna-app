{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerItemList;\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _DrawerItem = _interopRequireDefault(require(\"./DrawerItem\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var buildLink = (0, _native.useLinkBuilder)();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n      drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n      drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch(Object.assign({}, focused ? _native.DrawerActions.closeDrawer() : _native.CommonActions.navigate({\n          name: route.name,\n          merge: true\n        }), {\n          target: state.key\n        }));\n      }\n    };\n\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon,\n        drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n        drawerItemStyle = _descriptors$route$ke.drawerItemStyle,\n        drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;\n    return React.createElement(_DrawerItem.default, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["descriptors","buildLink","focusedRoute","state","focusedDescriptor","focusedOptions","drawerInactiveBackgroundColor","focused","i","onPress","event","type","target","route","canPreventDefault","navigation","DrawerActions","name","merge","key","drawerAllowFontScaling","drawerLabel","title"],"mappings":";;;;;;;AAAA;;AAOA;;AAGA;;;;;;AAWe,SAAA,cAAA,CAAA,IAAA,EAIL;EAJ6B,IAAA,KAAA,GAI7B,IAJ6B,CAAA,KAAA;EAAA,IAAA,UAAA,GAI7B,IAJ6B,CAAA,UAAA;EAAA,IAGrCA,WAHqC,GAI7B,IAJ6B,CAGrCA,WAHqC;EAKrC,IAAMC,SAAS,GAAf,IAAA,sBAAA,GAAA;EAEA,IAAMC,YAAY,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAvC,KAAqBA,CAArB;EACA,IAAMC,iBAAiB,GAAGJ,WAAW,CAACE,YAAY,CAAlD,GAAqC,CAArC;EACA,IAAMG,cAAc,GAAGD,iBAAiB,CAAxC,OAAA;EAEA,IAAM,qBAAN,GAAA,cAAA,CAAM,qBAAN;EAAA,IAAM,uBAAN,GAAA,cAAA,CAAM,uBAAN;EAAA,IAAM,2BAAN,GAAA,cAAA,CAAM,2BAAN;EAAA,IAIEE,6BAJF,GAAA,cAAA,CAIEA,6BAJF;EAOA,OAAO,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;IACpC,IAAMC,OAAO,GAAGC,CAAC,KAAKL,KAAK,CAA3B,KAAA;;IAEA,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAM;MACpB,IAAMC,KAAK,GAAG,UAAU,CAAV,IAAA,CAAgB;QAC5BC,IAAI,EADwB,iBAAA;QAE5BC,MAAM,EAAEC,KAAK,CAFe,GAAA;QAG5BC,iBAAiB,EAAE;MAHS,CAAhB,CAAd;;MAMA,IAAI,CAACJ,KAAK,CAAV,gBAAA,EAA6B;QAC3BK,UAAU,CAAVA,QAAAA,mBACMR,OAAO,GACPS,qBAAAA,CADO,WACPA,EADO,GAEP,qBAAA,CAAA,QAAA,CAAuB;UAAEC,IAAI,EAAEJ,KAAK,CAAb,IAAA;UAAoBK,KAAK,EAAE;QAA3B,CAAvB,CAHNH;UAIEH,MAAM,EAAET,KAAK,CAACgB;QAJhBJ;MAMD;IAdH,CAAA;;IAiBA,4BAOIf,WAAW,CAACa,KAAK,CAAjBb,GAAW,CAAXA,CAPJ,OAAA;IAAA,IAAM,KAAN,yBAAM,KAAN;IAAA,IAAM,WAAN,yBAAM,WAAN;IAAA,IAAM,UAAN,yBAAM,UAAN;IAAA,IAAM,gBAAN,yBAAM,gBAAN;IAAA,IAAM,eAAN,yBAAM,eAAN;IAAA,IAMEoB,sBANF,yBAMEA,sBANF;IASA,OACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;MACE,GAAG,EAAEP,KAAK,CADZ,GAAA;MAEE,KAAK,EACHQ,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEIC,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAT,KAAK,CAPb,IAAA;MASE,IAAI,EATN,UAAA;MAUE,OAAO,EAVT,OAAA;MAWE,eAAe,EAXjB,qBAAA;MAYE,iBAAiB,EAZnB,uBAAA;MAaE,qBAAqB,EAbvB,2BAAA;MAcE,uBAAuB,EAdzB,6BAAA;MAeE,gBAAgB,EAflB,sBAAA;MAgBE,UAAU,EAhBZ,gBAAA;MAiBE,KAAK,EAjBP,eAAA;MAkBE,EAAE,EAAEZ,SAAS,CAACY,KAAK,CAAN,IAAA,EAAaA,KAAK,CAlBjC,MAkBe,CAlBf;MAmBE,OAAO,EAAEJ;IAnBX,CAAA,CADF;EA7BF,CAAO,CAAP;AAqDD","sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"script"}