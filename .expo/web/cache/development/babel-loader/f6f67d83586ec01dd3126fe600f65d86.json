{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTouchableRippleColors = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar getUnderlayColor = function getUnderlayColor(_ref) {\n  var theme = _ref.theme,\n      calculatedRippleColor = _ref.calculatedRippleColor,\n      underlayColor = _ref.underlayColor;\n\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return (0, _color.default)(calculatedRippleColor).rgb().string();\n  }\n\n  return (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nvar getRippleColor = function getRippleColor(_ref2) {\n  var theme = _ref2.theme,\n      rippleColor = _ref2.rippleColor;\n\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return (0, _color.default)(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return (0, _color.default)(theme.colors.text).alpha(0.32).rgb().string();\n  }\n\n  return (0, _color.default)(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nvar getTouchableRippleColors = function getTouchableRippleColors(_ref3) {\n  var theme = _ref3.theme,\n      rippleColor = _ref3.rippleColor,\n      underlayColor = _ref3.underlayColor;\n  var calculatedRippleColor = getRippleColor({\n    theme: theme,\n    rippleColor: rippleColor\n  });\n  return {\n    calculatedRippleColor: calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme: theme,\n      calculatedRippleColor: calculatedRippleColor,\n      underlayColor: underlayColor\n    })\n  };\n};\n\nexports.getTouchableRippleColors = getTouchableRippleColors;","map":{"version":3,"sources":["utils.ts"],"names":["getUnderlayColor","underlayColor","theme","color","getRippleColor","rippleColor","getTouchableRippleColors","calculatedRippleColor","calculatedUnderlayColor"],"mappings":";;;;;;;AAAA;;AAGA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAQnB;EARoB,IAAA,KAAA,GAQpB,IARoB,CAAA,KAAA;EAAA,IAAA,qBAAA,GAQpB,IARoB,CAAA,qBAAA;EAAA,IAGxBC,aAHwB,GAQpB,IARoB,CAGxBA,aAHwB;;EASxB,IAAIA,aAAa,IAAjB,IAAA,EAA2B;IACzB,OAAA,aAAA;EACD;;EAED,IAAIC,KAAK,CAAT,IAAA,EAAgB;IACd,OAAOC,IAAAA,cAAAA,EAAAA,qBAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;EACD;;EAED,OAAOA,IAAAA,cAAAA,EAAAA,qBAAAA,EAAAA,IAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;AAjBF,CAAA;;AAoBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAMjB;EANkB,IAAA,KAAA,GAMlB,KANkB,CAAA,KAAA;EAAA,IAEtBC,WAFsB,GAMlB,KANkB,CAEtBA,WAFsB;;EAOtB,IAAA,WAAA,EAAiB;IACf,OAAA,WAAA;EACD;;EAED,IAAIH,KAAK,CAAT,IAAA,EAAgB;IACd,OAAOC,IAAAA,cAAAA,EAAMD,KAAK,CAALA,MAAAA,CAANC,SAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;EACD;;EAED,IAAID,KAAK,CAAT,IAAA,EAAgB;IACd,OAAOC,IAAAA,cAAAA,EAAMD,KAAK,CAALA,MAAAA,CAANC,IAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;EACD;;EACD,OAAOA,IAAAA,cAAAA,EAAMD,KAAK,CAALA,MAAAA,CAANC,IAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;AAlBF,CAAA;;AAqBO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAQlC;EARmC,IAAA,KAAA,GAQnC,KARmC,CAAA,KAAA;EAAA,IAAA,WAAA,GAQnC,KARmC,CAAA,WAAA;EAAA,IAGvCL,aAHuC,GAQnC,KARmC,CAGvCA,aAHuC;EASvC,IAAMM,qBAAqB,GAAGH,cAAc,CAAC;IAAEF,KAAF,EAAEA,KAAF;IAASG,WAAAA,EAAAA;EAAT,CAAD,CAA5C;EACA,OAAO;IACLE,qBADK,EACLA,qBADK;IAELC,uBAAuB,EAAER,gBAAgB,CAAC;MACxCE,KADwC,EACxCA,KADwC;MAExCK,qBAFwC,EAExCA,qBAFwC;MAGxCN,aAAAA,EAAAA;IAHwC,CAAD;EAFpC,CAAP;AAVK,CAAA","sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\nconst getUnderlayColor = ({\n  theme,\n  calculatedRippleColor,\n  underlayColor,\n}: {\n  theme: Theme;\n  calculatedRippleColor: string;\n  underlayColor?: string;\n}) => {\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  rippleColor,\n}: {\n  theme: Theme;\n  rippleColor?: string;\n}) => {\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport const getTouchableRippleColors = ({\n  theme,\n  rippleColor,\n  underlayColor,\n}: {\n  theme: Theme;\n  rippleColor?: string;\n  underlayColor?: string;\n}) => {\n  const calculatedRippleColor = getRippleColor({ theme, rippleColor });\n  return {\n    calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme,\n      calculatedRippleColor,\n      underlayColor,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}