{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIconButtonColor = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar getBorderColor = function getBorderColor(_ref) {\n  var theme = _ref.theme,\n      disabled = _ref.disabled;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref2) {\n  var theme = _ref2.theme,\n      isMode = _ref2.isMode,\n      disabled = _ref2.disabled,\n      selected = _ref2.selected,\n      customContainerColor = _ref2.customContainerColor;\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nvar getIconColor = function getIconColor(_ref3) {\n  var theme = _ref3.theme,\n      isMode = _ref3.isMode,\n      disabled = _ref3.disabled,\n      selected = _ref3.selected,\n      customIconColor = _ref3.customIconColor;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nvar getRippleColor = function getRippleColor(_ref4) {\n  var theme = _ref4.theme,\n      iconColor = _ref4.iconColor;\n\n  if (theme.isV3) {\n    return (0, _color.default)(iconColor).alpha(0.12).rgb().string();\n  }\n\n  return (0, _color.default)(iconColor).alpha(0.32).rgb().string();\n};\n\nvar getIconButtonColor = function getIconButtonColor(_ref5) {\n  var theme = _ref5.theme,\n      disabled = _ref5.disabled,\n      mode = _ref5.mode,\n      selected = _ref5.selected,\n      customIconColor = _ref5.customIconColor,\n      customContainerColor = _ref5.customContainerColor;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var baseIconColorProps = {\n    theme: theme,\n    isMode: isMode,\n    disabled: disabled,\n    selected: selected\n  };\n  var iconColor = getIconColor(Object.assign({}, baseIconColorProps, {\n    customIconColor: customIconColor\n  }));\n  return {\n    iconColor: iconColor,\n    backgroundColor: getBackgroundColor(Object.assign({}, baseIconColorProps, {\n      customContainerColor: customContainerColor\n    })),\n    rippleColor: getRippleColor({\n      theme: theme,\n      iconColor: iconColor\n    }),\n    borderColor: getBorderColor({\n      theme: theme,\n      disabled: disabled\n    })\n  };\n};\n\nexports.getIconButtonColor = getIconButtonColor;","map":{"version":3,"sources":["utils.ts"],"names":["getBorderColor","disabled","theme","getBackgroundColor","customContainerColor","isMode","getIconColor","customIconColor","getRippleColor","iconColor","color","getIconButtonColor","modeToCompare","mode","baseIconColorProps","selected","backgroundColor","rippleColor","borderColor"],"mappings":"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","sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: Theme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: Theme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}