{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SegmentedButton = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar SegmentedButtonItem = function SegmentedButtonItem(_ref) {\n  var checked = _ref.checked,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      showSelectedCheck = _ref.showSelectedCheck,\n      icon = _ref.icon,\n      testID = _ref.testID,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      segment = _ref.segment,\n      _ref$density = _ref.density,\n      density = _ref$density === void 0 ? 'regular' : _ref$density;\n  var theme = (0, _theming.useTheme)();\n  var checkScale = React.useRef(new _reactNative.Animated.Value(0)).current;\n  React.useEffect(function () {\n    if (!showSelectedCheck) {\n      return;\n    }\n\n    if (checked) {\n      _reactNative.Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  var roundness = theme.roundness,\n      isV3 = theme.isV3;\n\n  var _getSegmentedButtonCo = (0, _utils.getSegmentedButtonColors)({\n    checked: checked,\n    theme: theme,\n    disabled: disabled\n  }),\n      borderColor = _getSegmentedButtonCo.borderColor,\n      textColor = _getSegmentedButtonCo.textColor,\n      borderWidth = _getSegmentedButtonCo.borderWidth,\n      backgroundColor = _getSegmentedButtonCo.backgroundColor;\n\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var segmentBorderRadius = (0, _utils.getSegmentedButtonBorderRadius)({\n    theme: theme,\n    segment: segment\n  });\n  var rippleColor = (0, _color.default)(textColor).alpha(0.12).rgb().string();\n  var iconSize = isV3 ? 18 : 16;\n  var iconStyle = Object.assign({\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0\n  }, label && {\n    transform: [{\n      scale: checkScale.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })\n    }]\n  });\n  var buttonStyle = Object.assign({\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n  var paddingVertical = (0, _utils.getSegmentedButtonDensityPadding)({\n    density: density\n  });\n  var rippleStyle = Object.assign({\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n  var showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  var textStyle = Object.assign({}, !isV3 && {\n    textTransform: 'uppercase',\n    fontWeight: '500'\n  }, {\n    color: textColor\n  });\n  return React.createElement(_reactNative.View, {\n    style: [buttonStyle, styles.button, style]\n  }, React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, {\n      paddingVertical: paddingVertical\n    }]\n  }, checked && showSelectedCheck ? React.createElement(_reactNative.Animated.View, {\n    testID: testID + \"-check-icon\",\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, React.createElement(_Icon.default, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? React.createElement(_reactNative.Animated.View, {\n    style: iconStyle\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    style: [styles.label, textStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\n\nvar _default = SegmentedButtonItem;\nexports.default = _default;\nvar SegmentedButtonWithTheme = SegmentedButtonItem;\nexports.SegmentedButton = SegmentedButtonWithTheme;","map":{"version":3,"sources":["SegmentedButtonItem.tsx"],"names":["SegmentedButtonItem","density","theme","checkScale","React","Animated","toValue","useNativeDriver","isV3","backgroundColor","getSegmentedButtonColors","checked","disabled","borderRadius","segmentBorderRadius","getSegmentedButtonBorderRadius","segment","rippleColor","color","iconSize","iconStyle","marginRight","label","transform","scale","inputRange","outputRange","buttonStyle","borderColor","borderWidth","paddingVertical","getSegmentedButtonDensityPadding","rippleStyle","showIcon","icon","textStyle","textTransform","fontWeight","textColor","styles","undefined","button","minWidth","borderStyle","textAlign","content","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n  StyleSheet,\n  View,\n  TextStyle,\n  Animated,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { IconSource } from '../Icon';\nimport color from 'color';\nimport Icon from '../Icon';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  const textStyle: TextStyle = {\n    ...(!isV3 && {\n      textTransform: 'uppercase',\n      fontWeight: '500',\n    }),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {checked && showSelectedCheck ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, textStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"]},"metadata":{},"sourceType":"script"}