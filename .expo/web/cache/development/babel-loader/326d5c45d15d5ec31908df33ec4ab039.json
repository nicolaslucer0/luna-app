{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getAdornmentConfig = getAdornmentConfig;\nexports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TextInputIcon = _interopRequireWildcard(require(\"./TextInputIcon\"));\n\nvar _TextInputAffix = _interopRequireWildcard(require(\"./TextInputAffix\"));\n\nvar _enums = require(\"./enums\");\n\nvar _helpers = require(\"../helpers\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: _enums.AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: _enums.AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && _react.default.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === _TextInputAffix.default) {\n          type = _enums.AdornmentType.Affix;\n        } else if (adornment.type === _TextInputIcon.default) {\n          type = _enums.AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nfunction getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode,\n      isV3 = _ref3.isV3;\n\n  var _getConstants = (0, _helpers.getConstants)(isV3),\n      OUTLINED_INPUT_OFFSET = _getConstants.OUTLINED_INPUT_OFFSET,\n      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === _enums.AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === _enums.AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, (0, _defineProperty2.default)(_ref7, marginKey, isAffix ? 0 : offset), (0, _defineProperty2.default)(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return Object.assign({}, mergedStyles, currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n      left = _ref5.left,\n      right = _ref5.right,\n      onAffixChange = _ref5.onAffixChange,\n      textStyle = _ref5.textStyle,\n      visible = _ref5.visible,\n      topPosition = _ref5.topPosition,\n      isTextInputFocused = _ref5.isTextInputFocused,\n      forceFocus = _ref5.forceFocus,\n      paddingHorizontal = _ref5.paddingHorizontal,\n      maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n\n  if (adornmentConfig.length) {\n    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n          side = _ref6.side;\n      var inputAdornmentComponent;\n\n      if (side === _enums.AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === _enums.AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === _enums.AdornmentType.Icon) {\n        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[_enums.AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === _enums.AdornmentType.Affix) {\n        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[_enums.AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar _default = TextInputAdornment;\nexports.default = _default;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","isV3","ADORNMENT_OFFSET","getConstants","adornmentStyleAdjustmentForNativeInput","isLeftSide","inputModeAdornemntOffset","mode","InputMode","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","currentStyle","text","TextInputAdornment","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","paddingHorizontal","topPosition","forceFocus","onAffixChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport { getConstants } from '../helpers';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"script"}