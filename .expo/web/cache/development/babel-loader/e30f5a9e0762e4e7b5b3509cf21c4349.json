{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      underlineColor = _ref.underlineColor,\n      activeUnderlineColor = _ref.activeUnderlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'text-input' : _ref$testID,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isAndroid = _reactNative.Platform.OS === 'android';\n  var colors = theme.colors,\n      isV3 = theme.isV3,\n      roundness = theme.roundness;\n  var font = !isV3 ? theme.fonts.regular : {};\n  var hasActiveOutline = parentState.focused || error;\n\n  var _getConstants = (0, _helpers.getConstants)(isV3),\n      LABEL_PADDING_TOP = _getConstants.LABEL_PADDING_TOP,\n      FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET,\n      MIN_HEIGHT = _getConstants.MIN_HEIGHT;\n\n  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref3.fontSize,\n      fontWeight = _ref3.fontWeight,\n      height = _ref3.height,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      textAlign = _ref3.textAlign,\n      viewStyle = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);\n\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n\n  var _calculateFlatInputHo = (0, _helpers.calculateFlatInputHorizontalPadding)({\n    adornmentConfig: adornmentConfig,\n    isV3: isV3\n  }),\n      paddingLeft = _calculateFlatInputHo.paddingLeft,\n      paddingRight = _calculateFlatInputHo.paddingRight;\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: _enums.InputMode.Flat,\n    isV3: isV3\n  });\n\n  var _getFlatInputColors = (0, _helpers.getFlatInputColors)({\n    underlineColor: underlineColor,\n    activeUnderlineColor: activeUnderlineColor,\n    disabled: disabled,\n    error: error,\n    theme: theme\n  }),\n      inputTextColor = _getFlatInputColors.inputTextColor,\n      activeColor = _getFlatInputColors.activeColor,\n      underlineColorCustom = _getFlatInputColors.underlineColorCustom,\n      placeholderColor = _getFlatInputColors.placeholderColor,\n      errorColor = _getFlatInputColors.errorColor,\n      backgroundColor = _getFlatInputColors.backgroundColor;\n\n  var containerStyle = {\n    backgroundColor: backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactNative.I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT) - _constants.LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingFlat = (0, _helpers.adjustPaddingFlat)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + _constants.MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? _constants.LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({\n    height: flatHeight\n  }, paddingFlat, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({\n    height: flatHeight\n  }, paddingFlat, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: isAndroid ? {\n      paddingLeft: _reactNative.I18nManager.isRTL ? paddingRight : paddingLeft,\n      paddingRight: _reactNative.I18nManager.isRTL ? paddingLeft : paddingRight\n    } : {\n      paddingRight: paddingRight,\n      paddingLeft: paddingLeft\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID\n  };\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    hasActiveOutline: hasActiveOutline,\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && !!label && React.createElement(_reactNative.View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: testID + \"-flat\"\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps));\n};\n\nvar _default = TextInputFlat;\nexports.default = _default;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom,\n      hasActiveOutline = _ref2.hasActiveOutline;\n\n  var _useTheme = (0, _theming.useTheme)(),\n      isV3 = _useTheme.isV3;\n\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors === null || colors === void 0 ? void 0 : colors.error;\n  var activeScale = isV3 ? 2 : 1;\n  return React.createElement(_reactNative.Animated.View, {\n    style: [styles.underline, isV3 && styles.md3Underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: (isV3 ? hasActiveOutline : parentState.focused) ? activeScale : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  md3Underline: {\n    height: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["TextInputFlat","disabled","editable","label","error","selectionColor","underlineColor","activeUnderlineColor","dense","style","theme","render","props","React","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","rest","isAndroid","Platform","OS","colors","isV3","roundness","font","fonts","regular","hasActiveOutline","focused","getConstants","LABEL_PADDING_TOP","FLAT_INPUT_OFFSET","MIN_HEIGHT","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","height","paddingHorizontal","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","isPaddingHorizontalPassed","undefined","adornmentConfig","getAdornmentConfig","calculateFlatInputHorizontalPadding","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","ADORNMENT_SIZE","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","mode","InputMode","Flat","getFlatInputColors","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","backgroundColor","containerStyle","borderTopLeftRadius","borderTopRightRadius","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","LABEL_PADDING_TOP_DENSE","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","MINIMIZED_LABEL_Y_OFFSET","placeholderOpacity","interpolatePlaceholder","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","placeholder","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","paddingOffset","maxFontSizeMultiplier","affixTopPosition","AdornmentSide","Left","Right","onAffixChange","adornmentProps","AdornmentType","Affix","Icon","isTextInputFocused","length","textStyle","visible","View","Underline","labelContainer","pointerEvents","absoluteFill","densePatchContainer","patchContainer","InputLabel","ref","underlineColorAndroid","input","color","textAlignVertical","outline","TextInputAdornment","useTheme","activeScale","Animated","underline","md3Underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\nimport { useTheme } from '../../core/theming';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP_DENSE,\n  MIN_DENSE_HEIGHT_WL,\n  MIN_DENSE_HEIGHT,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n  getFlatInputColors,\n  getConstants,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input',\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, isV3, roundness } = theme;\n  const font = !isV3 ? theme.fonts.regular : {};\n  const hasActiveOutline = parentState.focused || error;\n\n  const { LABEL_PADDING_TOP, FLAT_INPUT_OFFSET, MIN_HEIGHT } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n      isV3,\n    });\n\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor,\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: isAndroid\n      ? {\n          paddingLeft: I18nManager.isRTL ? paddingRight : paddingLeft,\n          paddingRight: I18nManager.isRTL ? paddingLeft : paddingRight,\n        }\n      : { paddingRight, paddingLeft },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        hasActiveOutline={hasActiveOutline}\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: `${testID}-flat`,\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors?: {\n    error?: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n  hasActiveOutline?: boolean;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n  hasActiveOutline,\n}: UnderlineProps) => {\n  const { isV3 } = useTheme();\n\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n\n  if (error) backgroundColor = colors?.error;\n\n  const activeScale = isV3 ? 2 : 1;\n\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        isV3 && styles.md3Underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [\n            {\n              scaleY: (isV3 ? hasActiveOutline : parentState.focused)\n                ? activeScale\n                : 0.5,\n            },\n          ],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  md3Underline: {\n    height: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}