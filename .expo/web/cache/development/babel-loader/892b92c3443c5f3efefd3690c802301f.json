{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsKeyboardShown;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useIsKeyboardShown(_ref) {\n  var onShow = _ref.onShow,\n      onHide = _ref.onHide;\n  React.useEffect(function () {\n    var willShowSubscription;\n    var willHideSubscription;\n    var didShowSubscription;\n    var didHideSubscription;\n\n    if (_reactNative.Platform.OS === 'ios') {\n      willShowSubscription = _reactNative.Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = _reactNative.Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = _reactNative.Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = _reactNative.Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return function () {\n      if (_reactNative.Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          _reactNative.Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          _reactNative.Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          _reactNative.Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          _reactNative.Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["onHide","React","Platform","willShowSubscription","Keyboard","willHideSubscription","didShowSubscription","didHideSubscription"],"mappings":";;;;;AAAA;;AACA;;;;;;AAMe,SAAA,kBAAA,CAAA,IAAA,EAAuD;EAA3B,IAAA,MAAA,GAA2B,IAA3B,CAAA,MAAA;EAAA,IAAUA,MAAV,GAA2B,IAA3B,CAAUA,MAAV;EACzCC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAA,oBAAA;IACA,IAAA,oBAAA;IACA,IAAA,mBAAA;IACA,IAAA,mBAAA;;IAEA,IAAIC,qBAAAA,CAAAA,EAAAA,KAAJ,KAAA,EAA2B;MACzBC,oBAAoB,GAAGC,qBAAAA,CAAAA,WAAAA,CAAAA,kBAAAA,EAAvBD,MAAuBC,CAAvBD;MACAE,oBAAoB,GAAGD,qBAAAA,CAAAA,WAAAA,CAAAA,kBAAAA,EAAvBC,MAAuBD,CAAvBC;IAFF,CAAA,MAGO;MACLC,mBAAmB,GAAGF,qBAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,EAAtBE,MAAsBF,CAAtBE;MACAC,mBAAmB,GAAGH,qBAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,EAAtBG,MAAsBH,CAAtBG;IACD;;IAED,OAAO,YAAM;MACX,IAAIL,qBAAAA,CAAAA,EAAAA,KAAJ,KAAA,EAA2B;QAAA,IAAA,qBAAA,EAAA,qBAAA;;QACzB,IAAA,CAAA,qBAAA,GAAA,oBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIC,qBAAAA,CAAJ,MAAA,EAAkC;UAChCA,oBAAoB,CAApBA,MAAAA;QADF,CAAA,MAEO;UACLC,qBAAAA,CAAAA,cAAAA,CAAAA,kBAAAA,EAAAA,MAAAA;QACD;;QAED,IAAA,CAAA,qBAAA,GAAA,oBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIC,qBAAAA,CAAJ,MAAA,EAAkC;UAChCA,oBAAoB,CAApBA,MAAAA;QADF,CAAA,MAEO;UACLD,qBAAAA,CAAAA,cAAAA,CAAAA,kBAAAA,EAAAA,MAAAA;QACD;MAXH,CAAA,MAYO;QAAA,IAAA,oBAAA,EAAA,oBAAA;;QACL,IAAA,CAAA,oBAAA,GAAA,mBAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,IAAIE,oBAAAA,CAAJ,MAAA,EAAiC;UAC/BA,mBAAmB,CAAnBA,MAAAA;QADF,CAAA,MAEO;UACLF,qBAAAA,CAAAA,cAAAA,CAAAA,iBAAAA,EAAAA,MAAAA;QACD;;QAED,IAAA,CAAA,oBAAA,GAAA,mBAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,IAAIG,oBAAAA,CAAJ,MAAA,EAAiC;UAC/BA,mBAAmB,CAAnBA,MAAAA;QADF,CAAA,MAEO;UACLH,qBAAAA,CAAAA,cAAAA,CAAAA,iBAAAA,EAAAA,MAAAA;QACD;MACF;IAzBH,CAAA;EAdFH,CAAAA,EAyCG,CAAA,MAAA,EAzCHA,MAyCG,CAzCHA;AA0CD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"script"}