{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _types = require(\"../../types\");\n\nvar _excluded = [\"style\", \"theme\", \"variant\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      variant = _ref.variant,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var writingDirection = _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    var stylesByVariant = Object.keys(_types.MD3TypescaleKey).reduce(function (acc, key) {\n      var _theme$typescale$key = theme.typescale[key],\n          fontSize = _theme$typescale$key.fontSize,\n          fontWeight = _theme$typescale$key.fontWeight,\n          lineHeight = _theme$typescale$key.lineHeight,\n          letterSpacing = _theme$typescale$key.letterSpacing,\n          fontFamily = _theme$typescale$key.fontFamily;\n      return Object.assign({}, acc, (0, _defineProperty2.default)({}, key, Object.assign({}, _reactNative.Platform.OS === 'android' && {\n        fontFamily: fontFamily\n      }, {\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing,\n        color: theme.colors.onSurface\n      })));\n    }, {});\n    var styleForVariant = stylesByVariant[variant];\n    return React.createElement(_reactNative.Animated.Text, _extends({}, rest, {\n      style: [styleForVariant, styles.text, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  } else {\n    return React.createElement(_reactNative.Animated.Text, _extends({}, rest, {\n      style: [styles.text, Object.assign({}, !theme.isV3 && theme.fonts.regular, {\n        color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n        writingDirection: writingDirection\n      }), style]\n    }));\n  }\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AnimatedText);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASA,YAAT,OAAiE;EAAA,IAAzCC,KAAyC,QAAzCA,KAAyC;EAAA,IAAlCC,KAAkC,QAAlCA,KAAkC;EAAA,IAA3BC,OAA2B,QAA3BA,OAA2B;EAAA,IAAfC,IAAe;EAC/D,IAAMC,gBAAgB,GAAGC,yBAAYC,KAAZD,GAAoB,KAApBA,GAA4B,KAArD;;EAEA,IAAIJ,KAAK,CAACM,IAANN,IAAcC,OAAlB,EAA2B;IACzB,IAAMM,eAAe,GAAGC,MAAM,CAACC,IAAPD,CAAYE,sBAAZF,EAA6BG,MAA7BH,CACtB,UAACI,GAAD,EAAMC,GAAN,EAAc;MACZ,2BACEb,KAAK,CAACc,SAANd,CAAgBa,GAAhBb,CADF;MAAA,IAAQe,QAAR,wBAAQA,QAAR;MAAA,IAAkBC,UAAlB,wBAAkBA,UAAlB;MAAA,IAA8BC,UAA9B,wBAA8BA,UAA9B;MAAA,IAA0CC,aAA1C,wBAA0CA,aAA1C;MAAA,IAAyDC,UAAzD,wBAAyDA,UAAzD;MAGA,yBACKP,GADL,oCAEGC,GAFH,oBAGQO,sBAASC,EAATD,KAAgB,SAAhBA,IAA6B;QAAED;MAAF,CAHrC;QAIIJ,QAFK,EAELA,QAJJ;QAKIC,UAHK,EAGLA,UALJ;QAMIC,UAAU,EAAEA,UANhB;QAOIC,aALK,EAKLA,aAPJ;QAQII,KAAK,EAAEtB,KAAK,CAACuB,MAANvB,CAAawB;MARxB;IALoB,GAiBtB,EAjBsBhB,CAAxB;IA2BA,IAAMiB,eAAe,GAAGlB,eAAe,CAACN,OAAD,CAAvC;IAEA,OACEyB,oBAACC,sBAASC,IAAV,eACM1B,IADN;MAEEH,KAAK,EAAE,CAAC0B,eAAD,EAAkBI,MAAM,CAACC,IAAzB,EAA+B;QAAE3B;MAAF,CAA/B,EAAqDJ,KAArD;IAFT,GADF;EA9BF,OAoCO;IACL,OACE2B,oBAACC,sBAASC,IAAV,eACM1B,IADN;MAEEH,KAAK,EAAE,CACL8B,MAAM,CAACC,IADF,oBAGC,CAAC9B,KAAK,CAACM,IAAP,IAAeN,KAAK,CAAC+B,KAAN/B,CAAYgC,OAH5B;QAIHV,KAAK,EAAEtB,KAAK,CAACM,IAANN,GAAaA,KAAK,CAACuB,MAANvB,CAAawB,SAA1BxB,GAAsCA,KAAK,CAACuB,MAANvB,CAAa8B,IAJvD;QAKH3B;MALG,IAOLJ,KAPK;IAFT,GADF;EAcD;AACF;;AAED,IAAM8B,MAAM,GAAGI,wBAAWC,MAAXD,CAAkB;EAC/BH,IAAI,EAAE;IACJK,SAAS,EAAE;EADP;AADyB,CAAlBF,CAAf;;eAMeG,wBAAUtC,YAAVsC,C","names":["AnimatedText","style","theme","variant","rest","writingDirection","I18nManager","isRTL","isV3","stylesByVariant","Object","keys","MD3TypescaleKey","reduce","acc","key","typescale","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","Platform","OS","color","colors","onSurface","styleForVariant","React","Animated","Text","styles","text","fonts","regular","StyleSheet","create","textAlign","withTheme"],"sources":["AnimatedText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  Platform,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, variant, ...rest }: Props) {\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.typescale[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            ...(Platform.OS === 'android' && { fontFamily }),\n            fontSize,\n            fontWeight,\n            lineHeight: lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n      />\n    );\n  } else {\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          {\n            ...(!theme.isV3 && theme.fonts.regular),\n            color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]},"metadata":{},"sourceType":"script"}