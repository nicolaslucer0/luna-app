{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar _utils = require(\"../../utils\");\n\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;\nvar setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;\nvar GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: _State.State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 463937378312;\n          _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (14:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: _State.State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5304131972715;\n          _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (23:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: _State.State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 180936263236;\n          _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (32:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              END: _State.State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 14407529741256;\n          _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (41:11)\";\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n      setGestureState: setGestureState,\n      State: {\n        BEGAN: _State.State.BEGAN,\n        ACTIVE: _State.State.ACTIVE,\n        FAILED: _State.State.FAILED,\n        END: _State.State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{REANIMATED_AVAILABLE,setGestureState,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3925022521265;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js\";\n    return _f;\n  }()\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","REANIMATED_AVAILABLE","setGestureState","Reanimated","GestureStateManager","create","begin","State","console","activate","fail","end"],"mappings":";;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAGC,IAAAA,iBAAAA,EACrB,kFADqBA,CAAvB;AAMA,IAAMC,oBAAoB,GAAG,CAAA,6BAAA,KAAA,IAAA,IAAA,6BAAA,KAAU,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,6BAAA,CAAA,cAAA,MAA7B,SAAA;AACA,IAAMC,eAAe,GAAA,6BAAA,KAAA,IAAA,IAAA,6BAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGC,6BAAAA,CAAxB,eAAA;AAEO,IAAMC,mBAAmB,GAAG;EACjCC,MADiC;IAAA,qBAC3B,UAD2B,EACmB;MAElD,OAAO;QACLC,KAAK;UAAA,uBAAQ;YAEX,IAAA,oBAAA,EAA0B;cACxBJ,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,KAAe,CAAfA;YADF,CAAA,MAEO;cACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UAPE,CACA;;UAAA;YAAA,sBAtBX,oBAsBW;YAAA,iBAbX,eAaW;YAAA,YAbS,UAaT;YAAA;cAAA,OAbYR,YAAAA,CAAvB;YAaW;YAAA,gB;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA,GADA;QAULS,QAAQ;UAAA,uBAAQ;YAEd,IAAA,oBAAA,EAA0B;cACxBP,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,MAAe,CAAfA;YADF,CAAA,MAEO;cACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UAhBE,CAUG;;UAAA;YAAA,sBA/Bd,oBA+Bc;YAAA,iBAtBd,eAsBc;YAAA,YAtBM,UAsBN;YAAA;cAAA,QAtBSR,YAAAA,CAAvB;YAsBc;YAAA,gB;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA,GAVH;QAmBLU,IAAI;UAAA,uBAAQ;YAEV,IAAA,oBAAA,EAA0B;cACxBR,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,MAAe,CAAfA;YADF,CAAA,MAEO;cACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UAzBE,CAmBD;;UAAA;YAAA,sBAxCV,oBAwCU;YAAA,iBA/BV,eA+BU;YAAA,YA/BU,UA+BV;YAAA;cAAA,QA/BaR,YAAAA,CAAvB;YA+BU;YAAA,gB;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA,GAnBC;QA4BLW,GAAG;UAAA,uBAAQ;YAET,IAAA,oBAAA,EAA0B;cACxBT,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,GAAe,CAAfA;YADF,CAAA,MAEO;cACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UACF,CAPE;;UAAA;YAAA,sBAjDT,oBAiDS;YAAA,iBAxCT,eAwCS;YAAA,YAxCW,UAwCX;YAAA;cAAA,KAxCcR,YAAAA,CAAvB;YAwCS;YAAA,gB;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA;MA5BE,CAAP;IAqCD,CAxCgC;;IAAA;MAAA,sB,oBAAA;MAAA,iBAwB3B,eAxB2B;MAAA;QAAA,OAFd,YAAA,CAAA,KAEc;QAAA,QAMD,YAAA,CAAA,MANC;QAAA,QAeD,YAAA,CAAA,MAfC;QAAA,KAwBD,YAAA,CAAA;MAxBC;MAAA,gBA0BpB;IA1BoB;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}