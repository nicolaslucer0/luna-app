{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderAppbarContent = exports.modeTextVariant = exports.modeAppbarHeight = exports.getAppbarColor = exports.DEFAULT_APPBAR_HEIGHT = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AppbarContent = _interopRequireDefault(require(\"./AppbarContent\"));\n\nvar _AppbarAction = _interopRequireDefault(require(\"./AppbarAction\"));\n\nvar _AppbarBackAction = _interopRequireDefault(require(\"./AppbarBackAction\"));\n\nvar _overlay = _interopRequireDefault(require(\"../../styles/overlay\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar getAppbarColor = function getAppbarColor(theme, elevation, customBackground, elevated) {\n  var isV3 = theme.isV3,\n      isDarkTheme = theme.dark,\n      mode = theme.mode,\n      colors = theme.colors;\n  var isAdaptiveMode = mode === 'adaptive';\n\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return (0, _overlay.default)(elevation, colors === null || colors === void 0 ? void 0 : colors.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return (0, _color.default)(colors.surface).mix((0, _color.default)(colors.primary), 0.08).rgb().string();\n  }\n\n  return colors.surface;\n};\n\nexports.getAppbarColor = getAppbarColor;\nvar DEFAULT_APPBAR_HEIGHT = 56;\nexports.DEFAULT_APPBAR_HEIGHT = DEFAULT_APPBAR_HEIGHT;\nvar MD3_DEFAULT_APPBAR_HEIGHT = 64;\nvar modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT\n};\nexports.modeAppbarHeight = modeAppbarHeight;\nvar modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge'\n};\nexports.modeTextVariant = modeTextVariant;\n\nvar renderAppbarContent = function renderAppbarContent(_ref) {\n  var children = _ref.children,\n      isDark = _ref.isDark,\n      _ref$shouldCenterCont = _ref.shouldCenterContent,\n      shouldCenterContent = _ref$shouldCenterCont === void 0 ? false : _ref$shouldCenterCont,\n      isV3 = _ref.isV3,\n      renderOnly = _ref.renderOnly,\n      renderExcept = _ref.renderExcept,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'small' : _ref$mode;\n  return _react.default.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).filter(function (child) {\n    return renderExcept ? !renderExcept.includes(child.type) : child;\n  }).filter(function (child) {\n    return renderOnly ? renderOnly.includes(child.type) : child;\n  }).map(function (child, i) {\n    if (!_react.default.isValidElement(child) || ![_AppbarContent.default, _AppbarAction.default, _AppbarBackAction.default].includes(child.type)) {\n      return child;\n    }\n\n    var props = {\n      color: isV3 ? undefined : typeof child.props.color !== 'undefined' ? child.props.color : isDark ? _colors.white : _colors.black\n    };\n\n    if (child.type === _AppbarContent.default) {\n      props.mode = mode;\n      props.style = [isV3 ? i === 0 && !shouldCenterContent && styles.v3Spacing : i !== 0 && styles.v2Spacing, shouldCenterContent && styles.centerAlignedContent, child.props.style];\n    }\n\n    return _react.default.cloneElement(child, props);\n  });\n};\n\nexports.renderAppbarContent = renderAppbarContent;\n\nvar styles = _reactNative.StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center'\n  },\n  v2Spacing: {\n    marginLeft: 8\n  },\n  v3Spacing: {\n    marginLeft: 12\n  }\n});","map":{"version":3,"mappings":"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","names":["getAppbarColor","theme","elevation","customBackground","elevated","isV3","isDarkTheme","dark","mode","colors","isAdaptiveMode","overlay","surface","primary","color","mix","rgb","string","DEFAULT_APPBAR_HEIGHT","MD3_DEFAULT_APPBAR_HEIGHT","modeAppbarHeight","small","medium","large","modeTextVariant","renderAppbarContent","children","isDark","shouldCenterContent","renderOnly","renderExcept","React","Children","toArray","filter","child","includes","type","map","i","isValidElement","AppbarContent","AppbarAction","AppbarBackAction","props","undefined","white","black","style","styles","v3Spacing","v2Spacing","centerAlignedContent","cloneElement","StyleSheet","create","alignItems","marginLeft"],"sources":["utils.ts"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport { StyleSheet } from 'react-native';\nimport type { ColorValue, StyleProp, ViewStyle } from 'react-native';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport overlay from '../../styles/overlay';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\nexport type AppbarModes = 'small' | 'medium' | 'large' | 'center-aligned';\n\nexport const getAppbarColor = (\n  theme: Theme,\n  elevation: number,\n  customBackground?: ColorValue,\n  elevated?: boolean\n) => {\n  const { isV3, dark: isDarkTheme, mode, colors } = theme;\n  const isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors?.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return color(colors.surface)\n      .mix(color(colors.primary), 0.08)\n      .rgb()\n      .string();\n  }\n\n  return colors.surface;\n};\n\ntype RenderAppbarContentProps = {\n  children: React.ReactNode;\n  isDark: boolean;\n  shouldCenterContent?: boolean;\n  isV3: boolean;\n  renderOnly?: React.ReactNode[];\n  renderExcept?: React.ReactNode[];\n  mode?: AppbarModes;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\nconst MD3_DEFAULT_APPBAR_HEIGHT = 64;\n\nexport const modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT,\n};\n\nexport const modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge',\n};\n\nexport const renderAppbarContent = ({\n  children,\n  isDark,\n  shouldCenterContent = false,\n  isV3,\n  renderOnly,\n  renderExcept,\n  mode = 'small',\n}: RenderAppbarContentProps) => {\n  return (\n    React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        renderExcept ? !renderExcept.includes(child.type) : child\n      )\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      .filter((child) => (renderOnly ? renderOnly.includes(child.type) : child))\n      .map((child, i) => {\n        if (\n          !React.isValidElement(child) ||\n          ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n            // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n            child.type\n          )\n        ) {\n          return child;\n        }\n\n        const props: {\n          color?: string;\n          style?: StyleProp<ViewStyle>;\n          mode?: AppbarModes;\n        } = {\n          color: isV3\n            ? undefined\n            : typeof child.props.color !== 'undefined'\n            ? child.props.color\n            : isDark\n            ? white\n            : black,\n        };\n\n        if (child.type === AppbarContent) {\n          props.mode = mode;\n          props.style = [\n            isV3\n              ? i === 0 && !shouldCenterContent && styles.v3Spacing\n              : i !== 0 && styles.v2Spacing,\n            shouldCenterContent && styles.centerAlignedContent,\n            child.props.style,\n          ];\n        }\n        return React.cloneElement(child, props);\n      })\n  );\n};\n\nconst styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center',\n  },\n  v2Spacing: {\n    marginLeft: 8,\n  },\n  v3Spacing: {\n    marginLeft: 12,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}