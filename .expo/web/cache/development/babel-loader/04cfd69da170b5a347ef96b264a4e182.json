{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AnimatedText = _interopRequireDefault(require(\"./Typography/AnimatedText\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _excluded = [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar HelperText = function HelperText(_ref) {\n  var _theme$colors;\n\n  var style = _ref.style,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'info' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      onLayout = _ref.onLayout,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 'normal' : _ref$padding,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      shown = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(0),\n      textHeight = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n      maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n  React.useEffect(function () {\n    if (visible) {\n      _reactNative.Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  var handleTextLayout = function handleTextLayout(e) {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  var colors = theme.colors,\n      dark = theme.dark;\n  var textColor = type === 'error' ? colors === null || colors === void 0 ? void 0 : colors.error : (0, _color.default)(theme.isV3 ? theme.colors.onSurface : theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return React.createElement(_AnimatedText.default, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style],\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, rest), rest.children);\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\n\nvar _default = (0, _theming.withTheme)(HelperText);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["HelperText","style","type","visible","theme","onLayout","padding","rest","React","useRef","Animated","Value","shown","current","textHeight","scale","animation","maxFontSizeMultiplier","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","color","isV3","onSurface","_theme$colors","text","alpha","rgb","string","AnimatedText","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","children","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal","withTheme"],"sources":["HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit, Theme } from '../types';\n\nexport type Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  const { maxFontSizeMultiplier = 1.5 } = rest;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors?.error\n      : color(theme.isV3 ? theme.colors.onSurface : theme?.colors?.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"script"}