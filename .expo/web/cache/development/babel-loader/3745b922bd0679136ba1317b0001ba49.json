{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButton = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _IconButton = _interopRequireDefault(require(\"../IconButton\"));\n\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      theme = _ref.theme,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      value = _ref.value,\n      status = _ref.status,\n      _onPress = _ref.onPress,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return React.createElement(_IconButton.default, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ToggleButton);\n\nexports.default = _default;\nvar ToggleButtonWithTheme = (0, _theming.withTheme)(ToggleButton);\nexports.ToggleButton = ToggleButtonWithTheme;","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","rest","borderRadius","theme","context","checked","status","backgroundColor","e","onPress","disabled","selected","styles","borderColor","color","content","width","height","margin","withTheme","ToggleButtonWithTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAWR;EAXS,IAAA,IAAA,GAWT,IAXS,CAAA,IAAA;EAAA,IAAA,IAAA,GAWT,IAXS,CAAA,IAAA;EAAA,IAAA,KAAA,GAWT,IAXS,CAAA,KAAA;EAAA,IAAA,kBAAA,GAWT,IAXS,CAAA,kBAAA;EAAA,IAAA,QAAA,GAWT,IAXS,CAAA,QAAA;EAAA,IAAA,KAAA,GAWT,IAXS,CAAA,KAAA;EAAA,IAAA,KAAA,GAWT,IAXS,CAAA,KAAA;EAAA,IAAA,MAAA,GAWT,IAXS,CAAA,MAAA;EAAA,IAAA,QAAA,GAWT,IAXS,CAAA,OAAA;EAAA,IAUjBC,IAViB,0CAWT,IAXS;EAYpB,IAAMC,YAAY,GAAGC,KAAK,CAA1B,SAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,2CAAA,CAAA,QAAA,EAAA,IAAA,EACIC,UAAAA,OAAD,EAAuE;IACtE,IAAA,eAAA;IAEA,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAAPA,KAAAA,KAAZ,KAACA,IAAuCE,MAAM,KADhD,SAAA;;IAGA,IAAA,OAAA,EAAa;MACXC,eAAe,GAAGJ,KAAK,CAALA,IAAAA,GAAAA,0BAAAA,GAAlBI,oBAAAA;IADF,CAAA,MAIO;MACLA,eAAe,GAAfA,aAAAA;IACD;;IAED,OACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA,QAAA,CAAA;MACE,UAAU,EADZ,KAAA;MAEE,IAAI,EAFN,IAAA;MAGE,OAAO,EAAGC,iBAAAA,CAAD,EAAwC;QAC/C,IAAA,QAAA,EAAa;UACXC,QAAO,CAAPA,CAAO,CAAPA;QACD;;QAED,IAAA,OAAA,EAAa;UACXL,OAAO,CAAPA,aAAAA,CAAsB,CAAA,OAAA,GAAA,KAAA,GAAtBA,IAAAA;QACD;MAVL,CAAA;MAYE,IAAI,EAZN,IAAA;MAaE,kBAAkB,EAbpB,kBAAA;MAcE,kBAAkB,EAAE;QAAEM,QAAF,EAAEA,QAAF;QAAYC,QAAQ,EAAEN;MAAtB,CAdtB;MAeE,QAAQ,EAfV,QAAA;MAgBE,KAAK,EAAE,CACLO,MAAM,CADD,OAAA,EAEL;QACEL,eADF,EACEA,eADF;QAEEL,YAFF,EAEEA,YAFF;QAGEW,WAAW,EAAEC,IAAAA,cAAAA,EAAMX,KAAK,CAALA,IAAAA,GAAAA,aAAAA,GAANW,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAAA,MAAAA;MAHf,CAFK,EAAA,KAAA;IAhBT,CAAA,EADF,IACE,CAAA,CADF;EAhBN,CACE,CADF;AAdF,CAAA;;AAmEA,IAAMF,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BG,OAAO,EAAE;IACPC,KAAK,EADE,EAAA;IAEPC,MAAM,EAFC,EAAA;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlB,CAAf;;eAQeC,IAAAA,kBAAAA,EAAf,YAAeA,C;;;AAGf,IAAMC,qBAAqB,GAAGD,IAAAA,kBAAAA,EAA9B,YAA8BA,CAA9B","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"script"}