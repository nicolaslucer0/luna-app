{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"./ActivityIndicator\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple/TouchableRipple\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Button = function Button(_ref) {\n  var _StyleSheet$flatten;\n\n  var disabled = _ref.disabled,\n      compact = _ref.compact,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n      dark = _ref.dark,\n      loading = _ref.loading,\n      icon = _ref.icon,\n      buttonColor = _ref.color,\n      children = _ref.children,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      accessibilityLabel = _ref.accessibilityLabel,\n      accessibilityHint = _ref.accessibilityHint,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      style = _ref.style,\n      theme = _ref.theme,\n      contentStyle = _ref.contentStyle,\n      labelStyle = _ref.labelStyle,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(disabled || mode !== 'contained' ? 0 : 2)),\n      elevation = _React$useRef.current;\n\n  React.useEffect(function () {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n\n      _reactNative.Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n\n      _reactNative.Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n    borderWidth = _reactNative.StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? _colors.white : _colors.black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (_reactNative.StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n\n  var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},\n      customLabelColor = _ref2.color,\n      customLabelSize = _ref2.fontSize;\n\n  var textStyle = Object.assign({\n    color: textColor\n  }, font);\n  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevation\n    }, buttonStyle, style]\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(_reactNative.View, {\n    style: iconStyle\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Button);\n\nexports.default = _default;","map":{"version":3,"sources":["Button.tsx"],"names":["Button","mode","color","uppercase","rest","current","elevation","React","Animated","disabled","handlePressIn","scale","theme","toValue","duration","useNativeDriver","handlePressOut","roundness","font","backgroundColor","colors","borderColor","borderWidth","StyleSheet","textColor","isDark","rippleColor","buttonStyle","borderRadius","touchableStyle","style","fontSize","customLabelSize","textStyle","iconStyle","styles","compact","testID","icon","loading","button","minWidth","borderStyle","content","flexDirection","alignItems","justifyContent","marginLeft","marginRight","iconReverse","label","textAlign","letterSpacing","marginVertical","marginHorizontal","compactLabel","uppercaseLabel","textTransform","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"script"}