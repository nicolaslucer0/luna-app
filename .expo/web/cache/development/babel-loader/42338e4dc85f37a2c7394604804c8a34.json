{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AppbarContent = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _excluded = [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"style\", \"titleRef\", \"titleStyle\", \"theme\", \"title\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar AppbarContent = function AppbarContent(_ref) {\n  var _ref$color = _ref.color,\n      titleColor = _ref$color === void 0 ? _colors.white : _ref$color,\n      subtitle = _ref.subtitle,\n      subtitleStyle = _ref.subtitleStyle,\n      onPress = _ref.onPress,\n      style = _ref.style,\n      titleRef = _ref.titleRef,\n      titleStyle = _ref.titleStyle,\n      theme = _ref.theme,\n      title = _ref.title,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var fonts = theme.fonts;\n  var subtitleColor = (0, _color.default)(titleColor).alpha(0.7).rgb().string();\n  return React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onPress,\n    disabled: !onPress\n  }, React.createElement(_reactNative.View, _extends({\n    style: [styles.container, style]\n  }, rest), React.createElement(_Text.default, {\n    ref: titleRef,\n    style: [Object.assign({\n      color: titleColor\n    }, _reactNative.Platform.OS === 'ios' ? fonts.regular : fonts.medium), styles.title, titleStyle],\n    numberOfLines: 1,\n    accessible: true,\n    accessibilityTraits: \"header\",\n    accessibilityRole: _reactNative.Platform.OS === 'web' ? 'heading' : 'header'\n  }, title), subtitle ? React.createElement(_Text.default, {\n    style: [styles.subtitle, {\n      color: subtitleColor\n    }, subtitleStyle],\n    numberOfLines: 1\n  }, subtitle) : null));\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 11 : 14\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AppbarContent);\n\nexports.default = _default;\nvar AppbarContentWithTheme = (0, _theming.withTheme)(AppbarContent);\nexports.AppbarContent = AppbarContentWithTheme;","map":{"version":3,"sources":["AppbarContent.tsx"],"names":["AppbarContent","color","titleColor","rest","fonts","subtitleColor","onPress","styles","Platform","subtitle","container","flex","paddingHorizontal","title","fontSize","withTheme","AppbarContentWithTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AASA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAWT;EAXU,iBAWV,IAXU,CACrBC,KADqB;EAAA,IACdC,UADc,2BAAA,aAAA;EAAA,IAAA,QAAA,GAWV,IAXU,CAAA,QAAA;EAAA,IAAA,aAAA,GAWV,IAXU,CAAA,aAAA;EAAA,IAAA,OAAA,GAWV,IAXU,CAAA,OAAA;EAAA,IAAA,KAAA,GAWV,IAXU,CAAA,KAAA;EAAA,IAAA,QAAA,GAWV,IAXU,CAAA,QAAA;EAAA,IAAA,UAAA,GAWV,IAXU,CAAA,UAAA;EAAA,IAAA,KAAA,GAWV,IAXU,CAAA,KAAA;EAAA,IAAA,KAAA,GAWV,IAXU,CAAA,KAAA;EAAA,IAUlBC,IAVkB,0CAWV,IAXU;EAYrB,IAAQC,KAAR,GAAA,KAAA,CAAQA,KAAR;EAEA,IAAMC,aAAa,GAAGJ,IAAAA,cAAAA,EAAAA,UAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAAtB,MAAsBA,EAAtB;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,qCAAA,EAAA;IAA0B,OAAO,EAAjC,OAAA;IAA4C,QAAQ,EAAE,CAACK;EAAvD,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;IAAM,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAA,KAAA;EAAb,CAAA,EAAA,IAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;IACE,GAAG,EADL,QAAA;IAEE,KAAK,EAAE;MAEHN,KAAK,EADP;IADK,GAGCO,qBAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAwBJ,KAAK,CAA7BI,OAAAA,GAAwCJ,KAAK,CAAjD,MAHG,GAKLG,MAAM,CALD,KAAA,EAFT,UAES,CAFT;IAUE,aAAa,EAVf,CAAA;IAWE,UAAU,EAXZ,IAAA;IAYE,mBAAmB,EAZrB,QAAA;IAcE,iBAAiB,EAAEC,qBAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,SAAAA,GAAoC;EAdzD,CAAA,EADF,KACE,CADF,EAmBGC,QAAQ,GACP,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;IACE,KAAK,EAAE,CAACF,MAAM,CAAP,QAAA,EAAkB;MAAEN,KAAK,EAAEI;IAAT,CAAlB,EADT,aACS,CADT;IAEE,aAAa,EAAE;EAFjB,CAAA,EADO,QACP,CADO,GArBf,IAEI,CADF,CADF;AAhBF,CAAA;;AAkDAL,aAAa,CAAbA,WAAAA,GAAAA,gBAAAA;;AAEA,IAAMO,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BG,SAAS,EAAE;IACTC,IAAI,EADK,CAAA;IAETC,iBAAiB,EAAE;EAFV,CADoB;EAK/BC,KAAK,EAAE;IACLC,QAAQ,EAAEN,qBAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,GAA6B;EADlC,CALwB;EAQ/BC,QAAQ,EAAE;IACRK,QAAQ,EAAEN,qBAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,GAA6B;EAD/B;AARqB,CAAlB,CAAf;;eAaeO,IAAAA,kBAAAA,EAAf,aAAeA,C;;;AAGf,IAAMC,sBAAsB,GAAGD,IAAAA,kBAAAA,EAA/B,aAA+BA,CAA/B","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-content.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor = white,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  style,\n  titleRef,\n  titleStyle,\n  theme,\n  title,\n  ...rest\n}: Props) => {\n  const { fonts } = theme;\n\n  const subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n\n  return (\n    <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n      <View style={[styles.container, style]} {...rest}>\n        <Text\n          ref={titleRef}\n          style={[\n            {\n              color: titleColor,\n              ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n            },\n            styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityTraits=\"header\"\n          // @ts-expect-error React Native doesn't accept 'heading' as it's web-only\n          accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n        >\n          {title}\n        </Text>\n        {subtitle ? (\n          <Text\n            style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nconst AppbarContentWithTheme = withTheme(AppbarContent);\n// @component-docs ignore-next-line\nexport { AppbarContentWithTheme as AppbarContent };\n"]},"metadata":{},"sourceType":"script"}