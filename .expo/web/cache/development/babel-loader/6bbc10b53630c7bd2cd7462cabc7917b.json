{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.FAB = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"../ActivityIndicator\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"../CrossFadeIcon\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"animated\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"loading\", \"testID\", \"size\", \"customSize\", \"mode\", \"variant\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar FAB = function FAB(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      accessibilityState = _ref.accessibilityState,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? true : _ref$animated,\n      customColor = _ref.color,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? !theme.isV3 : _ref$uppercase,\n      loading = _ref.loading,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'fab' : _ref$testID,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      customSize = _ref.customSize,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'primary' : _ref$variant,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      visibility = _React$useRef.current;\n\n  var isV3 = theme.isV3,\n      animation = theme.animation;\n  var scale = animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n\n  var _getFABColors = (0, _utils.getFABColors)({\n    theme: theme,\n    variant: variant,\n    disabled: disabled,\n    customColor: customColor,\n    style: style\n  }),\n      backgroundColor = _getFABColors.backgroundColor,\n      foregroundColor = _getFABColors.foregroundColor,\n      rippleColor = _getFABColors.rippleColor;\n\n  var isLargeSize = size === 'large';\n  var isFlatMode = mode === 'flat';\n  var iconSize = isLargeSize ? 36 : 24;\n  var loadingIndicatorSize = isLargeSize ? 24 : 18;\n  var fabStyle = (0, _utils.getFabStyle)({\n    customSize: customSize,\n    size: size,\n    theme: theme\n  });\n  var extendedStyle = (0, _utils.getExtendedFabStyle)({\n    customSize: customSize,\n    theme: theme\n  });\n  var textStyle = Object.assign({\n    color: foregroundColor\n  }, isV3 ? theme.typescale.labelLarge : theme.fonts.medium);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$borderRadius = _ref2.borderRadius,\n      borderRadius = _ref2$borderRadius === void 0 ? fabStyle.borderRadius : _ref2$borderRadius;\n\n  var md3Elevation = isFlatMode || disabled ? 0 : 3;\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [{\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor,\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }]\n    }, styles.container, !isV3 && styles.elevated, !isV3 && disabled && styles.disabled, style],\n    pointerEvents: visible ? 'auto' : 'none',\n    testID: testID + \"-container\"\n  }, isV3 && {\n    elevation: md3Elevation\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: Object.assign({}, accessibilityState, {\n      disabled: disabled\n    }),\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, label ? extendedStyle : fabStyle],\n    testID: testID + \"-content\",\n    pointerEvents: \"none\"\n  }, icon && loading !== true ? React.createElement(IconComponent, {\n    source: icon,\n    size: customSize ? customSize / 2 : iconSize,\n    color: foregroundColor\n  }) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: customSize ? customSize / 2 : loadingIndicatorSize,\n    color: foregroundColor\n  }) : null, label ? React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    selectable: false,\n    style: [styles.label, uppercase && styles.uppercaseLabel, textStyle]\n  }, label) : null)));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  elevated: {\n    elevation: 6\n  },\n  container: {\n    overflow: 'hidden'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(FAB);\n\nexports.default = _default;\nvar FABWithTheme = (0, _theming.withTheme)(FAB);\nexports.FAB = FABWithTheme;","map":{"version":3,"sources":["FAB.tsx"],"names":["FAB","accessibilityLabel","animated","color","visible","uppercase","theme","testID","size","mode","variant","rest","current","visibility","React","Animated","animation","scale","toValue","duration","useNativeDriver","IconComponent","rippleColor","getFABColors","disabled","customColor","style","isLargeSize","isFlatMode","iconSize","loadingIndicatorSize","fabStyle","getFabStyle","customSize","extendedStyle","getExtendedFabStyle","textStyle","isV3","borderRadius","StyleSheet","md3Elevation","backgroundColor","opacity","transform","styles","elevation","label","loading","foregroundColor","elevated","container","overflow","content","flexDirection","alignItems","justifyContent","marginHorizontal","uppercaseLabel","textTransform","withTheme","FABWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { getExtendedFabStyle, getFABColors, getFabStyle } from './utils';\nimport type { $RemoveChildren, Theme } from '../../types';\n\ntype FABSize = 'small' | 'medium' | 'large';\n\ntype FABMode = 'flat' | 'elevated';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  @deprecated Deprecated in v.3x - use prop size=\"small\".\n   *\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Size of the `FAB`.\n   * - `small` - FAB with small height (40).\n   * - `medium` - FAB with default medium height (56).\n   * - `large` - FAB with large height (96).\n   */\n  size?: FABSize;\n  /**\n   * @supported Available in v5.x\n   *\n   * Custom size for the `FAB`. This prop takes precedence over size prop\n   */\n  customSize?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the `FAB`. You can change the mode to adjust the the shadow:\n   * - `flat` - button without a shadow.\n   * - `elevated` - button with a shadow.\n   */\n  mode?: FABMode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Color mappings variant for combinations of container and icon colors.\n   */\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'surface';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/fab-1.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-2.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-3.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-4.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     icon=\"plus\"\n *     style={styles.fab}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = !theme.isV3,\n  loading,\n  testID = 'fab',\n  size = 'medium',\n  customSize,\n  mode = 'elevated',\n  variant = 'primary',\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { isV3, animation } = theme;\n  const { scale } = animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const { backgroundColor, foregroundColor, rippleColor } = getFABColors({\n    theme,\n    variant,\n    disabled,\n    customColor,\n    style,\n  });\n\n  const isLargeSize = size === 'large';\n  const isFlatMode = mode === 'flat';\n  const iconSize = isLargeSize ? 36 : 24;\n  const loadingIndicatorSize = isLargeSize ? 24 : 18;\n\n  const fabStyle = getFabStyle({ customSize, size, theme });\n  const extendedStyle = getExtendedFabStyle({ customSize, theme });\n  const textStyle = {\n    color: foregroundColor,\n    ...(isV3 ? theme.typescale.labelLarge : theme.fonts.medium),\n  };\n\n  const { borderRadius = fabStyle.borderRadius } = (StyleSheet.flatten(style) ||\n    {}) as ViewStyle;\n\n  const md3Elevation = isFlatMode || disabled ? 0 : 3;\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            borderRadius,\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          !isV3 && styles.elevated,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n      testID={`${testID}-container`}\n      {...(isV3 && { elevation: md3Elevation })}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, label ? extendedStyle : fabStyle]}\n          testID={`${testID}-content`}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent\n              source={icon}\n              size={customSize ? customSize / 2 : iconSize}\n              color={foregroundColor}\n            />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customSize ? customSize / 2 : loadingIndicatorSize}\n              color={foregroundColor}\n            />\n          ) : null}\n          {label ? (\n            <Text\n              variant=\"labelLarge\"\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  elevated: {\n    elevation: 6,\n  },\n  container: {\n    overflow: 'hidden',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]},"metadata":{},"sourceType":"script"}