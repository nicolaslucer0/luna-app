{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CheckboxAndroid = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"status\", \"theme\", \"disabled\", \"onPress\", \"testID\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ANIMATION_DURATION = 100;\n\nvar CheckboxAndroid = function CheckboxAndroid(_ref) {\n  var status = _ref.status,\n      theme = _ref.theme,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      testID = _ref.testID,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(1)),\n      scaleAnim = _React$useRef.current;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    var checked = status === 'checked';\n\n    _reactNative.Animated.sequence([_reactNative.Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), _reactNative.Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n\n  var _getAndroidSelectionC = (0, _utils.getAndroidSelectionControlColor)({\n    theme: theme,\n    disabled: disabled,\n    checked: checked,\n    customColor: rest.color,\n    customUncheckedColor: rest.uncheckedColor\n  }),\n      rippleColor = _getAndroidSelectionC.rippleColor,\n      selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n\n  var borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(_reactNative.Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, React.createElement(_MaterialCommunityIcon.default, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: selectionControlColor,\n    direction: \"ltr\"\n  }), React.createElement(_reactNative.View, {\n    style: [_reactNative.StyleSheet.absoluteFill, styles.fillContainer]\n  }, React.createElement(_reactNative.Animated.View, {\n    style: [styles.fill, {\n      borderColor: selectionControlColor\n    }, {\n      borderWidth: borderWidth\n    }]\n  }))));\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\n\nvar _default = (0, _theming.withTheme)(CheckboxAndroid);\n\nexports.default = _default;\nvar CheckboxAndroidWithTheme = (0, _theming.withTheme)(CheckboxAndroid);\nexports.CheckboxAndroid = CheckboxAndroidWithTheme;","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","rest","current","scaleAnim","React","Animated","isFirstRendering","animation","scale","checked","status","toValue","duration","useNativeDriver","indeterminate","selectionControlColor","getAndroidSelectionControlColor","theme","disabled","customColor","customUncheckedColor","uncheckedColor","borderWidth","inputRange","outputRange","icon","styles","testID","transform","StyleSheet","borderColor","container","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill","withTheme","CheckboxAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getAndroidSelectionControlColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { rippleColor, selectionControlColor } =\n    getAndroidSelectionControlColor({\n      theme,\n      disabled,\n      checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor,\n    });\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={selectionControlColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: selectionControlColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"script"}