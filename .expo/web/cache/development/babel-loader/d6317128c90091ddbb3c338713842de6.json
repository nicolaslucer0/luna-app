{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChipColors = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar getBorderColor = function getBorderColor(_ref) {\n  var theme = _ref.theme,\n      isOutlined = _ref.isOutlined,\n      disabled = _ref.disabled,\n      selectedColor = _ref.selectedColor,\n      backgroundColor = _ref.backgroundColor;\n  var isSelectedColor = selectedColor !== undefined;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n\n    if (isSelectedColor) {\n      return (0, _color.default)(selectedColor).alpha(0.29).rgb().string();\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (isOutlined) {\n    if (isSelectedColor) {\n      return (0, _color.default)(selectedColor).alpha(0.29).rgb().string();\n    }\n\n    if (theme.dark) {\n      return (0, _color.default)(_colors.white).alpha(0.29).rgb().string();\n    }\n\n    return (0, _color.default)(_colors.black).alpha(0.29).rgb().string();\n  }\n\n  return backgroundColor;\n};\n\nvar getTextColor = function getTextColor(_ref2) {\n  var theme = _ref2.theme,\n      isOutlined = _ref2.isOutlined,\n      disabled = _ref2.disabled,\n      selectedColor = _ref2.selectedColor;\n  var isSelectedColor = selectedColor !== undefined;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n\n    return theme.colors.onSecondaryContainer;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  if (isSelectedColor) {\n    return (0, _color.default)(selectedColor).alpha(0.87).rgb().string();\n  }\n\n  return (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n};\n\nvar getDefaultBackgroundColor = function getDefaultBackgroundColor(_ref3) {\n  var theme = _ref3.theme,\n      isOutlined = _ref3.isOutlined;\n\n  if (theme.isV3) {\n    if (isOutlined) {\n      return theme.colors.surface;\n    }\n\n    return theme.colors.secondaryContainer;\n  }\n\n  if (isOutlined) {\n    var _theme$colors;\n\n    return (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.surface;\n  }\n\n  if (theme.dark) {\n    return '#383838';\n  }\n\n  return '#ebebeb';\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref4) {\n  var theme = _ref4.theme,\n      isOutlined = _ref4.isOutlined,\n      disabled = _ref4.disabled,\n      customBackgroundColor = _ref4.customBackgroundColor;\n\n  if (typeof customBackgroundColor === 'string') {\n    return customBackgroundColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isOutlined) {\n        return 'transparent';\n      }\n\n      return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n  }\n\n  return getDefaultBackgroundColor({\n    theme: theme,\n    isOutlined: isOutlined\n  });\n};\n\nvar getSelectedBackgroundColor = function getSelectedBackgroundColor(_ref5) {\n  var theme = _ref5.theme,\n      isOutlined = _ref5.isOutlined,\n      disabled = _ref5.disabled,\n      customBackgroundColor = _ref5.customBackgroundColor,\n      showSelectedOverlay = _ref5.showSelectedOverlay;\n  var backgroundColor = getBackgroundColor({\n    theme: theme,\n    disabled: disabled,\n    isOutlined: isOutlined,\n    customBackgroundColor: customBackgroundColor\n  });\n\n  if (theme.isV3) {\n    if (isOutlined) {\n      if (showSelectedOverlay) {\n        return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSurfaceVariant), 0.12).rgb().string();\n      }\n\n      return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSurfaceVariant), 0).rgb().string();\n    }\n\n    if (showSelectedOverlay) {\n      return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0.12).rgb().string();\n    }\n\n    return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0).rgb().string();\n  }\n\n  if (theme.dark) {\n    if (isOutlined) {\n      return (0, _color.default)(backgroundColor).lighten(0.2).rgb().string();\n    }\n\n    return (0, _color.default)(backgroundColor).lighten(0.4).rgb().string();\n  }\n\n  if (isOutlined) {\n    return (0, _color.default)(backgroundColor).darken(0.08).rgb().string();\n  }\n\n  return (0, _color.default)(backgroundColor).darken(0.2).rgb().string();\n};\n\nvar getIconColor = function getIconColor(_ref6) {\n  var theme = _ref6.theme,\n      isOutlined = _ref6.isOutlined,\n      disabled = _ref6.disabled,\n      selectedColor = _ref6.selectedColor;\n  var isSelectedColor = selectedColor !== undefined;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n\n    return theme.colors.onSecondaryContainer;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  if (isSelectedColor) {\n    return (0, _color.default)(selectedColor).alpha(0.54).rgb().string();\n  }\n\n  return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n};\n\nvar getUnderlayColor = function getUnderlayColor(_ref7) {\n  var theme = _ref7.theme,\n      isOutlined = _ref7.isOutlined,\n      disabled = _ref7.disabled,\n      selectedColor = _ref7.selectedColor,\n      selectedBackgroundColor = _ref7.selectedBackgroundColor;\n  var isSelectedColor = selectedColor !== undefined;\n  var textColor = getTextColor({\n    theme: theme,\n    disabled: disabled,\n    selectedColor: selectedColor,\n    isOutlined: isOutlined\n  });\n\n  if (theme.isV3) {\n    if (isSelectedColor) {\n      return (0, _color.default)(selectedColor).alpha(0.12).rgb().string();\n    }\n\n    return (0, _color.default)(textColor).alpha(0.12).rgb().string();\n  }\n\n  if (isSelectedColor) {\n    return (0, _color.default)(selectedColor).fade(0.5).rgb().string();\n  }\n\n  return selectedBackgroundColor;\n};\n\nvar getChipColors = function getChipColors(_ref8) {\n  var isOutlined = _ref8.isOutlined,\n      theme = _ref8.theme,\n      selectedColor = _ref8.selectedColor,\n      showSelectedOverlay = _ref8.showSelectedOverlay,\n      customBackgroundColor = _ref8.customBackgroundColor,\n      disabled = _ref8.disabled;\n  var baseChipColorProps = {\n    theme: theme,\n    isOutlined: isOutlined,\n    disabled: disabled\n  };\n  var backgroundColor = getBackgroundColor(Object.assign({}, baseChipColorProps, {\n    customBackgroundColor: customBackgroundColor\n  }));\n  var selectedBackgroundColor = getSelectedBackgroundColor(Object.assign({}, baseChipColorProps, {\n    customBackgroundColor: customBackgroundColor,\n    showSelectedOverlay: showSelectedOverlay\n  }));\n  return {\n    borderColor: getBorderColor(Object.assign({}, baseChipColorProps, {\n      selectedColor: selectedColor,\n      backgroundColor: backgroundColor\n    })),\n    textColor: getTextColor(Object.assign({}, baseChipColorProps, {\n      selectedColor: selectedColor\n    })),\n    iconColor: getIconColor(Object.assign({}, baseChipColorProps, {\n      selectedColor: selectedColor\n    })),\n    underlayColor: getUnderlayColor(Object.assign({}, baseChipColorProps, {\n      selectedColor: selectedColor,\n      selectedBackgroundColor: selectedBackgroundColor\n    })),\n    backgroundColor: backgroundColor,\n    selectedBackgroundColor: selectedBackgroundColor\n  };\n};\n\nexports.getChipColors = getChipColors;","map":{"version":3,"sources":["helpers.tsx"],"names":["getBorderColor","backgroundColor","isSelectedColor","selectedColor","theme","color","getTextColor","getDefaultBackgroundColor","isOutlined","getBackgroundColor","customBackgroundColor","getSelectedBackgroundColor","showSelectedOverlay","disabled","getIconColor","getUnderlayColor","selectedBackgroundColor","textColor","getChipColors","baseChipColorProps","borderColor","iconColor","underlayColor"],"mappings":"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","sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { ColorValue } from 'react-native';\n\ntype BaseProps = {\n  theme: Theme;\n  isOutlined: boolean;\n  disabled?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n  backgroundColor,\n}: BaseProps & { backgroundColor: string; selectedColor?: string }) => {\n  const isSelectedColor = selectedColor !== undefined;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return color(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.29).rgb().string();\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (isOutlined) {\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.29).rgb().string();\n    }\n\n    if (theme.dark) {\n      return color(white).alpha(0.29).rgb().string();\n    }\n\n    return color(black).alpha(0.29).rgb().string();\n  }\n\n  return backgroundColor;\n};\n\nconst getTextColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n}: BaseProps & {\n  selectedColor?: string;\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n\n    return theme.colors.onSecondaryContainer;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  if (isSelectedColor) {\n    return color(selectedColor).alpha(0.87).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.87).rgb().string();\n};\n\nconst getDefaultBackgroundColor = ({\n  theme,\n  isOutlined,\n}: Omit<BaseProps, 'disabled' | 'selectedColor'>) => {\n  if (theme.isV3) {\n    if (isOutlined) {\n      return theme.colors.surface;\n    }\n\n    return theme.colors.secondaryContainer;\n  }\n\n  if (isOutlined) {\n    return theme.colors?.surface;\n  }\n\n  if (theme.dark) {\n    return '#383838';\n  }\n\n  return '#ebebeb';\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  customBackgroundColor,\n}: BaseProps & {\n  customBackgroundColor?: ColorValue;\n}) => {\n  if (typeof customBackgroundColor === 'string') {\n    return customBackgroundColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isOutlined) {\n        return 'transparent';\n      }\n      return color(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n  }\n\n  return getDefaultBackgroundColor({ theme, isOutlined });\n};\n\nconst getSelectedBackgroundColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  customBackgroundColor,\n  showSelectedOverlay,\n}: BaseProps & {\n  customBackgroundColor?: ColorValue;\n  showSelectedOverlay?: boolean;\n}) => {\n  const backgroundColor = getBackgroundColor({\n    theme,\n    disabled,\n    isOutlined,\n    customBackgroundColor,\n  });\n\n  if (theme.isV3) {\n    if (isOutlined) {\n      if (showSelectedOverlay) {\n        return color(backgroundColor)\n          .mix(color(theme.colors.onSurfaceVariant), 0.12)\n          .rgb()\n          .string();\n      }\n      return color(backgroundColor)\n        .mix(color(theme.colors.onSurfaceVariant), 0)\n        .rgb()\n        .string();\n    }\n\n    if (showSelectedOverlay) {\n      return color(backgroundColor)\n        .mix(color(theme.colors.onSecondaryContainer), 0.12)\n        .rgb()\n        .string();\n    }\n\n    return color(backgroundColor)\n      .mix(color(theme.colors.onSecondaryContainer), 0)\n      .rgb()\n      .string();\n  }\n\n  if (theme.dark) {\n    if (isOutlined) {\n      return color(backgroundColor).lighten(0.2).rgb().string();\n    }\n    return color(backgroundColor).lighten(0.4).rgb().string();\n  }\n\n  if (isOutlined) {\n    return color(backgroundColor).darken(0.08).rgb().string();\n  }\n\n  return color(backgroundColor).darken(0.2).rgb().string();\n};\n\nconst getIconColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n}: BaseProps & {\n  selectedColor?: string;\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n\n    return theme.colors.onSecondaryContainer;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  if (isSelectedColor) {\n    return color(selectedColor).alpha(0.54).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.54).rgb().string();\n};\n\nconst getUnderlayColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n  selectedBackgroundColor,\n}: BaseProps & { selectedBackgroundColor: string; selectedColor?: string }) => {\n  const isSelectedColor = selectedColor !== undefined;\n  const textColor = getTextColor({\n    theme,\n    disabled,\n    selectedColor,\n    isOutlined,\n  });\n\n  if (theme.isV3) {\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.12).rgb().string();\n    }\n\n    return color(textColor).alpha(0.12).rgb().string();\n  }\n\n  if (isSelectedColor) {\n    return color(selectedColor).fade(0.5).rgb().string();\n  }\n\n  return selectedBackgroundColor;\n};\n\nexport const getChipColors = ({\n  isOutlined,\n  theme,\n  selectedColor,\n  showSelectedOverlay,\n  customBackgroundColor,\n  disabled,\n}: BaseProps & {\n  customBackgroundColor?: ColorValue;\n  disabled?: boolean;\n  showSelectedOverlay?: boolean;\n  selectedColor?: string;\n}) => {\n  const baseChipColorProps = { theme, isOutlined, disabled };\n\n  const backgroundColor = getBackgroundColor({\n    ...baseChipColorProps,\n    customBackgroundColor,\n  });\n\n  const selectedBackgroundColor = getSelectedBackgroundColor({\n    ...baseChipColorProps,\n    customBackgroundColor,\n    showSelectedOverlay,\n  });\n\n  return {\n    borderColor: getBorderColor({\n      ...baseChipColorProps,\n      selectedColor,\n      backgroundColor,\n    }),\n    textColor: getTextColor({\n      ...baseChipColorProps,\n      selectedColor,\n    }),\n    iconColor: getIconColor({\n      ...baseChipColorProps,\n      selectedColor,\n    }),\n    underlayColor: getUnderlayColor({\n      ...baseChipColorProps,\n      selectedColor,\n      selectedBackgroundColor,\n    }),\n    backgroundColor,\n    selectedBackgroundColor,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}