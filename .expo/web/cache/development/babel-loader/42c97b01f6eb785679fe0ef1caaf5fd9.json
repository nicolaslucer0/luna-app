{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getButtonColors = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar isDark = function isDark(_ref) {\n  var dark = _ref.dark,\n      backgroundColor = _ref.backgroundColor;\n\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !(0, _color.default)(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nvar getButtonBackgroundColor = function getButtonBackgroundColor(_ref2) {\n  var isMode = _ref2.isMode,\n      theme = _ref2.theme,\n      disabled = _ref2.disabled,\n      customButtonColor = _ref2.customButtonColor;\n\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nvar getButtonTextColor = function getButtonTextColor(_ref3) {\n  var isMode = _ref3.isMode,\n      theme = _ref3.theme,\n      disabled = _ref3.disabled,\n      customTextColor = _ref3.customTextColor,\n      backgroundColor = _ref3.backgroundColor,\n      dark = _ref3.dark;\n\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {\n        return isDark({\n          dark: dark,\n          backgroundColor: backgroundColor\n        }) ? _colors.white : _colors.black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({\n      dark: dark,\n      backgroundColor: backgroundColor\n    }) ? _colors.white : _colors.black;\n  }\n\n  return theme.colors.primary;\n};\n\nvar getButtonBorderColor = function getButtonBorderColor(_ref4) {\n  var isMode = _ref4.isMode,\n      disabled = _ref4.disabled,\n      theme = _ref4.theme;\n\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n  }\n\n  return 'transparent';\n};\n\nvar getButtonBorderWidth = function getButtonBorderWidth(_ref5) {\n  var isMode = _ref5.isMode,\n      theme = _ref5.theme;\n\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return _reactNative.StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nvar getButtonColors = function getButtonColors(_ref6) {\n  var theme = _ref6.theme,\n      mode = _ref6.mode,\n      customButtonColor = _ref6.customButtonColor,\n      customTextColor = _ref6.customTextColor,\n      disabled = _ref6.disabled,\n      dark = _ref6.dark;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var backgroundColor = getButtonBackgroundColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customButtonColor: customButtonColor\n  });\n  var textColor = getButtonTextColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customTextColor: customTextColor,\n    backgroundColor: backgroundColor,\n    dark: dark\n  });\n  var borderColor = getButtonBorderColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getButtonBorderWidth({\n    isMode: isMode,\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};\n\nexports.getButtonColors = getButtonColors;","map":{"version":3,"mappings":"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","names":["isDark","dark","backgroundColor","color","isLight","getButtonBackgroundColor","isMode","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","white","black","alpha","rgb","string","getButtonTextColor","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","outline","getButtonBorderWidth","StyleSheet","hairlineWidth","getButtonColors","mode","modeToCompare","textColor","borderColor","borderWidth"],"sources":["utils.tsx"],"sourcesContent":["import { StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: Theme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: Theme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}