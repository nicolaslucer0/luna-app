{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar MenuItem = function MenuItem(_ref) {\n  var icon = _ref.icon,\n      title = _ref.title,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      style = _ref.style,\n      contentStyle = _ref.contentStyle,\n      testID = _ref.testID,\n      titleStyle = _ref.titleStyle,\n      accessibilityLabel = _ref.accessibilityLabel,\n      theme = _ref.theme;\n  var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  var titleColor = disabled ? disabledColor : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? disabledColor : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(_TouchableRipple.default, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"menuitem\",\n    accessibilityState: {\n      disabled: disabled\n    }\n  }, React.createElement(_reactNative.View, {\n    style: styles.row\n  }, icon ? React.createElement(_reactNative.View, {\n    style: [styles.item, styles.icon],\n    pointerEvents: \"box-none\"\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: 24,\n    color: iconColor\n  })) : null, React.createElement(_reactNative.View, {\n    style: [styles.item, styles.content, icon ? styles.widthWithIcon : null, contentStyle],\n    pointerEvents: \"none\"\n  }, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.title, {\n      color: titleColor\n    }, titleStyle]\n  }, title))));\n};\n\nMenuItem.displayName = 'Menu.Item';\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\n\nvar _default = (0, _theming.withTheme)(MenuItem);\n\nexports.default = _default;","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","theme","disabledColor","color","titleColor","disabled","iconColor","styles","row","icon","minWidth","maxWidth","iconWidth","container","paddingHorizontal","height","justifyContent","flexDirection","width","title","fontSize","item","marginHorizontal","content","widthWithIcon","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n  theme,\n}: Props) => {\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]},"metadata":{},"sourceType":"script"}