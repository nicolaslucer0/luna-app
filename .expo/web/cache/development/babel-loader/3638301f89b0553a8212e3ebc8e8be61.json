{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureObjects = void 0;\n\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime/helpers/construct\"));\n\nvar _flingGesture = require(\"./flingGesture\");\n\nvar _forceTouchGesture = require(\"./forceTouchGesture\");\n\nvar _gestureComposition = require(\"./gestureComposition\");\n\nvar _longPressGesture = require(\"./longPressGesture\");\n\nvar _panGesture = require(\"./panGesture\");\n\nvar _pinchGesture = require(\"./pinchGesture\");\n\nvar _rotationGesture = require(\"./rotationGesture\");\n\nvar _tapGesture = require(\"./tapGesture\");\n\nvar _nativeGesture = require(\"./nativeGesture\");\n\nvar _manualGesture = require(\"./manualGesture\");\n\nvar GestureObjects = {\n  Tap: function Tap() {\n    return new _tapGesture.TapGesture();\n  },\n  Pan: function Pan() {\n    return new _panGesture.PanGesture();\n  },\n  Pinch: function Pinch() {\n    return new _pinchGesture.PinchGesture();\n  },\n  Rotation: function Rotation() {\n    return new _rotationGesture.RotationGesture();\n  },\n  Fling: function Fling() {\n    return new _flingGesture.FlingGesture();\n  },\n  LongPress: function LongPress() {\n    return new _longPressGesture.LongPressGesture();\n  },\n  ForceTouch: function ForceTouch() {\n    return new _forceTouchGesture.ForceTouchGesture();\n  },\n  Native: function Native() {\n    return new _nativeGesture.NativeGesture();\n  },\n  Manual: function Manual() {\n    return new _manualGesture.ManualGesture();\n  },\n  Race: function Race() {\n    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n      gestures[_key] = arguments[_key];\n    }\n\n    return (0, _construct2.default)(_gestureComposition.ComposedGesture, gestures);\n  },\n  Simultaneous: function Simultaneous() {\n    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      gestures[_key2] = arguments[_key2];\n    }\n\n    return (0, _construct2.default)(_gestureComposition.SimultaneousGesture, gestures);\n  },\n  Exclusive: function Exclusive() {\n    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      gestures[_key3] = arguments[_key3];\n    }\n\n    return (0, _construct2.default)(_gestureComposition.ExclusiveGesture, gestures);\n  }\n};\nexports.GestureObjects = GestureObjects;","map":{"version":3,"sources":["gestureObjects.ts"],"names":["GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Race","Simultaneous","Exclusive"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,cAAc,GAAG;EAC5BC,GAAG,EAAE,eAAM;IACT,OAAO,IAAP,sBAAO,EAAP;EAF0B,CAAA;EAK5BC,GAAG,EAAE,eAAM;IACT,OAAO,IAAP,sBAAO,EAAP;EAN0B,CAAA;EAS5BC,KAAK,EAAE,iBAAM;IACX,OAAO,IAAP,0BAAO,EAAP;EAV0B,CAAA;EAa5BC,QAAQ,EAAE,oBAAM;IACd,OAAO,IAAP,gCAAO,EAAP;EAd0B,CAAA;EAiB5BC,KAAK,EAAE,iBAAM;IACX,OAAO,IAAP,0BAAO,EAAP;EAlB0B,CAAA;EAqB5BC,SAAS,EAAE,qBAAM;IACf,OAAO,IAAP,kCAAO,EAAP;EAtB0B,CAAA;EAyB5BC,UAAU,EAAE,sBAAM;IAChB,OAAO,IAAP,oCAAO,EAAP;EA1B0B,CAAA;EA6B5BC,MAAM,EAAE,kBAAM;IACZ,OAAO,IAAP,4BAAO,EAAP;EA9B0B,CAAA;EAiC5BC,MAAM,EAAE,kBAAM;IACZ,OAAO,IAAP,4BAAO,EAAP;EAlC0B,CAAA;EAyC5BC,IAAI,EAAE,gBAA4B;IAAA,kCAA5B,QAA4B;MAA5B,QAA4B;IAAA;;IAChC,gCAAO,mCAAP,EAAA,QAAA;EA1C0B,CAAA;EAgD5BC,YAhD4B,0BAgDS;IAAA,mCAAzB,QAAyB;MAAzB,QAAyB;IAAA;;IACnC,gCAAO,uCAAP,EAAA,QAAA;EAjD0B,CAAA;EA2D5BC,SA3D4B,uBA2DM;IAAA,mCAAzB,QAAyB;MAAzB,QAAyB;IAAA;;IAChC,gCAAO,oCAAP,EAAA,QAAA;EACD;AA7D2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}