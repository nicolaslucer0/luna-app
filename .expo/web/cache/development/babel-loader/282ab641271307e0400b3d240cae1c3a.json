{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"../CrossFadeIcon\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"theme\", \"style\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar PADDING = 8;\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customIconColor = _ref.iconColor,\n      customContainerColor = _ref.containerColor,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      mode = _ref.mode,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n\n  var _getIconButtonColor = (0, _utils.getIconButtonColor)({\n    theme: theme,\n    disabled: disabled,\n    selected: selected,\n    mode: mode,\n    customIconColor: customIconColor,\n    customContainerColor: customContainerColor\n  }),\n      iconColor = _getIconButtonColor.iconColor,\n      rippleColor = _getIconButtonColor.rippleColor,\n      backgroundColor = _getIconButtonColor.backgroundColor,\n      borderColor = _getIconButtonColor.borderColor;\n\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor: borderColor\n  };\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(_TouchableRipple.default, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: styles.touchable,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: _TouchableRipple.default.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\n\nvar _default = (0, _theming.withTheme)(IconButton);\n\nexports.default = _default;","map":{"version":3,"sources":["IconButton.tsx"],"names":["PADDING","IconButton","iconColor","containerColor","size","selected","animated","rest","isV3","IconComponent","borderColor","getIconButtonColor","theme","disabled","mode","customIconColor","customContainerColor","buttonSize","borderStyles","borderWidth","borderRadius","backgroundColor","width","height","styles","elevation","top","left","bottom","right","container","overflow","margin","touchable","flexGrow","justifyContent","alignItems","opacity","withTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAb,CAAA;;AAkGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAcN;EAdO,IAAA,IAAA,GAcP,IAdO,CAAA,IAAA;EAAA,IAAA,eAAA,GAcP,IAdO,CAElBC,SAFkB;EAAA,IAAA,oBAAA,GAcP,IAdO,CAGlBC,cAHkB;EAAA,gBAcP,IAdO,CAIlBC,IAJkB;EAAA,IAIlBA,IAJkB,0BAAA,EAAA;EAAA,IAAA,kBAAA,GAcP,IAdO,CAAA,kBAAA;EAAA,IAAA,QAAA,GAcP,IAdO,CAAA,QAAA;EAAA,IAAA,OAAA,GAcP,IAdO,CAAA,OAAA;EAAA,oBAcP,IAdO,CAQlBC,QARkB;EAAA,IAQlBA,QARkB,8BAAA,KAAA;EAAA,oBAcP,IAdO,CASlBC,QATkB;EAAA,IASlBA,QATkB,8BAAA,KAAA;EAAA,IAAA,IAAA,GAcP,IAdO,CAAA,IAAA;EAAA,IAAA,KAAA,GAcP,IAdO,CAAA,KAAA;EAAA,IAAA,KAAA,GAcP,IAdO,CAAA,KAAA;EAAA,IAafC,IAbe,0CAcP,IAdO;EAelB,IAAQC,IAAR,GAAA,KAAA,CAAQA,IAAR;EACA,IAAMC,aAAa,GAAGH,QAAQ,GAAA,sBAAA,GAA9B,aAAA;;EAEA,0BACEK,IAAAA,yBAAAA,EAAmB;IACjBC,KADiB,EACjBA,KADiB;IAEjBC,QAFiB,EAEjBA,QAFiB;IAGjBR,QAHiB,EAGjBA,QAHiB;IAIjBS,IAJiB,EAIjBA,IAJiB;IAKjBC,eALiB,EAKjBA,eALiB;IAMjBC,oBAAAA,EAAAA;EANiB,CAAnBL,CADF;EAAA,IAAM,SAAN,uBAAM,SAAN;EAAA,IAAM,WAAN,uBAAM,WAAN;EAAA,IAAM,eAAN,uBAAM,eAAN;EAAA,IAAiDD,WAAjD,uBAAiDA,WAAjD;;EAUA,IAAMO,UAAU,GAAGT,IAAI,GAAGJ,IAAI,GAAG,IAAV,OAAA,GAAwBA,IAAI,GAAnD,GAAA;EAEA,IAAMc,YAAY,GAAG;IACnBC,WAAW,EAAEX,IAAI,IAAIM,IAAI,KAAZN,UAAAA,IAA+B,CAA/BA,QAAAA,GAAAA,CAAAA,GADM,CAAA;IAEnBY,YAAY,EAAEH,UAAU,GAFL,CAAA;IAGnBP,WAAAA,EAAAA;EAHmB,CAArB;EAMA,OACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA;IACE,KAAK,EACH,CACE;MACEW,eADF,EACEA,eADF;MAEEC,KAAK,EAFP,UAAA;MAGEC,MAAM,EAAEN;IAHV,CADF,EAMEO,MAAM,CANR,SAAA,EAAA,YAAA,EAQE,CAAA,IAAA,IAAA,QAAA,IAAqBA,MAAM,CAR7B,QAAA,EAAA,KAAA;EAFJ,CAAA,EAcOhB,IAAI,IAAI;IAAEiB,SAAS,EAAE;EAAb,CAdf,CAAA,EAgBE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA;IACE,UAAU,EADZ,IAAA;IAEE,QAAQ,EAFV,IAAA;IAGE,OAAO,EAHT,OAAA;IAIE,WAAW,EAJb,WAAA;IAKE,kBAAkB,EALpB,kBAAA;IAME,KAAK,EAAED,MAAM,CANf,SAAA;IAQE,mBAAmB,EAAEX,QAAQ,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAR/B,QAAA;IASE,0BAA0B,EAT5B,QAAA;IAUE,iBAAiB,EAVnB,QAAA;IAWE,kBAAkB,EAAE;MAAEA,QAAAA,EAAAA;IAAF,CAXtB;IAYE,QAAQ,EAZV,QAAA;IAaE,OAAO,EACL,wBAAA,CAAA,SAAA,GACI;MAAEa,GAAG,EAAL,EAAA;MAAWC,IAAI,EAAf,EAAA;MAAqBC,MAAM,EAA3B,EAAA;MAAiCC,KAAK,EAAE;IAAxC,CADJ,GAEI;MAAEH,GAAG,EAAL,CAAA;MAAUC,IAAI,EAAd,CAAA;MAAmBC,MAAM,EAAzB,CAAA;MAA8BC,KAAK,EAAE;IAArC;EAhBR,CAAA,EAAA,IAAA,CAAA,EAoBE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;IAAe,KAAK,EAApB,SAAA;IAAiC,MAAM,EAAvC,IAAA;IAA+C,IAAI,EAAEzB;EAArD,CAAA,CApBF,CAhBF,CADF;AApCF,CAAA;;AA+EA,IAAMoB,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BM,SAAS,EAAE;IACTC,QAAQ,EADC,QAAA;IAETC,MAAM,EAFG,CAAA;IAGTP,SAAS,EAAE;EAHF,CADoB;EAM/BQ,SAAS,EAAE;IACTC,QAAQ,EADC,CAAA;IAETC,cAAc,EAFL,QAAA;IAGTC,UAAU,EAAE;EAHH,CANoB;EAW/BvB,QAAQ,EAAE;IACRwB,OAAO,EAAE;EADD;AAXqB,CAAlB,CAAf;;eAgBeC,IAAAA,kBAAAA,EAAf,UAAeA,C","sourcesContent":["import * as React from 'react';\nimport {\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from '../Icon';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getIconButtonColor } from './utils';\nimport Surface from '../Surface';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  iconColor: customIconColor,\n  containerColor: customContainerColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  selected = false,\n  animated = false,\n  mode,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const { iconColor, rippleColor, backgroundColor, borderColor } =\n    getIconButtonColor({\n      theme,\n      disabled,\n      selected,\n      mode,\n      customIconColor,\n      customContainerColor,\n    });\n\n  const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n  const borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor,\n  };\n\n  return (\n    <Surface\n      style={\n        [\n          {\n            backgroundColor,\n            width: buttonSize,\n            height: buttonSize,\n          },\n          styles.container,\n          borderStyles,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(isV3 && { elevation: 0 })}\n    >\n      <TouchableRipple\n        borderless\n        centered\n        onPress={onPress}\n        rippleColor={rippleColor}\n        accessibilityLabel={accessibilityLabel}\n        style={styles.touchable}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        disabled={disabled}\n        hitSlop={\n          TouchableRipple.supported\n            ? { top: 10, left: 10, bottom: 10, right: 10 }\n            : { top: 6, left: 6, bottom: 6, right: 6 }\n        }\n        {...rest}\n      >\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"script"}