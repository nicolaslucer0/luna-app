{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AppbarAction = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar _IconButton = _interopRequireDefault(require(\"../IconButton/IconButton\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _excluded = [\"size\", \"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\", \"isLeading\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar AppbarAction = function AppbarAction(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      iconColor = _ref.color,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      isLeading = _ref.isLeading,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useTheme)();\n  var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : (0, _color.default)(_colors.black).alpha(0.54).rgb().string();\n  return React.createElement(_IconButton.default, _extends({\n    size: size,\n    onPress: onPress,\n    iconColor: actionIconColor,\n    icon: icon,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    animated: true\n  }, rest));\n};\n\nexports.AppbarAction = AppbarAction;\nAppbarAction.displayName = 'Appbar.Action';\nvar _default = AppbarAction;\nexports.default = _default;","map":{"version":3,"sources":["AppbarAction.tsx"],"names":["AppbarAction","size","color","rest","theme","actionIconColor","iconColor","isLeading"],"mappings":";;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EASR;EATS,gBAST,IATS,CACpBC,IADoB;EAAA,IACpBA,IADoB,0BAAA,EAAA;EAAA,IAAA,SAAA,GAST,IATS,CAEpBC,KAFoB;EAAA,IAAA,IAAA,GAST,IATS,CAAA,IAAA;EAAA,IAAA,QAAA,GAST,IATS,CAAA,QAAA;EAAA,IAAA,OAAA,GAST,IATS,CAAA,OAAA;EAAA,IAAA,kBAAA,GAST,IATS,CAAA,kBAAA;EAAA,IAAA,SAAA,GAST,IATS,CAAA,SAAA;EAAA,IAQjBC,IARiB,0CAST,IATS;EAUpB,IAAMC,KAAK,GAAX,IAAA,iBAAA,GAAA;EAEA,IAAMC,eAAe,GAAGC,SAAS,GAAA,SAAA,GAE7BF,KAAK,CAALA,IAAAA,GACAG,SAAS,GACPH,KAAK,CAALA,MAAAA,CADO,SAAA,GAEPA,KAAK,CAALA,MAAAA,CAHFA,gBAAAA,GAIAF,IAAAA,cAAAA,EAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GANJ,MAMIA,EANJ;EAQA,OACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA,QAAA,CAAA;IACE,IAAI,EADN,IAAA;IAEE,OAAO,EAFT,OAAA;IAGE,SAAS,EAHX,eAAA;IAIE,IAAI,EAJN,IAAA;IAKE,QAAQ,EALV,QAAA;IAME,kBAAkB,EANpB,kBAAA;IAOE,QAAQ,EAAA;EAPV,CAAA,EADF,IACE,CAAA,CADF;AApBF,CAAA;;;AAkCAF,YAAY,CAAZA,WAAAA,GAAAA,eAAAA;eAEA,Y","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport type {\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport { black } from '../../styles/themes/v2/colors';\nimport IconButton from '../IconButton/IconButton';\nimport type { IconSource } from '../Icon';\nimport { useTheme } from '../../core/theming';\n\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Whether it's the leading button.\n   */\n  isLeading?: boolean;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar-action-android.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = ({\n  size = 24,\n  color: iconColor,\n  icon,\n  disabled,\n  onPress,\n  accessibilityLabel,\n  isLeading,\n  ...rest\n}: Props) => {\n  const theme = useTheme();\n\n  const actionIconColor = iconColor\n    ? iconColor\n    : theme.isV3\n    ? isLeading\n      ? theme.colors.onSurface\n      : theme.colors.onSurfaceVariant\n    : color(black).alpha(0.54).rgb().string();\n\n  return (\n    <IconButton\n      size={size}\n      onPress={onPress}\n      iconColor={actionIconColor}\n      icon={icon}\n      disabled={disabled}\n      accessibilityLabel={accessibilityLabel}\n      animated\n      {...rest}\n    />\n  );\n};\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"]},"metadata":{},"sourceType":"script"}