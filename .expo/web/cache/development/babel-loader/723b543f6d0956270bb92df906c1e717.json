{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"showSelectedOverlay\", \"ellipsizeMode\", \"compact\", \"elevated\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n      children = _ref.children,\n      icon = _ref.icon,\n      avatar = _ref.avatar,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n      closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      onClose = _ref.onClose,\n      closeIcon = _ref.closeIcon,\n      textStyle = _ref.textStyle,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      selectedColor = _ref.selectedColor,\n      _ref$showSelectedOver = _ref.showSelectedOverlay,\n      showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n      ellipsizeMode = _ref.ellipsizeMode,\n      compact = _ref.compact,\n      _ref$elevated = _ref.elevated,\n      elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isV3 = theme.isV3;\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(isV3 && elevated ? 1 : 0)),\n      elevation = _React$useRef.current;\n\n  var isOutlined = mode === 'outlined';\n\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n\n    _reactNative.Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n\n    _reactNative.Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = isV3 ? 8 : 16;\n  var iconSize = isV3 ? 18 : 16;\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      customBackgroundColor = _ref2.backgroundColor,\n      _ref2$borderRadius = _ref2.borderRadius,\n      borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n\n  var _getChipColors = (0, _helpers.getChipColors)({\n    isOutlined: isOutlined,\n    theme: theme,\n    selectedColor: selectedColor,\n    showSelectedOverlay: showSelectedOverlay,\n    customBackgroundColor: customBackgroundColor,\n    disabled: disabled\n  }),\n      borderColor = _getChipColors.borderColor,\n      textColor = _getChipColors.textColor,\n      iconColor = _getChipColors.iconColor,\n      underlayColor = _getChipColors.underlayColor,\n      selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n      backgroundColor = _getChipColors.backgroundColor;\n\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || _reactNative.Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  return React.createElement(_Surface.default, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(_reactNative.View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(_reactNative.View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    color: avatar ? _colors.white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"check\",\n    color: avatar ? _colors.white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.text, Object.assign({\n      color: textColor\n    }, !isV3 && Object.assign({}, theme.fonts.regular)), labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(_reactNative.View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(_Icon.default, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: _reactNative.Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Chip);\n\nexports.default = _default;","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","mode","selected","disabled","closeIconAccessibilityLabel","showSelectedOverlay","elevated","rest","isV3","current","elevation","React","Animated","isOutlined","handlePressIn","scale","theme","toValue","duration","useNativeDriver","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","borderRadius","StyleSheet","getChipColors","selectedColor","customBackgroundColor","accessibilityState","elevationStyle","Platform","multiplier","compact","labelSpacings","marginRight","onClose","marginLeft","avatar","contentSpacings","paddingRight","styles","borderColor","testID","style","icon","color","regular","ellipsizeMode","closeButtonStyle","closeIcon","container","borderWidth","borderStyle","flexDirection","default","web","md3OutlineContainer","md3FlatContainer","content","alignItems","paddingLeft","position","flexGrow","md3Content","padding","alignSelf","md3Icon","md3CloseIcon","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","md3AvatarWrapper","md3SelectedIcon","avatarSelected","top","left","right","justifyContent","touchable","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { EllipsizeProp, Theme } from '../../types';\nimport { getChipColors } from './helpers';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          isV3 &&\n            (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n          !theme.isV3 && {\n            elevation: elevationStyle,\n          },\n          {\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                color: textColor,\n                ...(!isV3 && {\n                  ...theme.fonts.regular,\n                }),\n              },\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"script"}