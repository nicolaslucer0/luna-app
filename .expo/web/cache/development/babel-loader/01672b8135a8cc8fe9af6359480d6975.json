{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _CardContent = _interopRequireDefault(require(\"./CardContent\"));\n\nvar _CardActions = _interopRequireDefault(require(\"./CardActions\"));\n\nvar _CardCover = _interopRequireDefault(require(\"./CardCover\"));\n\nvar _CardTitle = _interopRequireDefault(require(\"./CardTitle\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      _ref$mode = _ref.mode,\n      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return cardMode === modeToCompare;\n  }, [cardMode]);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(cardElevation)),\n      elevationDarkAdaptive = _React$useRef2.current;\n\n  var animation = theme.animation,\n      dark = theme.dark,\n      mode = theme.mode,\n      roundness = theme.roundness,\n      isV3 = theme.isV3;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n\n    if (dark && isAdaptiveMode) {\n      _reactNative.Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      _reactNative.Animated.timing(elevation, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  var _getCardColors = (0, _utils.getCardColors)({\n    theme: theme,\n    mode: cardMode\n  }),\n      backgroundColor = _getCardColors.backgroundColor,\n      borderColor = _getCardColors.borderColor;\n\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      borderRadius: roundness\n    }, isV3 && {\n      backgroundColor: backgroundColor\n    }, !isV3 && isMode('outlined') ? styles.resetElevation : {\n      elevation: computedElevation\n    }, style],\n    theme: theme\n  }, isV3 && {\n    elevation: isMode('elevated') ? computedElevation : 0\n  }, rest), isMode('outlined') && React.createElement(_reactNative.View, {\n    pointerEvents: \"none\",\n    style: [{\n      borderRadius: roundness,\n      borderColor: borderColor\n    }, styles.outline]\n  }), React.createElement(_reactNative.TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(_reactNative.View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = _CardContent.default;\nCard.Actions = _CardActions.default;\nCard.Cover = _CardCover.default;\nCard.Title = _CardTitle.default;\n\nvar styles = _reactNative.StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2\n  },\n  resetElevation: {\n    elevation: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Card);\n\nexports.default = _default;","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","mode","cardMode","rest","isMode","modeToCompare","current","React","Animated","elevationDarkAdaptive","isV3","prevDarkRef","prevDark","isAdaptiveMode","animationDuration","animation","dark","runElevationAnimation","pressType","isPressTypeIn","toValue","duration","useNativeDriver","handlePressIn","handlePressOut","total","siblings","child","computedElevation","borderColor","getCardColors","theme","borderRadius","roundness","backgroundColor","styles","onPress","accessible","innerContainer","index","flexGrow","flexShrink","outline","borderWidth","position","width","height","zIndex","resetElevation","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getCardColors } from './utils';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype ContainedCardProps = {\n  mode?: 'contained';\n  elevation?: never;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Mode = 'elevated' | 'outlined' | 'contained';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Changes Card shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `contained` - Card with without outline and elevation @supported Available in v5.x with theme version 3\n   * - `outlined` - Card with an outline.\n   */\n  mode?: Mode;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/card-1.png\" />\n *     <figcaption>Elevated card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-2.png\" />\n *     <figcaption>Outlined card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-3.png\" />\n *     <figcaption>Contained card</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps | ContainedCardProps) & Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: Mode) => {\n      return cardMode === modeToCompare;\n    },\n    [cardMode]\n  );\n\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness, isV3 } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  const { backgroundColor, borderColor } = getCardColors({\n    theme,\n    mode: cardMode,\n  });\n\n  return (\n    <Surface\n      style={[\n        {\n          borderRadius: roundness,\n        },\n        isV3 && { backgroundColor },\n        !isV3 && isMode('outlined')\n          ? styles.resetElevation\n          : {\n              elevation: computedElevation as unknown as number,\n            },\n        style,\n      ]}\n      theme={theme}\n      {...(isV3 && {\n        elevation: isMode('elevated') ? computedElevation : 0,\n      })}\n      {...rest}\n    >\n      {isMode('outlined') && (\n        <View\n          pointerEvents=\"none\"\n          style={[\n            {\n              borderRadius: roundness,\n              borderColor,\n            },\n            styles.outline,\n          ]}\n        />\n      )}\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  },\n  resetElevation: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"script"}