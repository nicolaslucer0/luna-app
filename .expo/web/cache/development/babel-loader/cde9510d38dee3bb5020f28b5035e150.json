{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CardTitle = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _Caption = _interopRequireDefault(require(\"../Typography/v2/Caption\"));\n\nvar _Title = _interopRequireDefault(require(\"../Typography/v2/Title\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _excluded = [\"component\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar LEFT_SIZE = 40;\n\nvar CardTitle = function CardTitle(_ref) {\n  var title = _ref.title,\n      titleStyle = _ref.titleStyle,\n      _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n      _ref$titleVariant = _ref.titleVariant,\n      titleVariant = _ref$titleVariant === void 0 ? 'bodyLarge' : _ref$titleVariant,\n      subtitle = _ref.subtitle,\n      subtitleStyle = _ref.subtitleStyle,\n      _ref$subtitleNumberOf = _ref.subtitleNumberOfLines,\n      subtitleNumberOfLines = _ref$subtitleNumberOf === void 0 ? 1 : _ref$subtitleNumberOf,\n      _ref$subtitleVariant = _ref.subtitleVariant,\n      subtitleVariant = _ref$subtitleVariant === void 0 ? 'bodyMedium' : _ref$subtitleVariant,\n      left = _ref.left,\n      leftStyle = _ref.leftStyle,\n      right = _ref.right,\n      rightStyle = _ref.rightStyle,\n      style = _ref.style,\n      theme = _ref.theme;\n\n  var titleComponent = function titleComponent(props) {\n    return theme.isV3 ? React.createElement(_Text.default, props) : React.createElement(_Title.default, props);\n  };\n\n  var subtitleComponent = function subtitleComponent(props) {\n    return theme.isV3 ? React.createElement(_Text.default, props) : React.createElement(_Caption.default, props);\n  };\n\n  var TextComponent = React.memo(function (_ref2) {\n    var component = _ref2.component,\n        rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n    return React.createElement(component, rest);\n  });\n  return React.createElement(_reactNative.View, {\n    style: [styles.container, {\n      minHeight: subtitle || left || right ? 72 : 50\n    }, style]\n  }, left ? React.createElement(_reactNative.View, {\n    style: [styles.left, leftStyle]\n  }, left({\n    size: LEFT_SIZE\n  })) : null, React.createElement(_reactNative.View, {\n    style: [styles.titles]\n  }, title && React.createElement(TextComponent, {\n    component: titleComponent,\n    style: [styles.title, {\n      marginBottom: subtitle ? 0 : 2\n    }, titleStyle],\n    numberOfLines: titleNumberOfLines,\n    variant: titleVariant\n  }, title), subtitle && React.createElement(TextComponent, {\n    component: subtitleComponent,\n    style: [styles.subtitle, subtitleStyle],\n    numberOfLines: subtitleNumberOfLines,\n    variant: subtitleVariant\n  }, subtitle)), React.createElement(_reactNative.View, {\n    style: rightStyle\n  }, right ? right({\n    size: 24\n  }) : null));\n};\n\nexports.CardTitle = CardTitle;\nCardTitle.displayName = 'Card.Title';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16\n  },\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE\n  },\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  title: {\n    minHeight: 30,\n    paddingRight: 16\n  },\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n    paddingRight: 16\n  }\n});\n\nvar _default = (0, _theming.withTheme)(CardTitle);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["LEFT_SIZE","CardTitle","title","titleStyle","titleNumberOfLines","titleVariant","subtitle","subtitleStyle","subtitleNumberOfLines","subtitleVariant","left","leftStyle","right","rightStyle","style","theme","titleComponent","props","isV3","React","Text","Title","subtitleComponent","Caption","TextComponent","memo","component","rest","createElement","View","styles","container","minHeight","size","titles","marginBottom","numberOfLines","variant","displayName","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingLeft","marginRight","height","width","flex","paddingRight","marginVertical","withTheme"],"sources":["CardTitle.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport type { MD3TypescaleKey, Theme } from '../../types';\nimport Caption from '../Typography/v2/Caption';\nimport Title from '../Typography/v2/Title';\nimport Text from '../Typography/Text';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Text for the title. Note that this will only accept a string or `<Text>`-based node.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the title.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Title text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  titleVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * Text for the subtitle. Note that this will only accept a string or `<Text>`-based node.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the subtitle.\n   */\n  subtitleNumberOfLines?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Subtitle text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  subtitleVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the left element wrapper.\n   */\n  leftStyle?: StyleProp<ViewStyle>;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the right element wrapper.\n   */\n  rightStyle?: StyleProp<ViewStyle>;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst LEFT_SIZE = 40;\n\n/**\n * A component to show a title, subtitle and an avatar inside a Card.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/card-title-1.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Card, IconButton } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card.Title\n *     title=\"Card Title\"\n *     subtitle=\"Card Subtitle\"\n *     left={(props) => <Avatar.Icon {...props} icon=\"folder\" />}\n *     right={(props) => <IconButton {...props} icon=\"more-vert\" onPress={() => {}} />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardTitle = ({\n  title,\n  titleStyle,\n  titleNumberOfLines = 1,\n  titleVariant = 'bodyLarge',\n  subtitle,\n  subtitleStyle,\n  subtitleNumberOfLines = 1,\n  subtitleVariant = 'bodyMedium',\n  left,\n  leftStyle,\n  right,\n  rightStyle,\n  style,\n  theme,\n}: Props) => {\n  const titleComponent = (props: any) =>\n    theme.isV3 ? <Text {...props} /> : <Title {...props} />;\n\n  const subtitleComponent = (props: any) =>\n    theme.isV3 ? <Text {...props} /> : <Caption {...props} />;\n\n  const TextComponent = React.memo(({ component, ...rest }: any) =>\n    React.createElement(component, rest)\n  );\n  return (\n    <View\n      style={[\n        styles.container,\n        { minHeight: subtitle || left || right ? 72 : 50 },\n        style,\n      ]}\n    >\n      {left ? (\n        <View style={[styles.left, leftStyle]}>\n          {left({\n            size: LEFT_SIZE,\n          })}\n        </View>\n      ) : null}\n\n      <View style={[styles.titles]}>\n        {title && (\n          <TextComponent\n            component={titleComponent}\n            style={[\n              styles.title,\n              { marginBottom: subtitle ? 0 : 2 },\n              titleStyle,\n            ]}\n            numberOfLines={titleNumberOfLines}\n            variant={titleVariant}\n          >\n            {title}\n          </TextComponent>\n        )}\n        {subtitle && (\n          <TextComponent\n            component={subtitleComponent}\n            style={[styles.subtitle, subtitleStyle]}\n            numberOfLines={subtitleNumberOfLines}\n            variant={subtitleVariant}\n          >\n            {subtitle}\n          </TextComponent>\n        )}\n      </View>\n      <View style={rightStyle}>{right ? right({ size: 24 }) : null}</View>\n    </View>\n  );\n};\n\nCardTitle.displayName = 'Card.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16,\n  },\n\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE,\n  },\n\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  title: {\n    minHeight: 30,\n    paddingRight: 16,\n  },\n\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n    paddingRight: 16,\n  },\n});\n\nexport default withTheme(CardTitle);\n\n// @component-docs ignore-next-line\nexport { CardTitle };\n"]},"metadata":{},"sourceType":"script"}