{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar DialogScrollArea = function DialogScrollArea(props) {\n  var theme = (0, _theming.useTheme)();\n  var borderStyles = {\n    borderColor: theme.isV3 ? theme.colors.surfaceVariant : 'rgba(0, 0, 0, .12)',\n    borderTopWidth: theme.isV3 ? 1 : _reactNative.StyleSheet.hairlineWidth,\n    borderBottomWidth: theme.isV3 ? 1 : _reactNative.StyleSheet.hairlineWidth\n  };\n  return React.createElement(_reactNative.View, _extends({}, props, {\n    style: [styles.container, borderStyles, theme.isV3 && styles.v3Container, props.style]\n  }), props.children);\n};\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  v3Container: {\n    marginBottom: 24\n  }\n});\n\nvar _default = DialogScrollArea;\nexports.default = _default;","map":{"version":3,"sources":["DialogScrollArea.tsx"],"names":["DialogScrollArea","props","theme","borderStyles","borderColor","borderTopWidth","StyleSheet","borderBottomWidth","hairlineWidth","styles","container","paddingHorizontal","flexGrow","flexShrink","v3Container","marginBottom"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAMA,gBAAgB,GAAIC,SAApBD,gBAAoBC,CAAAA,KAAD,EAAkB;EACzC,IAAMC,KAAK,GAAX,IAAA,iBAAA,GAAA;EACA,IAAMC,YAAY,GAAG;IACnBC,WAAW,EAAEF,KAAK,CAALA,IAAAA,GACTA,KAAK,CAALA,MAAAA,CADSA,cAAAA,GADM,oBAAA;IAInBG,cAAc,EAAEH,KAAK,CAALA,IAAAA,GAAAA,CAAAA,GAAiBI,uBAAAA,CAJd,aAAA;IAKnBC,iBAAiB,EAAEL,KAAK,CAALA,IAAAA,GAAAA,CAAAA,GAAiBI,uBAAAA,CAAWE;EAL5B,CAArB;EAOA,OACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;IAEE,KAAK,EAAE,CACLC,MAAM,CADD,SAAA,EAAA,YAAA,EAGLP,KAAK,CAALA,IAAAA,IAAcO,MAAM,CAHf,WAAA,EAILR,KAAK,CAJA,KAAA;EAFT,CAAA,CAAA,EASGA,KAAK,CAVV,QACE,CADF;AATF,CAAA;;AAwBAD,gBAAgB,CAAhBA,WAAAA,GAAAA,mBAAAA;;AAEA,IAAMS,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,iBAAiB,EADR,EAAA;IAETC,QAAQ,EAFC,CAAA;IAGTC,UAAU,EAAE;EAHH,CADoB;EAM/BC,WAAW,EAAE;IACXC,YAAY,EAAE;EADH;AANkB,CAAlB,CAAf;;eAWA,gB","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport { useTheme } from '../../core/theming';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/dialog-scroll-area.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.ScrollArea>\n *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>\n *             <Text>This is a scrollable area</Text>\n *           </ScrollView>\n *         </Dialog.ScrollArea>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogScrollArea = (props: Props) => {\n  const theme = useTheme();\n  const borderStyles = {\n    borderColor: theme.isV3\n      ? theme.colors.surfaceVariant\n      : 'rgba(0, 0, 0, .12)',\n    borderTopWidth: theme.isV3 ? 1 : StyleSheet.hairlineWidth,\n    borderBottomWidth: theme.isV3 ? 1 : StyleSheet.hairlineWidth,\n  };\n  return (\n    <View\n      {...props}\n      style={[\n        styles.container,\n        borderStyles,\n        theme.isV3 && styles.v3Container,\n        props.style,\n      ]}\n    >\n      {props.children}\n    </View>\n  );\n};\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  v3Container: {\n    marginBottom: 24,\n  },\n});\n\nexport default DialogScrollArea;\n"]},"metadata":{},"sourceType":"script"}