{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _Badge = _interopRequireDefault(require(\"../Badge\"));\n\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"badge\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar badgeSize = 8;\nvar iconSize = 24;\nvar itemSize = 56;\nvar outlineHeight = 32;\n\nvar DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$badge = _ref.badge,\n      badge = _ref$badge === void 0 ? false : _ref$badge,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isV3 = theme.isV3;\n  var scale = theme.animation.scale;\n\n  var _React$useState = React.useState(1),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      numOfLines = _React$useState2[0],\n      setNumOfLines = _React$useState2[1];\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(active ? 1 : 0.5)),\n      animScale = _React$useRef.current;\n\n  React.useEffect(function () {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  var handlePressOut = function handlePressOut() {\n    _reactNative.Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';\n  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;\n  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;\n\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  var androidLetterSpacingStyle = _reactNative.Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n  return React.createElement(_reactNative.View, rest, React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onPress,\n    onPressOut: onPress ? handlePressOut : undefined,\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: styles.wrapper\n  }, React.createElement(_reactNative.Animated.View, {\n    style: [styles.outline, !label && styles.roundedOutline, {\n      transform: [label ? {\n        scaleX: animScale\n      } : {\n        scale: animScale\n      }],\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(_reactNative.View, {\n    style: [styles.icon, {\n      top: iconPadding\n    }]\n  }, badge && React.createElement(_reactNative.View, {\n    style: styles.badgeContainer\n  }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {\n    visible: badge,\n    size: badgeSize\n  }) : React.createElement(_Badge.default, {\n    visible: badge != null,\n    size: 2 * badgeSize\n  }, badge)), React.createElement(_Icon.default, {\n    source: icon,\n    size: iconSize,\n    color: iconColor\n  })), label ? React.createElement(_Text.default, {\n    variant: \"labelMedium\",\n    selectable: false,\n    numberOfLines: 2,\n    onTextLayout: onTextLayout,\n    style: [styles.label, androidLetterSpacingStyle, {\n      color: labelColor\n    }]\n  }, label) : null)));\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nvar styles = _reactNative.StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center'\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  roundedOutline: {\n    height: itemSize\n  },\n  icon: {\n    position: 'absolute'\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch'\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center'\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2\n  }\n});\n\nvar _default = (0, _theming.withTheme)(DrawerCollapsedItem);\n\nexports.default = _default;","map":{"version":3,"sources":["DrawerCollapsedItem.tsx"],"names":["badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","badge","rest","isV3","scale","theme","React","current","animScale","Animated","active","handlePressOut","toValue","duration","useNativeDriver","iconPadding","backgroundColor","labelColor","iconColor","onTextLayout","nativeEvent","setNumOfLines","androidLetterSpacingStyle","Platform","numOfLines","styles","onPress","selected","accessibilityLabel","wrapper","transform","label","scaleX","top","badgeContainer","color","width","marginBottom","minHeight","alignItems","outline","height","borderRadius","justifyContent","roundedOutline","icon","position","letterSpacing","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  Animated,\n  TouchableWithoutFeedback,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n  Platform,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport Badge from '../Badge';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Icon to display for the `DrawerCollapsedItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      icon=\"inbox\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  return (\n    <View {...rest}>\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n          />\n\n          <View style={[styles.icon, { top: iconPadding }]}>\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[\n                styles.label,\n                androidLetterSpacingStyle,\n                {\n                  color: labelColor,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withTheme(DrawerCollapsedItem);\n"]},"metadata":{},"sourceType":"script"}