{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useDrawerStatus;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _DrawerStatusContext = _interopRequireDefault(require(\"./DrawerStatusContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useDrawerStatus() {\n  var drawerStatus = React.useContext(_DrawerStatusContext.default);\n\n  if (drawerStatus === undefined) {\n    throw new Error(\"Couldn't find a drawer. Is your component inside a drawer navigator?\");\n  }\n\n  return drawerStatus;\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA;;;;;;AAMe,SAASA,eAAT,GAAyC;EACtD,IAAMC,YAAY,GAAGC,KAAK,CAACC,UAAND,CAAiBE,4BAAjBF,CAArB;;EAEA,IAAID,YAAY,KAAKI,SAArB,EAAgC;IAC9B,MAAM,IAAIC,KAAJ,CACJ,sEADI,CAAN;EAGD;;EAED,OAAOL,YAAP;AACD","names":["useDrawerStatus","drawerStatus","React","useContext","DrawerStatusContext","undefined","Error"],"sources":["useDrawerStatus.tsx"],"sourcesContent":["import type { DrawerStatus } from '@react-navigation/native';\nimport * as React from 'react';\n\nimport DrawerStatusContext from './DrawerStatusContext';\n\n/**\n * Hook to detect if the drawer's status in a parent navigator.\n * Returns 'open' if the drawer is open, 'closed' if the drawer is closed.\n */\nexport default function useDrawerStatus(): DrawerStatus {\n  const drawerStatus = React.useContext(DrawerStatusContext);\n\n  if (drawerStatus === undefined) {\n    throw new Error(\n      \"Couldn't find a drawer. Is your component inside a drawer navigator?\"\n    );\n  }\n\n  return drawerStatus;\n}\n"]},"metadata":{},"sourceType":"script"}