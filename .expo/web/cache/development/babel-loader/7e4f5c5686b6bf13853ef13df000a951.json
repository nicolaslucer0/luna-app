{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSegmentedButtonDensityPadding = exports.getSegmentedButtonColors = exports.getSegmentedButtonBorderRadius = exports.getDisabledSegmentedButtonStyle = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar DEFAULT_PADDING = 9;\n\nvar getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {\n  var density = _ref.density;\n  var padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n\n    case 'medium':\n      return padding - 4;\n\n    case 'high':\n      return padding - 8;\n\n    default:\n      return padding;\n  }\n};\n\nexports.getSegmentedButtonDensityPadding = getSegmentedButtonDensityPadding;\n\nvar getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {\n  var _buttons$index, _buttons;\n\n  var theme = _ref2.theme,\n      index = _ref2.index,\n      buttons = _ref2.buttons;\n  var width = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n\n  return {};\n};\n\nexports.getDisabledSegmentedButtonStyle = getDisabledSegmentedButtonStyle;\n\nvar getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {\n  var segment = _ref3.segment,\n      theme = _ref3.theme;\n\n  if (segment === 'first') {\n    return Object.assign({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return Object.assign({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  }\n};\n\nexports.getSegmentedButtonBorderRadius = getSegmentedButtonBorderRadius;\n\nvar getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {\n  var checked = _ref4.checked,\n      theme = _ref4.theme;\n\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n\n  return 'transparent';\n};\n\nvar getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {\n  var theme = _ref5.theme,\n      disabled = _ref5.disabled,\n      checked = _ref5.checked;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n};\n\nvar getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {\n  var theme = _ref6.theme;\n\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return _reactNative.StyleSheet.hairlineWidth;\n};\n\nvar getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {\n  var theme = _ref7.theme,\n      disabled = _ref7.disabled;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n\n    return theme.colors.primary;\n  }\n};\n\nvar getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {\n  var theme = _ref8.theme,\n      disabled = _ref8.disabled,\n      checked = _ref8.checked;\n  var backgroundColor = getSegmentedButtonBackgroundColor({\n    theme: theme,\n    checked: checked\n  });\n  var borderColor = getSegmentedButtonBorderColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked\n  });\n  var textColor = getSegmentedButtonTextColor({\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};\n\nexports.getSegmentedButtonColors = getSegmentedButtonColors;","map":{"version":3,"sources":["utils.ts"],"names":["DEFAULT_PADDING","getSegmentedButtonDensityPadding","density","padding","getDisabledSegmentedButtonStyle","buttons","width","getSegmentedButtonBorderWidth","theme","isDisabled","isNextDisabled","index","borderRightWidth","getSegmentedButtonBorderRadius","segment","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","color","getSegmentedButtonBorderColor","checked","StyleSheet","getSegmentedButtonTextColor","disabled","getSegmentedButtonColors","backgroundColor","borderColor","textColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\nimport color from 'color';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\ntype BaseProps = {\n  theme: Theme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: Theme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: Theme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n}: Omit<BaseProps, 'checked'>) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({ theme, disabled });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"]},"metadata":{},"sourceType":"script"}