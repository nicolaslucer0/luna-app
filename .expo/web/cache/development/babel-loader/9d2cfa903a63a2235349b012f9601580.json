{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ForceTouchGesture = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _gesture = require(\"./gesture\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force\n    };\n  }\n\n  return Object.assign({}, current, changePayload);\n}\n\nvar ForceTouchGesture = function (_ContinousBaseGesture) {\n  (0, _inherits2.default)(ForceTouchGesture, _ContinousBaseGesture);\n\n  var _super = _createSuper(ForceTouchGesture);\n\n  function ForceTouchGesture() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ForceTouchGesture);\n    _this = _super.call(this);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", {});\n\n    _this.handlerName = 'ForceTouchGestureHandler';\n    return _this;\n  }\n\n  (0, _createClass2.default)(ForceTouchGesture, [{\n    key: \"minForce\",\n    value: function minForce(force) {\n      this.config.minForce = force;\n      return this;\n    }\n  }, {\n    key: \"maxForce\",\n    value: function maxForce(force) {\n      this.config.maxForce = force;\n      return this;\n    }\n  }, {\n    key: \"feedbackOnActivation\",\n    value: function feedbackOnActivation(value) {\n      this.config.feedbackOnActivation = value;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ForceTouchGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n  return ForceTouchGesture;\n}(_gesture.ContinousBaseGesture);\n\nexports.ForceTouchGesture = ForceTouchGesture;","map":{"version":3,"sources":["forceTouchGesture.ts"],"names":["previous","changePayload","forceChange","current","force","constructor","minForce","maxForce","feedbackOnActivation","onChange"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAWA,SAAA,qBAAA,CAAA,OAAA,EAAA,QAAA,EAGE;EACA;;EACA,IAAA,aAAA;;EACA,IAAIA,QAAQ,KAAZ,SAAA,EAA4B;IAC1BC,aAAa,GAAG;MACdC,WAAW,EAAEC,OAAO,CAACC;IADP,CAAhBH;EADF,CAAA,MAIO;IACLA,aAAa,GAAG;MACdC,WAAW,EAAEC,OAAO,CAAPA,KAAAA,GAAgBH,QAAQ,CAACI;IADxB,CAAhBH;EAGD;;EAED,yBAAO,OAAP,EAAwBA,aAAxB;AACD;;IAEM,iB;;;;;EAMLI,6BAAc;IAAA;;IAAA;IACZ;;IADY,eAAA,8CAAA,QAAA,EAF+C,EAE/C,CAAA;;IAGZ,MAAA,WAAA,GAAA,0BAAA;IAHY;EAIb;;;;WAEDC,kBAAQ,KAARA,EAAwB;MACtB,KAAA,MAAA,CAAA,QAAA,GAAA,KAAA;MACA,OAAA,IAAA;IACD;;;WAEDC,kBAAQ,KAARA,EAAwB;MACtB,KAAA,MAAA,CAAA,QAAA,GAAA,KAAA;MACA,OAAA,IAAA;IACD;;;WAEDC,8BAAoB,KAApBA,EAAqC;MACnC,KAAA,MAAA,CAAA,oBAAA,GAAA,KAAA;MACA,OAAA,IAAA;IACD;;;WAEDC,kBAAQ,QAARA,EASE;MAEA,KAAA,QAAA,CAAA,qBAAA,GAAA,qBAAA;MACA,mHAAA,QAAA;IACD;;;EAxCI,6B","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  ForceTouchGestureConfig,\n  ForceTouchGestureHandlerEventPayload,\n} from '../ForceTouchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"]},"metadata":{},"sourceType":"script"}