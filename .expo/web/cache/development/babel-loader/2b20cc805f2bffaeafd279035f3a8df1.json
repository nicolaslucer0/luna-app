{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar _utils = require(\"../../utils\");\n\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;\nvar setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;\nvar GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","REANIMATED_AVAILABLE","setGestureState","Reanimated","GestureStateManager","create","begin","State","console","activate","fail","end"],"mappings":";;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAGC,IAAAA,iBAAAA,EAAvB,kFAAuBA,CAAvB;AAMA,IAAMC,oBAAoB,GAAG,CAAA,6BAAA,KAAA,IAAA,IAAA,6BAAA,KAAU,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,6BAAA,CAAA,cAAA,MAA7B,SAAA;AACA,IAAMC,eAAe,GAAA,6BAAA,KAAA,IAAA,IAAA,6BAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGC,6BAAAA,CAAxB,eAAA;AAEO,IAAMC,mBAAmB,GAAG;EACjCC,MADiC,kBAC3B,UAD2B,EACmB;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAA,oBAAA,EAA0B;UACxBJ,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,KAAe,CAAfA;QADF,CAAA,MAEO;UACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MAPE,CAAA;MAULC,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAA,oBAAA,EAA0B;UACxBP,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,MAAe,CAAfA;QADF,CAAA,MAEO;UACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MAhBE,CAAA;MAmBLE,IAAI,EAAE,gBAAM;QACV;;QACA,IAAA,oBAAA,EAA0B;UACxBR,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,MAAe,CAAfA;QADF,CAAA,MAEO;UACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MAzBE,CAAA;MA4BLG,GAAG,EAAE,eAAM;QACT;;QACA,IAAA,oBAAA,EAA0B;UACxBT,eAAe,CAAA,UAAA,EAAaK,YAAAA,CAA5BL,GAAe,CAAfA;QADF,CAAA,MAEO;UACLM,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}