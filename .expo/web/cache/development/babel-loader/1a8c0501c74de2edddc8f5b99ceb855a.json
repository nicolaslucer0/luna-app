{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"../ActivityIndicator\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"buttonColor\", \"textColor\", \"children\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"style\", \"theme\", \"uppercase\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Button = function Button(_ref) {\n  var _StyleSheet$flatten;\n\n  var disabled = _ref.disabled,\n      compact = _ref.compact,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n      dark = _ref.dark,\n      loading = _ref.loading,\n      icon = _ref.icon,\n      customButtonColor = _ref.buttonColor,\n      customTextColor = _ref.textColor,\n      children = _ref.children,\n      accessibilityLabel = _ref.accessibilityLabel,\n      accessibilityHint = _ref.accessibilityHint,\n      onPress = _ref.onPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onLongPress = _ref.onLongPress,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? !theme.isV3 : _ref$uppercase,\n      contentStyle = _ref.contentStyle,\n      labelStyle = _ref.labelStyle,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return mode === modeToCompare;\n  }, [mode]);\n  var roundness = theme.roundness,\n      isV3 = theme.isV3,\n      animation = theme.animation;\n  var isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  var initialElevation = isV3 ? 1 : 2;\n  var activeElevation = isV3 ? 2 : 8;\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(isElevationEntitled ? initialElevation : 0)),\n      elevation = _React$useRef.current;\n\n  React.useEffect(function () {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  var handlePressIn = function handlePressIn() {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn();\n\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      var scale = animation.scale;\n\n      _reactNative.Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressOut = function handlePressOut() {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut();\n\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      var scale = animation.scale;\n\n      _reactNative.Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var iconSize = isV3 ? 18 : 16;\n\n  var _getButtonColors = (0, _utils.getButtonColors)({\n    customButtonColor: customButtonColor,\n    customTextColor: customTextColor,\n    theme: theme,\n    mode: mode,\n    disabled: disabled,\n    dark: dark\n  }),\n      backgroundColor = _getButtonColors.backgroundColor,\n      borderColor = _getButtonColors.borderColor,\n      textColor = _getButtonColors.textColor,\n      borderWidth = _getButtonColors.borderWidth;\n\n  var rippleColor = (0, _color.default)(textColor).alpha(0.12).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  };\n  var touchableStyle = {\n    borderRadius: style ? (_reactNative.StyleSheet.flatten(style) || {}).borderRadius || borderRadius : borderRadius\n  };\n\n  var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},\n      customLabelColor = _ref2.color,\n      customLabelSize = _ref2.fontSize;\n\n  var textStyle = Object.assign({\n    color: textColor\n  }, isV3 ? theme.typescale.labelLarge : theme.fonts.medium);\n  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? [styles.iconReverse, isV3 && styles.md3IconReverse, isV3 && isMode('text') && styles.md3IconReverseTextMode] : [styles.icon, isV3 && styles.md3Icon, isV3 && isMode('text') && styles.md3IconTextMode];\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, buttonStyle, style, !isV3 && {\n      elevation: elevation\n    }]\n  }, isV3 && {\n    elevation: elevation\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(_reactNative.View, {\n    style: iconStyle\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, !isV3 && styles.md2Label, isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label), compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, labelStyle]\n  }, children))));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12\n  },\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  md2Label: {\n    letterSpacing: 1\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24\n  },\n  md3LabelText: {\n    marginHorizontal: 12\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Button);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Button","disabled","compact","mode","dark","loading","icon","customButtonColor","buttonColor","customTextColor","textColor","children","accessibilityLabel","accessibilityHint","onPress","onPressIn","onPressOut","onLongPress","style","theme","uppercase","isV3","contentStyle","labelStyle","testID","accessible","rest","isMode","React","useCallback","modeToCompare","roundness","animation","isElevationEntitled","initialElevation","activeElevation","useRef","Animated","Value","elevation","current","useEffect","setValue","handlePressIn","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","borderRadius","iconSize","getButtonColors","backgroundColor","borderColor","borderWidth","rippleColor","color","alpha","rgb","string","buttonStyle","touchableStyle","StyleSheet","flatten","customLabelColor","customLabelSize","fontSize","textStyle","typescale","labelLarge","fonts","medium","iconStyle","flexDirection","styles","iconReverse","md3IconReverse","md3IconReverseTextMode","md3Icon","md3IconTextMode","Surface","button","TouchableRipple","borderless","delayPressIn","accessibilityRole","accessibilityState","View","content","Icon","source","size","ActivityIndicator","Text","variant","selectable","numberOfLines","label","md2Label","md3LabelTextAddons","md3LabelText","md3Label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","marginVertical","marginHorizontal","letterSpacing","textTransform","withTheme"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { ButtonMode, getButtonColors } from './utils';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline, used for the lowest priority actions, especially when presenting multiple options.\n   * - `outlined` - button with an outline without background, typically used for important, but not primary action – represents medium emphasis.\n   * - `contained` - button with a background color, used for important action, have the most visual impact and high emphasis.\n   * - `elevated` - button with a background color and elevation, used when absolutely necessary e.g. button requires visual separation from a patterned background. @supported Available in v5.x with theme version 3\n   * - `contained-tonal` - button with a secondary background color, an alternative middle ground between contained and outlined buttons. @supported Available in v5.x with theme version 3\n   */\n  mode?: 'text' | 'outlined' | 'contained' | 'elevated' | 'contained-tonal';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for:\n   *  * `contained` mode for theme version 2\n   *  * `contained`, `contained-tonal` and `elevated` modes for theme version 3.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * @deprecated Deprecated in v5.x - use `buttonColor` or `textColor` instead.\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * @supported Available in v5.x\n   * Custom button's background color.\n   */\n  buttonColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Custom button's text color.\n   */\n  textColor?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: () => void;\n  /**\n   * @supported Available in v5.x\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-4.png\" />\n *     <figcaption>Elevated button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-5.png\" />\n *     <figcaption>Contained-tonal button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  buttonColor: customButtonColor,\n  textColor: customTextColor,\n  children,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  style,\n  theme,\n  uppercase = !theme.isV3,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: ButtonMode) => {\n      return mode === modeToCompare;\n    },\n    [mode]\n  );\n  const { roundness, isV3, animation } = theme;\n\n  const isElevationEntitled =\n    !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isElevationEntitled ? initialElevation : 0)\n  );\n\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  const handlePressIn = () => {\n    onPressIn?.();\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    onPressOut?.();\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n\n  const { backgroundColor, borderColor, textColor, borderWidth } =\n    getButtonColors({\n      customButtonColor,\n      customTextColor,\n      theme,\n      mode,\n      disabled,\n      dark,\n    });\n\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        borderRadius\n      : borderRadius,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = {\n    color: textColor,\n    ...(isV3 ? theme.typescale.labelLarge : theme.fonts.medium),\n  };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? [\n          styles.iconReverse,\n          isV3 && styles.md3IconReverse,\n          isV3 && isMode('text') && styles.md3IconReverseTextMode,\n        ]\n      : [\n          styles.icon,\n          isV3 && styles.md3Icon,\n          isV3 && isMode('text') && styles.md3IconTextMode,\n        ];\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          styles.button,\n          compact && styles.compact,\n          buttonStyle,\n          style,\n          !isV3 && { elevation },\n        ] as ViewStyle\n      }\n      {...(isV3 && { elevation: elevation })}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? iconSize}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? iconSize}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              !isV3 && styles.md2Label,\n              isV3 &&\n                (isMode('text')\n                  ? icon || loading\n                    ? styles.md3LabelTextAddons\n                    : styles.md3LabelText\n                  : styles.md3Label),\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16,\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16,\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8,\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12,\n  },\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  md2Label: {\n    letterSpacing: 1,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24,\n  },\n  md3LabelText: {\n    marginHorizontal: 12,\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16,\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"script"}