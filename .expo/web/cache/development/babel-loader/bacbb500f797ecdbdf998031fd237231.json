{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _getContrastingColor = _interopRequireDefault(require(\"../utils/getContrastingColor\"));\n\nvar _excluded = [\"children\", \"size\", \"style\", \"theme\", \"visible\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar defaultSize = 20;\n\nvar Badge = function Badge(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      opacity = _React$useRef.current;\n\n  var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),\n      fontScale = _useWindowDimensions.fontScale;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    _reactNative.Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,\n      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n\n  var textColor = (0, _getContrastingColor.default)(backgroundColor, _colors.white, _colors.black);\n  var borderRadius = size / 2;\n  return React.createElement(_reactNative.Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [Object.assign({\n      opacity: opacity,\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5\n    }, theme.fonts.regular, {\n      lineHeight: size / fontScale,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }), styles.container, restStyle]\n  }, rest), children);\n};\n\nvar _default = (0, _theming.withTheme)(Badge);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","size","visible","rest","current","opacity","React","Animated","fontScale","isFirstRendering","animation","scale","toValue","duration","useNativeDriver","backgroundColor","theme","restStyle","StyleSheet","textColor","getContrastingColor","borderRadius","color","fontSize","lineHeight","height","minWidth","styles","withTheme","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":";;;;;;;;;AAAA;;AACA;;AAOA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAjB,EAAA;;AAkDA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAOD;EAPE,IAAA,QAAA,GAOF,IAPE,CAAA,QAAA;EAAA,gBAOF,IAPE,CAEbC,IAFa;EAAA,IAEbA,IAFa,0BAAA,WAAA;EAAA,IAAA,KAAA,GAOF,IAPE,CAAA,KAAA;EAAA,IAAA,KAAA,GAOF,IAPE,CAAA,KAAA;EAAA,mBAOF,IAPE,CAKbC,OALa;EAAA,IAKbA,OALa,6BAAA,IAAA;EAAA,IAMVC,IANU,0CAOF,IAPE;;EAQb,oBAA6BG,KAAK,CAALA,MAAAA,CAC3B,IAAIC,qBAAAA,CAAJ,KAAA,CAAmBL,OAAO,GAAA,CAAA,GAD5B,CACE,CAD2BI,CAA7B;EAAA,IAAiBD,OAAjB,iBAAQD,OAAR;;EAGA,2BAAA,IAAA,gCAAA,GAAA;EAAA,IAAQI,SAAR,wBAAQA,SAAR;;EAEA,IAAMC,gBAAgB,GAAGH,KAAK,CAALA,MAAAA,CAAzB,IAAyBA,CAAzB;EAEA,IACeK,KADf,GAAA,KAAA,CACED,SADF,CACeC,KADf;EAIAL,KAAK,CAALA,SAAAA,CAAgB,YAAM;IAEpB,IAAIG,gBAAgB,CAApB,OAAA,EAA8B;MAC5BA,gBAAgB,CAAhBA,OAAAA,GAAAA,KAAAA;MACA;IACD;;IAEDF,qBAAAA,CAAAA,MAAAA,CAAAA,OAAAA,EAAyB;MACvBK,OAAO,EAAEV,OAAO,GAAA,CAAA,GADO,CAAA;MAEvBW,QAAQ,EAAE,MAFa,KAAA;MAGvBC,eAAe,EAAE;IAHM,CAAzBP,EAAAA,KAAAA;EAPFD,CAAAA,EAYG,CAAA,OAAA,EAAA,OAAA,EAZHA,KAYG,CAZHA;;EAcA,YACGY,uBAAAA,CAAAA,OAAAA,CAAAA,KAAAA,KADH,EAAA;EAAA,kCAAQH,eAAR;EAAA,IAAQA,eAAR,sCAA0BC,KAAK,CAALA,MAAAA,CAApB,YAAN;EAAA,IAAwDC,SAAxD;;EAGA,IAAME,SAAS,GAAGC,IAAAA,4BAAAA,EAAmB,eAAnBA,EAAmB,aAAnBA,EAAlB,aAAkBA,CAAlB;EAEA,IAAMC,YAAY,GAAGpB,IAAI,GAAzB,CAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACE,aAAa,EADf,CAAA;IAEE,KAAK,EAAE;MAEHI,OADF,EACEA,OAFG;MAGHU,eAFF,EAEEA,eAHG;MAIHO,KAAK,EAHP,SADK;MAKHC,QAAQ,EAAEtB,IAAI,GAJhB;IADK,GAMAe,KAAK,CAALA,KAAAA,CALL,OADK;MAOHQ,UAAU,EAAEvB,IAAI,GANlB,SADK;MAQHwB,MAAM,EAPR,IADK;MASHC,QAAQ,EARV,IADK;MAUHL,YAAAA,EAAAA;IAVG,IAYLM,MAAM,CAZD,SAAA,EAAA,SAAA;EAFT,CAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAxCF,CAAA;;eAiEeC,IAAAA,kBAAAA,EAAf,KAAeA,C;;;;AAEf,IAAMD,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BE,SAAS,EAAE;IACTC,SAAS,EADA,UAAA;IAETC,SAAS,EAFA,QAAA;IAGTC,iBAAiB,EAHR,QAAA;IAITC,iBAAiB,EAJR,CAAA;IAKTC,QAAQ,EAAE;EALD;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { fontScale } = useWindowDimensions();\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size / fontScale,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}