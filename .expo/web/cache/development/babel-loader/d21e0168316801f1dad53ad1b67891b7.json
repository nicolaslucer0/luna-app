{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Drawer;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _DrawerProgressContext = _interopRequireDefault(require(\"../../utils/DrawerProgressContext\"));\n\nvar _Overlay = _interopRequireDefault(require(\"./Overlay\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\n\nvar minmax = function () {\n  var _f = function _f(value, start, end) {\n    return Math.min(Math.max(value, start), end);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(value,start,end){return Math.min(Math.max(value,start),end);}\";\n  _f.__workletHash = 12387352865556;\n  _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (12:15)\";\n  return _f;\n}();\n\nfunction Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n      drawerPosition = _ref.drawerPosition,\n      drawerStyle = _ref.drawerStyle,\n      drawerType = _ref.drawerType,\n      gestureHandlerProps = _ref.gestureHandlerProps,\n      hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n      keyboardDismissMode = _ref.keyboardDismissMode,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      open = _ref.open,\n      overlayStyle = _ref.overlayStyle,\n      renderDrawerContent = _ref.renderDrawerContent,\n      renderSceneContent = _ref.renderSceneContent,\n      statusBarAnimation = _ref.statusBarAnimation,\n      swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n      swipeEdgeWidth = _ref.swipeEdgeWidth,\n      swipeEnabled = _ref.swipeEnabled,\n      swipeVelocityThreshold = _ref.swipeVelocityThreshold;\n\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref2 = _reactNative.StyleSheet.flatten(drawerStyle) || {},\n        _ref2$width = _ref2.width,\n        width = _ref2$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref2$width;\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function () {\n    var _f = function _f(open) {\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    };\n\n    _f._closure = {\n      drawerPosition: drawerPosition,\n      drawerWidth: drawerWidth\n    };\n    _f.asString = \"function _f(open){const{drawerPosition,drawerWidth}=jsThis._closure;{if(drawerPosition==='left'){return open?0:-drawerWidth;}return open?0:drawerWidth;}}\";\n    _f.__workletHash = 4752955090285;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (60:50)\";\n    return _f;\n  }(), [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      _reactNative.StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = _reactNative.InteractionManager.createInteractionHandle();\n  };\n\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      _reactNative.InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n\n      interactionHandleRef.current = null;\n    }\n  };\n\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      _reactNative.Keyboard.dismiss();\n    }\n  };\n\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  var onGestureFinish = function onGestureFinish() {\n    endInteraction();\n  };\n\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = (0, _reactNativeReanimated.useSharedValue)(0);\n  var touchX = (0, _reactNativeReanimated.useSharedValue)(0);\n  var translationX = (0, _reactNativeReanimated.useSharedValue)(getDrawerTranslationX(open));\n  var gestureState = (0, _reactNativeReanimated.useSharedValue)(_reactNativeGestureHandler.State.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function () {\n    var _f = function _f(open, velocity) {\n      var translateX = getDrawerTranslationX(open);\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = (0, _reactNativeReanimated.withSpring)(translateX, {\n        velocity: velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01\n      });\n\n      if (open) {\n        (0, _reactNativeReanimated.runOnJS)(onOpen)();\n      } else {\n        (0, _reactNativeReanimated.runOnJS)(onClose)();\n      }\n    };\n\n    _f._closure = {\n      getDrawerTranslationX: getDrawerTranslationX,\n      touchStartX: touchStartX,\n      touchX: touchX,\n      translationX: translationX,\n      withSpring: _reactNativeReanimated.withSpring,\n      runOnJS: _reactNativeReanimated.runOnJS,\n      onOpen: onOpen,\n      onClose: onClose\n    };\n    _f.asString = \"function _f(open,velocity){const{getDrawerTranslationX,touchStartX,touchX,translationX,withSpring,runOnJS,onOpen,onClose}=jsThis._closure;{const translateX=getDrawerTranslationX(open);touchStartX.value=0;touchX.value=0;translationX.value=withSpring(translateX,{velocity:velocity,stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01});if(open){runOnJS(onOpen)();}else{runOnJS(onClose)();}}}\";\n    _f.__workletHash = 13769858983382;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (122:41)\";\n    return _f;\n  }(), [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer(open);\n  }, [open, toggleDrawer]);\n  var onGestureEvent = (0, _reactNativeReanimated.useAnimatedGestureHandler)({\n    onStart: function () {\n      var _f = function _f(event, ctx) {\n        ctx.startX = translationX.value;\n        gestureState.value = event.state;\n        touchStartX.value = event.x;\n        (0, _reactNativeReanimated.runOnJS)(onGestureStart)();\n      };\n\n      _f._closure = {\n        translationX: translationX,\n        gestureState: gestureState,\n        touchStartX: touchStartX,\n        runOnJS: _reactNativeReanimated.runOnJS,\n        onGestureStart: onGestureStart\n      };\n      _f.asString = \"function _f(event,ctx){const{translationX,gestureState,touchStartX,runOnJS,onGestureStart}=jsThis._closure;{ctx.startX=translationX.value;gestureState.value=event.state;touchStartX.value=event.x;runOnJS(onGestureStart)();}}\";\n      _f.__workletHash = 5837278583014;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (146:13)\";\n      return _f;\n    }(),\n    onActive: function () {\n      var _f = function _f(event, ctx) {\n        touchX.value = event.x;\n        translationX.value = ctx.startX + event.translationX;\n        gestureState.value = event.state;\n      };\n\n      _f._closure = {\n        touchX: touchX,\n        translationX: translationX,\n        gestureState: gestureState\n      };\n      _f.asString = \"function _f(event,ctx){const{touchX,translationX,gestureState}=jsThis._closure;{touchX.value=event.x;translationX.value=ctx.startX+event.translationX;gestureState.value=event.state;}}\";\n      _f.__workletHash = 16355851393191;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (152:14)\";\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f(event) {\n        gestureState.value = event.state;\n        var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n        toggleDrawer(nextOpen, event.velocityX);\n      };\n\n      _f._closure = {\n        gestureState: gestureState,\n        SWIPE_DISTANCE_MINIMUM: SWIPE_DISTANCE_MINIMUM,\n        swipeVelocityThreshold: swipeVelocityThreshold,\n        swipeDistanceThreshold: swipeDistanceThreshold,\n        drawerPosition: drawerPosition,\n        open: open,\n        toggleDrawer: toggleDrawer\n      };\n      _f.asString = \"function _f(event){const{gestureState,SWIPE_DISTANCE_MINIMUM,swipeVelocityThreshold,swipeDistanceThreshold,drawerPosition,open,toggleDrawer}=jsThis._closure;{gestureState.value=event.state;const nextOpen=Math.abs(event.translationX)>SWIPE_DISTANCE_MINIMUM&&Math.abs(event.translationX)>swipeVelocityThreshold||Math.abs(event.translationX)>swipeDistanceThreshold?drawerPosition==='left'?(event.velocityX===0?event.translationX:event.velocityX)>0:(event.velocityX===0?event.translationX:event.velocityX)<0:open;toggleDrawer(nextOpen,event.velocityX);}}\";\n      _f.__workletHash = 8167669550273;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (157:11)\";\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        (0, _reactNativeReanimated.runOnJS)(onGestureFinish)();\n      };\n\n      _f._closure = {\n        runOnJS: _reactNativeReanimated.runOnJS,\n        onGestureFinish: onGestureFinish\n      };\n      _f.asString = \"function _f(){const{runOnJS,onGestureFinish}=jsThis._closure;{runOnJS(onGestureFinish)();}}\";\n      _f.__workletHash = 10753070071248;\n      _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (164:14)\";\n      return _f;\n    }()\n  });\n  var translateX = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      var touchDistance = drawerType === 'front' && gestureState.value === _reactNativeGestureHandler.State.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n      var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n      return translateX;\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      gestureState: gestureState,\n      GestureState: {\n        ACTIVE: _reactNativeGestureHandler.State.ACTIVE\n      },\n      minmax: minmax,\n      drawerPosition: drawerPosition,\n      touchStartX: touchStartX,\n      drawerWidth: drawerWidth,\n      dimensions: {\n        width: dimensions.width\n      },\n      translationX: translationX\n    };\n    _f.asString = \"function _f(){const{drawerType,gestureState,GestureState,minmax,drawerPosition,touchStartX,drawerWidth,dimensions,translationX}=jsThis._closure;{const touchDistance=drawerType==='front'&&gestureState.value===GestureState.ACTIVE?minmax(drawerPosition==='left'?touchStartX.value-drawerWidth:dimensions.width-drawerWidth-touchStartX.value,0,dimensions.width):0;const translateX=drawerPosition==='left'?minmax(translationX.value+touchDistance,-drawerWidth,0):minmax(translationX.value-touchDistance,0,drawerWidth);return translateX;}}\";\n    _f.__workletHash = 16881564590342;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (168:37)\";\n    return _f;\n  }());\n\n  var isRTL = _reactNative.I18nManager.getConstants().isRTL;\n\n  var drawerAnimatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    var _f = function _f() {\n      var distanceFromEdge = dimensions.width - drawerWidth;\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n        }]\n      };\n    };\n\n    _f._closure = {\n      dimensions: {\n        width: dimensions.width\n      },\n      drawerWidth: drawerWidth,\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerPosition: drawerPosition,\n      isRTL: isRTL\n    };\n    _f.asString = \"function _f(){const{dimensions,drawerWidth,drawerType,translateX,drawerPosition,isRTL}=jsThis._closure;{const distanceFromEdge=dimensions.width-drawerWidth;return{transform:drawerType==='permanent'?[]:[{translateX:(drawerType==='back'?0:translateX.value)+(drawerPosition==='left'?isRTL?-distanceFromEdge:0:isRTL?0:distanceFromEdge)}]};}}\";\n    _f.__workletHash = 17545005580326;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (199:47)\";\n    _f.__optimalization = 3;\n    return _f;\n  }());\n  var contentAnimatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    var _f = function _f() {\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n        }]\n      };\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerWidth: drawerWidth,\n      drawerPosition: drawerPosition\n    };\n    _f.asString = \"function _f(){const{drawerType,translateX,drawerWidth,drawerPosition}=jsThis._closure;{return{transform:drawerType==='permanent'?[]:[{translateX:drawerType==='front'?0:translateX.value+drawerWidth*(drawerPosition==='left'?1:-1)}]};}}\";\n    _f.__workletHash = 10940802030343;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (210:48)\";\n    _f.__optimalization = 3;\n    return _f;\n  }());\n  var progress = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      return drawerType === 'permanent' ? 1 : (0, _reactNativeReanimated.interpolate)(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      interpolate: _reactNativeReanimated.interpolate,\n      translateX: translateX,\n      getDrawerTranslationX: getDrawerTranslationX\n    };\n    _f.asString = \"function _f(){const{drawerType,interpolate,translateX,getDrawerTranslationX}=jsThis._closure;{return drawerType==='permanent'?1:interpolate(translateX.value,[getDrawerTranslationX(false),getDrawerTranslationX(true)],[0,1]);}}\";\n    _f.__workletHash = 10677902672597;\n    _f.__location = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (220:35)\";\n    return _f;\n  }());\n  return React.createElement(_DrawerProgressContext.default.Provider, {\n    value: progress\n  }, React.createElement(_reactNativeGestureHandler.PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(_reactNativeReanimated.default.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(_reactNative.View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(_Overlay.default, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer(false);\n    },\n    style: overlayStyle\n  }) : null), React.createElement(_reactNativeReanimated.default.View, {\n    accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n    removeClippedSubviews: _reactNative.Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: Object.assign({\n    flex: 1\n  }, _reactNative.Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"mappings":"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","names":["SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","value","start","end","Math","min","max","Drawer","dimensions","drawerPosition","drawerStyle","drawerType","gestureHandlerProps","hideStatusBarOnOpen","keyboardDismissMode","onClose","onOpen","open","overlayStyle","renderDrawerContent","renderSceneContent","statusBarAnimation","swipeDistanceThreshold","swipeEdgeWidth","swipeEnabled","swipeVelocityThreshold","getDrawerWidth","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerWidth","isOpen","isRight","getDrawerTranslationX","React","useCallback","DrawerProgressContext","hideStatusBar","hide","StatusBar","setHidden","useEffect","interactionHandleRef","useRef","startInteraction","current","InteractionManager","createInteractionHandle","endInteraction","clearInteractionHandle","hideKeyboard","Keyboard","dismiss","onGestureStart","onGestureFinish","hitSlop","right","undefined","left","touchStartX","useSharedValue","touchX","translationX","gestureState","GestureState","UNDETERMINED","toggleDrawer","velocity","translateX","withSpring","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","runOnJS","interpolate","onGestureEvent","useAnimatedGestureHandler","onStart","event","ctx","startX","state","x","Animated","onActive","onEnd","nextOpen","abs","velocityX","useAnimatedStyle","onFinish","useDerivedValue","touchDistance","ACTIVE","isRTL","I18nManager","getConstants","drawerAnimatedStyle","distanceFromEdge","transform","contentAnimatedStyle","progress","Provider","PanGestureHandler","activeOffsetX","failOffsetY","enabled","View","style","styles","main","flexDirection","content","accessibilityElementsHidden","importantForAccessibility","Overlay","onPress","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","container","position","zIndex","create","top","bottom","maxWidth","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureFinish = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(translateX, {\n        velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n      });\n\n      if (open) {\n        runOnJS(onOpen)();\n      } else {\n        runOnJS(onClose)();\n      }\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n    },\n    onFinish: () => {\n      runOnJS(onGestureFinish)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const isRTL = I18nManager.getConstants().isRTL;\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    const distanceFromEdge = dimensions.width - drawerWidth;\n\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The drawer stays in place when `drawerType` is `back`\n                  (drawerType === 'back' ? 0 : translateX.value) +\n                  (drawerPosition === 'left'\n                    ? isRTL\n                      ? -distanceFromEdge\n                      : 0\n                    : isRTL\n                    ? 0\n                    : distanceFromEdge),\n              },\n            ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The screen content stays in place when `drawerType` is `front`\n                  drawerType === 'front'\n                    ? 0\n                    : translateX.value +\n                      drawerWidth * (drawerPosition === 'left' ? 1 : -1),\n              },\n            ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"script"}