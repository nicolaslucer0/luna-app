{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref4 = _reactNative.StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      fontVariant = _ref4.fontVariant,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET - 8);\n  }\n\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: _reactNative.Platform.OS === 'android',\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingOut = (0, _helpers.adjustPaddingOut)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: _constants.ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: _LabelBackground.default,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: 'text-input-outlined'\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n};\n\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      focused = _ref3.focused,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(_reactNative.View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","error","underlineColor","outlineColor","render","props","multiline","rest","adornmentConfig","getAdornmentConfig","left","right","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","isTransparent","color","inputTextColor","activeColor","placeholderColor","activeOutlineColor","customOutlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","lineHeight","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","roundness","theme","maxFontSizeMultiplier","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","isTextInputFocused","textStyle","visible","labeled","paddingTop","testID","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","fontVariant","textAlignVertical","textAlign","outline","Outline","borderRadius","borderWidth","focused","borderColor","position","paddingHorizontal","top","bottom","labelContainer","paddingBottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                fontVariant,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}