{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DialogIcon = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar DialogIcon = function DialogIcon(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      color = _ref.color,\n      icon = _ref.icon;\n  var theme = (0, _theming.useTheme)();\n\n  if (!theme.isV3) {\n    return null;\n  }\n\n  var iconColor = color || theme.colors.secondary;\n  return React.createElement(_reactNative.View, {\n    style: styles.wrapper\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    color: iconColor,\n    size: size\n  }));\n};\n\nexports.DialogIcon = DialogIcon;\nDialogIcon.displayName = 'Dialog.Icon';\n\nvar styles = _reactNative.StyleSheet.create({\n  wrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 24\n  }\n});\n\nvar _default = DialogIcon;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AA0DA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAAuC;EAAA,qBAApCC,IAAoC;EAAA,IAApCA,IAAoC,0BAA7B,EAA6B;EAAA,IAAzBC,KAAyB,QAAzBA,KAAyB;EAAA,IAAlBC,IAAkB,QAAlBA,IAAkB;EACxD,IAAMC,KAAK,GAAGC,wBAAd;;EAEA,IAAI,CAACD,KAAK,CAACE,IAAX,EAAiB;IACf,OAAO,IAAP;EAJsD;;EAQxD,IAAMC,SAAS,GAAGL,KAAK,IAAIE,KAAK,CAACI,MAANJ,CAAaK,SAAxC;EAEA,OACEC,oBAACC,iBAAD;IAAMC,KAAK,EAAEC,MAAM,CAACC;EAApB,GACEJ,oBAACK,aAAD;IAAMC,MAAM,EAAEb,IAAd;IAAoBD,KAAK,EAAEK,SAA3B;IAAsCN,IAAI,EAAEA;EAA5C,EADF,CADF;AAVF;;;AAiBAD,UAAU,CAACiB,WAAXjB,GAAyB,aAAzBA;;AAEA,IAAMa,MAAM,GAAGK,wBAAWC,MAAXD,CAAkB;EAC/BJ,OAAO,EAAE;IACPM,UAAU,EAAE,QADL;IAEPC,cAAc,EAAE,QAFT;IAGPC,UAAU,EAAE;EAHL;AADsB,CAAlBJ,CAAf;;eAQelB,U","names":["DialogIcon","size","color","icon","theme","useTheme","isV3","iconColor","colors","secondary","React","View","style","styles","wrapper","Icon","source","displayName","StyleSheet","create","alignItems","justifyContent","paddingTop"],"sources":["DialogIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport Icon, { IconSource } from '../Icon';\n\nexport type Props = {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n};\n\n/**\n * @supported Available in v5.x with theme version 3\n * A component to show an icon in a Dialog.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/dialog-icon.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.Icon icon=\"alert\" />\n *         <Dialog.Title style={styles.title}>This is a title</Dialog.Title>\n *         <Dialog.Content>\n *           <Paragraph>This is simple dialog</Paragraph>\n *         </Dialog.Content>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   title: {\n *     textAlign: 'center',\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst DialogIcon = ({ size = 24, color, icon }: Props) => {\n  const theme = useTheme();\n\n  if (!theme.isV3) {\n    return null;\n  }\n\n  //@ts-ignore\n  const iconColor = color || theme.colors.secondary;\n\n  return (\n    <View style={styles.wrapper}>\n      <Icon source={icon} color={iconColor} size={size} />\n    </View>\n  );\n};\n\nDialogIcon.displayName = 'Dialog.Icon';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 24,\n  },\n});\n\nexport default DialogIcon;\n\n// @component-docs ignore-next-line\nexport { DialogIcon };\n"]},"metadata":{},"sourceType":"script"}