{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerItemList;\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _DrawerItem = _interopRequireDefault(require(\"./DrawerItem\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var buildLink = (0, _native.useLinkBuilder)();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n      drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n      drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch(Object.assign({}, focused ? _native.DrawerActions.closeDrawer() : _native.CommonActions.navigate({\n          name: route.name,\n          merge: true\n        }), {\n          target: state.key\n        }));\n      }\n    };\n\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon,\n        drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n        drawerItemStyle = _descriptors$route$ke.drawerItemStyle,\n        drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;\n    return React.createElement(_DrawerItem.default, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAOA;;AAGA;;;;;;AAWe,SAASA,cAAT,OAIL;EAAA,IAHRC,KAGQ,QAHRA,KAGQ;EAAA,IAFRC,UAEQ,QAFRA,UAEQ;EAAA,IADRC,WACQ,QADRA,WACQ;EACR,IAAMC,SAAS,GAAGC,6BAAlB;EAEA,IAAMC,YAAY,GAAGL,KAAK,CAACM,MAANN,CAAaA,KAAK,CAACO,KAAnBP,CAArB;EACA,IAAMQ,iBAAiB,GAAGN,WAAW,CAACG,YAAY,CAACI,GAAd,CAArC;EACA,IAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;EAEA,IACEC,qBADF,GAKIF,cALJ,CACEE,qBADF;EAAA,IAEEC,uBAFF,GAKIH,cALJ,CAEEG,uBAFF;EAAA,IAGEC,2BAHF,GAKIJ,cALJ,CAGEI,2BAHF;EAAA,IAIEC,6BAJF,GAKIL,cALJ,CAIEK,6BAJF;EAOA,OAAOf,KAAK,CAACM,MAANN,CAAagB,GAAbhB,CAAiB,UAACiB,KAAD,EAAQC,CAAR,EAAc;IACpC,IAAMC,OAAO,GAAGD,CAAC,KAAKlB,KAAK,CAACO,KAA5B;;IAEA,IAAMa,OAAO,GAAG,SAAVA,OAAU,GAAM;MACpB,IAAMC,KAAK,GAAGpB,UAAU,CAACqB,IAAXrB,CAAgB;QAC5BsB,IAAI,EAAE,iBADsB;QAE5BC,MAAM,EAAEP,KAAK,CAACR,GAFc;QAG5BgB,iBAAiB,EAAE;MAHS,CAAhBxB,CAAd;;MAMA,IAAI,CAACoB,KAAK,CAACK,gBAAX,EAA6B;QAC3BzB,UAAU,CAAC0B,QAAX1B,mBACMkB,OAAO,GACPS,sBAAcC,WAAdD,EADO,GAEPE,sBAAcC,QAAdD,CAAuB;UAAEE,IAAI,EAAEf,KAAK,CAACe,IAAd;UAAoBC,KAAK,EAAE;QAA3B,CAAvBH,CAHN7B;UAIEuB,MAAM,EAAExB,KAAK,CAACS;QAJhBR;MAMD;IAdH;;IAiBA,4BAOIC,WAAW,CAACe,KAAK,CAACR,GAAP,CAAXP,CAAuBS,OAP3B;IAAA,IACEuB,KADF,yBACEA,KADF;IAAA,IAEEC,WAFF,yBAEEA,WAFF;IAAA,IAGEC,UAHF,yBAGEA,UAHF;IAAA,IAIEC,gBAJF,yBAIEA,gBAJF;IAAA,IAKEC,eALF,yBAKEA,eALF;IAAA,IAMEC,sBANF,yBAMEA,sBANF;IASA,OACEC,oBAACC,mBAAD;MACEhC,GAAG,EAAEQ,KAAK,CAACR,GADb;MAEEiC,KAAK,EACHP,WAAW,KAAKQ,SAAhBR,GACIA,WADJA,GAEID,KAAK,KAAKS,SAAVT,GACAA,KADAA,GAEAjB,KAAK,CAACe,IAPd;MASEY,IAAI,EAAER,UATR;MAUEjB,OAAO,EAAEA,OAVX;MAWE0B,eAAe,EAAEjC,qBAXnB;MAYEkC,iBAAiB,EAAEjC,uBAZrB;MAaEkC,qBAAqB,EAAEjC,2BAbzB;MAcEkC,uBAAuB,EAAEjC,6BAd3B;MAeEkC,gBAAgB,EAAEV,sBAfpB;MAgBEW,UAAU,EAAEb,gBAhBd;MAiBEc,KAAK,EAAEb,eAjBT;MAkBEc,EAAE,EAAEjD,SAAS,CAACc,KAAK,CAACe,IAAP,EAAaf,KAAK,CAACoC,MAAnB,CAlBf;MAmBEjC,OAAO,EAAEA;IAnBX,EADF;EA7BK,EAAP;AAqDD","names":["DrawerItemList","state","navigation","descriptors","buildLink","useLinkBuilder","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","DrawerActions","closeDrawer","CommonActions","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","React","DrawerItem","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style","to","params"],"sources":["DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"script"}