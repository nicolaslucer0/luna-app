{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _IconButton = _interopRequireDefault(require(\"./IconButton/IconButton\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"./MaterialCommunityIcon\"));\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"./ActivityIndicator\"));\n\nvar _excluded = [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"elevation\", \"style\", \"theme\", \"value\", \"loading\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _theme$colors;\n\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n      clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n      clearIcon = _ref.clearIcon,\n      icon = _ref.icon,\n      customIconColor = _ref.iconColor,\n      inputStyle = _ref.inputStyle,\n      onIconPress = _ref.onIconPress,\n      placeholder = _ref.placeholder,\n      _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n      searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n      _ref$elevation = _ref.elevation,\n      elevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      style = _ref.style,\n      theme = _ref.theme,\n      value = _ref.value,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var input = root.current;\n\n    if (input) {\n      return {\n        focus: function focus() {\n          return input.focus();\n        },\n        clear: function clear() {\n          return input.clear();\n        },\n        setNativeProps: function setNativeProps(args) {\n          return input.setNativeProps(args);\n        },\n        isFocused: function isFocused() {\n          return input.isFocused();\n        },\n        blur: function blur() {\n          return input.blur();\n        }\n      };\n    }\n\n    var noop = function noop() {\n      throw new Error('TextInput is not available');\n    };\n\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n\n  var handleClearPress = function handleClearPress() {\n    var _root$current, _rest$onChangeText;\n\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness,\n      dark = theme.dark,\n      isV3 = theme.isV3;\n  var textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n  var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());\n  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      borderRadius: roundness\n    }, !isV3 && styles.elevation, styles.container, style]\n  }, theme.isV3 && {\n    elevation: elevation\n  }), React.createElement(_IconButton.default, {\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    iconColor: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n          color = _ref2.color;\n      return React.createElement(_MaterialCommunityIcon.default, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(_reactNative.TextInput, _extends({\n    style: [styles.input, Object.assign({\n      color: textColor\n    }, !isV3 && theme.fonts.regular, _reactNative.Platform.select({\n      web: {\n        outline: 'none'\n      }\n    })), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.placeholder,\n    selectionColor: colors === null || colors === void 0 ? void 0 : colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), loading ? React.createElement(_ActivityIndicator.default, {\n    testID: \"activity-indicator\",\n    style: styles.loader\n  }) : React.createElement(_IconButton.default, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n          color = _ref3.color;\n      return React.createElement(_MaterialCommunityIcon.default, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityRole: \"button\"\n  }));\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  },\n  elevation: {\n    elevation: 4\n  },\n  loader: {\n    margin: 10\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Searchbar);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Searchbar","React","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","elevation","style","theme","value","loading","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","isV3","textColor","onSurface","text","color","alpha","rgb","string","rippleColor","Surface","borderRadius","styles","container","IconButton","accessibilityRole","borderless","onPress","size","MaterialCommunityIcon","name","direction","I18nManager","isRTL","accessibilityLabel","TextInput","fonts","regular","Platform","select","web","outline","placeholderTextColor","_theme$colors","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","ActivityIndicator","testID","loader","disabled","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","margin","withTheme"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n  Animated,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton/IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport type { Theme } from '../types';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport ActivityIndicator from './ActivityIndicator';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Custom flag for replacing clear button with activity indicator.\n   */\n  loading?: Boolean;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      elevation = 1,\n      style,\n      theme,\n      value,\n      loading = false,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, isV3 } = theme;\n    const textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          styles.container,\n          style,\n        ]}\n        {...(theme.isV3 && { elevation })}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...(!isV3 && theme.fonts.regular),\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={\n            theme.isV3 ? theme.colors.onSurface : theme.colors?.placeholder\n          }\n          selectionColor={colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        {loading ? (\n          <ActivityIndicator\n            testID=\"activity-indicator\"\n            style={styles.loader}\n          />\n        ) : (\n          <IconButton\n            borderless\n            disabled={!value}\n            accessibilityLabel={clearAccessibilityLabel}\n            iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n            rippleColor={rippleColor}\n            onPress={handleClearPress}\n            icon={\n              clearIcon ||\n              (({ size, color }) => (\n                <MaterialCommunityIcon\n                  name=\"close\"\n                  color={color}\n                  size={size}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              ))\n            }\n            accessibilityRole=\"button\"\n          />\n        )}\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  elevation: {\n    elevation: 4,\n  },\n  loader: {\n    margin: 10,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"script"}