{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n      disabled = _ref.disabled,\n      onValueChange = _ref.onValueChange,\n      color = _ref.color,\n      theme = _ref.theme,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _getSwitchColor = (0, _utils.getSwitchColor)({\n    theme: theme,\n    disabled: disabled,\n    value: value,\n    color: color\n  }),\n      checkedColor = _getSwitchColor.checkedColor,\n      onTintColor = _getSwitchColor.onTintColor,\n      thumbTintColor = _getSwitchColor.thumbTintColor;\n\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : _reactNative.Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return React.createElement(_reactNative.Switch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\n\nvar _default = (0, _theming.withTheme)(Switch);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AAOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,2BAAcC,iBAAdD,GACZA,2BAAcC,iBAAdD,CAAgCE,kBADpBF,GAEZG,SAFJ;;AAkEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAOF;EAAA,IANXC,KAMW,QANXA,KAMW;EAAA,IALXC,QAKW,QALXA,QAKW;EAAA,IAJXC,aAIW,QAJXA,aAIW;EAAA,IAHXC,KAGW,QAHXA,KAGW;EAAA,IAFXC,KAEW,QAFXA,KAEW;EAAA,IADRC,IACQ;;EACX,sBAAsDC,2BAAe;IACnEF,KADmE,EACnEA,KADmE;IAEnEH,QAFmE,EAEnEA,QAFmE;IAGnED,KAHmE,EAGnEA,KAHmE;IAInEG;EAJmE,CAAfG,CAAtD;EAAA,IAAQC,YAAR,mBAAQA,YAAR;EAAA,IAAsBC,WAAtB,mBAAsBA,WAAtB;EAAA,IAAmCC,cAAnC,mBAAmCA,cAAnC;;EAOA,IAAMC,KAAK,GACThB,OAAO,IAAIA,OAAO,CAACiB,KAARjB,KAAkB,CAA7BA,IAAkCA,OAAO,CAACkB,KAARlB,IAAiB,EAAnDA,GACI;IACEc,WADF,EACEA,WADF;IAEEC;EAFF,CADJf,GAKImB,sBAASC,EAATD,KAAgB,KAAhBA,GACA;IACEE,gBAAgB,EAAEP,WADpB;IAEEQ,UAAU,EAAEP,cAFd;IAGEQ,gBAAgB,EAAEV;EAHpB,CADAM,GAMA;IACEG,UAAU,EAAEP,cADd;IAEES,UAAU,EAAE;MACVC,IAAI,EAAEX,WADI;MAEVY,KAAK,EAAEZ;IAFG;EAFd,CAZN;EAoBA,OACEa,oBAACC,mBAAD;IACEtB,KAAK,EAAEA,KADT;IAEEC,QAAQ,EAAEA,QAFZ;IAGEC,aAAa,EAAED,QAAQ,GAAGH,SAAH,GAAeI;EAHxC,GAIMQ,KAJN,EAKML,IALN,EADF;AAnCF;;eA8CekB,wBAAUxB,MAAVwB,C","names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","value","disabled","onValueChange","color","theme","rest","getSwitchColor","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","React","NativeSwitch","withTheme"],"sources":["Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getSwitchColor } from './utils';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const { checkedColor, onTintColor, thumbTintColor } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color,\n  });\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: onTintColor,\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"script"}