{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerView;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _elements = require(\"@react-navigation/elements\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar Reanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _DrawerPositionContext = _interopRequireDefault(require(\"../utils/DrawerPositionContext\"));\n\nvar _DrawerStatusContext = _interopRequireDefault(require(\"../utils/DrawerStatusContext\"));\n\nvar _getDrawerStatusFromState = _interopRequireDefault(require(\"../utils/getDrawerStatusFromState\"));\n\nvar _DrawerContent = _interopRequireDefault(require(\"./DrawerContent\"));\n\nvar _DrawerToggleButton = _interopRequireDefault(require(\"./DrawerToggleButton\"));\n\nvar _GestureHandler = require(\"./GestureHandler\");\n\nvar _ScreenFallback = require(\"./ScreenFallback\");\n\nvar _excluded = [\"navigation\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      defaultStatus = _ref2.defaultStatus,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(_DrawerContent.default, props);\n  } : _ref2$drawerContent,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _ref2$detachInactiveS,\n      _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n      useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n\n  var Drawer = useLegacyImplementation ? require('./legacy/Drawer').default : require('./modern/Drawer').default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n      _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n      drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n      _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n      drawerPosition = _descriptors$focusedR3 === void 0 ? _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n      _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n      drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n      drawerStyle = _descriptors$focusedR.drawerStyle,\n      _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n      drawerType = _descriptors$focusedR5 === void 0 ? _reactNative.Platform.select({\n    ios: 'slide',\n    default: 'front'\n  }) : _descriptors$focusedR5,\n      gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n      _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n      keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n      _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n      overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n      _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n      swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n      _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n      swipeEnabled = _descriptors$focusedR9 === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _descriptors$focusedR9,\n      _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n      swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n\n  var _React$useState = React.useState([focusedRouteKey]),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n  }\n\n  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var drawerStatus = (0, _getDrawerStatusFromState.default)(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n\n    if (_reactNative.Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n\n    return function () {\n      subscription.remove();\n\n      if (_reactNative.Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(_DrawerPositionContext.default.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(_ScreenFallback.MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$l = _descriptor$options.lazy,\n          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n          unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options2 = descriptor.options,\n          freezeOnBlur = _descriptor$options2.freezeOnBlur,\n          _descriptor$options2$ = _descriptor$options2.header,\n          header = _descriptor$options2$ === void 0 ? function (_ref3) {\n        var _options$headerLeft;\n\n        var layout = _ref3.layout,\n            options = _ref3.options;\n        return React.createElement(_elements.Header, _extends({}, options, {\n          layout: layout,\n          title: (0, _elements.getHeaderTitle)(options, route.name),\n          headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n            return React.createElement(_DrawerToggleButton.default, props);\n          }\n        }));\n      } : _descriptor$options2$,\n          headerShown = _descriptor$options2.headerShown,\n          headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n          headerTransparent = _descriptor$options2.headerTransparent,\n          sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(_ScreenFallback.MaybeScreen, {\n        key: route.key,\n        style: [_reactNative.StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(_elements.Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n\n  return React.createElement(_DrawerStatusContext.default.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\n\nfunction DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n      rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);\n  return React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","drawerContent","props","detachInactiveScreens","useLegacyImplementation","Reanimated","legacyImplemenationNotAvailable","require","Drawer","focusedRouteKey","state","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","drawerStatusBarAnimation","drawerType","ios","default","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","descriptors","React","loaded","setLoaded","dimensions","colors","drawerStatus","getDrawerStatusFromState","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","handleHardwareBack","defaultStatus","handleEscape","e","subscription","BackHandler","renderDrawerContent","renderSceneContent","styles","content","descriptor","route","lazy","unmountOnBlur","isFocused","header","options","getHeaderTitle","sceneContainerStyle","StyleSheet","zIndex","freezeOnBlur","layout","backgroundColor","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","rest","flex"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}