{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTouchableRippleColors = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar getUnderlayColor = function getUnderlayColor(_ref) {\n  var theme = _ref.theme,\n      calculatedRippleColor = _ref.calculatedRippleColor,\n      underlayColor = _ref.underlayColor;\n\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return (0, _color.default)(calculatedRippleColor).rgb().string();\n  }\n\n  return (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nvar getRippleColor = function getRippleColor(_ref2) {\n  var theme = _ref2.theme,\n      rippleColor = _ref2.rippleColor;\n\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return (0, _color.default)(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return (0, _color.default)(theme.colors.text).alpha(0.32).rgb().string();\n  }\n\n  return (0, _color.default)(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nvar getTouchableRippleColors = function getTouchableRippleColors(_ref3) {\n  var theme = _ref3.theme,\n      rippleColor = _ref3.rippleColor,\n      underlayColor = _ref3.underlayColor;\n  var calculatedRippleColor = getRippleColor({\n    theme: theme,\n    rippleColor: rippleColor\n  });\n  return {\n    calculatedRippleColor: calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme: theme,\n      calculatedRippleColor: calculatedRippleColor,\n      underlayColor: underlayColor\n    })\n  };\n};\n\nexports.getTouchableRippleColors = getTouchableRippleColors;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,OAQnB;EAAA,IAPJC,KAOI,QAPJA,KAOI;EAAA,IANJC,qBAMI,QANJA,qBAMI;EAAA,IALJC,aAKI,QALJA,aAKI;;EACJ,IAAIA,aAAa,IAAI,IAArB,EAA2B;IACzB,OAAOA,aAAP;EACD;;EAED,IAAIF,KAAK,CAACG,IAAV,EAAgB;IACd,OAAOC,oBAAMH,qBAANG,EAA6BC,GAA7BD,GAAmCE,MAAnCF,EAAP;EACD;;EAED,OAAOA,oBAAMH,qBAANG,EAA6BG,IAA7BH,CAAkC,GAAlCA,EAAuCC,GAAvCD,GAA6CE,MAA7CF,EAAP;AAjBF;;AAoBA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,QAMjB;EAAA,IALJR,KAKI,SALJA,KAKI;EAAA,IAJJS,WAII,SAJJA,WAII;;EACJ,IAAIA,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACD;;EAED,IAAIT,KAAK,CAACG,IAAV,EAAgB;IACd,OAAOC,oBAAMJ,KAAK,CAACU,MAANV,CAAaW,SAAnBP,EAA8BQ,KAA9BR,CAAoC,IAApCA,EAA0CC,GAA1CD,GAAgDE,MAAhDF,EAAP;EACD;;EAED,IAAIJ,KAAK,CAACa,IAAV,EAAgB;IACd,OAAOT,oBAAMJ,KAAK,CAACU,MAANV,CAAac,IAAnBV,EAAyBQ,KAAzBR,CAA+B,IAA/BA,EAAqCC,GAArCD,GAA2CE,MAA3CF,EAAP;EACD;;EACD,OAAOA,oBAAMJ,KAAK,CAACU,MAANV,CAAac,IAAnBV,EAAyBQ,KAAzBR,CAA+B,GAA/BA,EAAoCC,GAApCD,GAA0CE,MAA1CF,EAAP;AAlBF;;AAqBO,IAAMW,wBAAwB,GAAG,SAA3BA,wBAA2B,QAQlC;EAAA,IAPJf,KAOI,SAPJA,KAOI;EAAA,IANJS,WAMI,SANJA,WAMI;EAAA,IALJP,aAKI,SALJA,aAKI;EACJ,IAAMD,qBAAqB,GAAGO,cAAc,CAAC;IAAER,KAAF,EAAEA,KAAF;IAASS;EAAT,CAAD,CAA5C;EACA,OAAO;IACLR,qBADK,EACLA,qBADK;IAELe,uBAAuB,EAAEjB,gBAAgB,CAAC;MACxCC,KADwC,EACxCA,KADwC;MAExCC,qBAFwC,EAExCA,qBAFwC;MAGxCC;IAHwC,CAAD;EAFpC,CAAP;AAVK","names":["getUnderlayColor","theme","calculatedRippleColor","underlayColor","isV3","color","rgb","string","fade","getRippleColor","rippleColor","colors","onSurface","alpha","dark","text","getTouchableRippleColors","calculatedUnderlayColor"],"sources":["utils.ts"],"sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\nconst getUnderlayColor = ({\n  theme,\n  calculatedRippleColor,\n  underlayColor,\n}: {\n  theme: Theme;\n  calculatedRippleColor: string;\n  underlayColor?: string;\n}) => {\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  rippleColor,\n}: {\n  theme: Theme;\n  rippleColor?: string;\n}) => {\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport const getTouchableRippleColors = ({\n  theme,\n  rippleColor,\n  underlayColor,\n}: {\n  theme: Theme;\n  rippleColor?: string;\n  underlayColor?: string;\n}) => {\n  const calculatedRippleColor = getRippleColor({ theme, rippleColor });\n  return {\n    calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme,\n      calculatedRippleColor,\n      underlayColor,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}