{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButton = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _IconButton = _interopRequireDefault(require(\"../IconButton/IconButton\"));\n\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      theme = _ref.theme,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      value = _ref.value,\n      status = _ref.status,\n      _onPress = _ref.onPress,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = (0, _utils.getToggleButtonColor)({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n    return React.createElement(_IconButton.default, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style]\n    }, rest));\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ToggleButton);\n\nexports.default = _default;\nvar ToggleButtonWithTheme = (0, _theming.withTheme)(ToggleButton);\nexports.ToggleButton = ToggleButtonWithTheme;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAWR;EAAA,IAVXC,IAUW,QAVXA,IAUW;EAAA,IATXC,IASW,QATXA,IASW;EAAA,IARXC,KAQW,QARXA,KAQW;EAAA,IAPXC,kBAOW,QAPXA,kBAOW;EAAA,IANXC,QAMW,QANXA,QAMW;EAAA,IALXC,KAKW,QALXA,KAKW;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,MAGW,QAHXA,MAGW;EAAA,IAFXC,QAEW,QAFXA,OAEW;EAAA,IADRC,IACQ;EACX,IAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;EAEA,OACEC,oBAACC,4CAAyBC,QAA1B,QACIC,iBAAD,EAAuE;IACtE,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACT,KAARS,KAAkBT,KAA7BS,IAAuCR,MAAM,KAAK,SADrD;IAGA,IAAMU,eAAe,GAAGC,iCAAqB;MAAEhB,KAAF,EAAEA,KAAF;MAASc;IAAT,CAArBE,CAAxB;IACA,IAAMC,WAAW,GAAGjB,KAAK,CAACkB,IAANlB,GAChBA,KAAK,CAACmB,MAANnB,CAAaoB,OADGpB,GAEhBqB,oBAAMrB,KAAK,CAACsB,IAANtB,GAAauB,aAAbvB,GAAqBwB,aAA3BH,EACGI,KADHJ,CACS,IADTA,EAEGK,GAFHL,GAGGM,MAHHN,EAFJ;IAOA,OACEX,oBAACkB,mBAAD;MACEC,UAAU,EAAE,KADd;MAEE/B,IAAI,EAAEA,IAFR;MAGEQ,OAAO,EAAGwB,kBAAD,EAAwC;QAC/C,IAAIxB,QAAJ,EAAa;UACXA,QAAO,CAACwB,CAAD,CAAPxB;QACD;;QAED,IAAIO,OAAJ,EAAa;UACXA,OAAO,CAACkB,aAARlB,CAAsB,CAACC,OAAD,GAAWV,KAAX,GAAmB,IAAzCS;QACD;MAVL;MAYEd,IAAI,EAAEA,IAZR;MAaEE,kBAAkB,EAAEA,kBAbtB;MAcE+B,kBAAkB,EAAE;QAAE9B,QAAF,EAAEA,QAAF;QAAY+B,QAAQ,EAAEnB;MAAtB,CAdtB;MAeEZ,QAAQ,EAAEA,QAfZ;MAgBEC,KAAK,EAAE,CACL+B,MAAM,CAACC,OADF,EAEL;QACEpB,eADF,EACEA,eADF;QAEEP,YAFF,EAEEA,YAFF;QAGES;MAHF,CAFK,EAOLd,KAPK;IAhBT,GAyBMI,IAzBN,EADF;EAbJ,EADF;AAdF;;AA8DA,IAAM2B,MAAM,GAAGE,wBAAWC,MAAXD,CAAkB;EAC/BD,OAAO,EAAE;IACPG,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlBJ,CAAf;;eAQeK,wBAAU5C,YAAV4C,C;;;AAGf,IAAMC,qBAAqB,GAAGD,wBAAU5C,YAAV4C,CAA9B","names":["ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","React","ToggleButtonGroupContext","Consumer","context","checked","backgroundColor","getToggleButtonColor","borderColor","isV3","colors","outline","color","dark","white","black","alpha","rgb","string","IconButton","borderless","e","onValueChange","accessibilityState","selected","styles","content","StyleSheet","create","width","height","margin","withTheme","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { IconSource } from '../Icon';\nimport type { Theme } from '../../types';\nimport { getToggleButtonColor } from './utils';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        const backgroundColor = getToggleButtonColor({ theme, checked });\n        const borderColor = theme.isV3\n          ? theme.colors.outline\n          : color(theme.dark ? white : black)\n              .alpha(0.29)\n              .rgb()\n              .string();\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor,\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"script"}