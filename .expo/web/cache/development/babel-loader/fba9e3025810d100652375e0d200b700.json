{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCardCoverStyle = exports.getCardColors = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar getCardCoverStyle = function getCardCoverStyle(_ref) {\n  var theme = _ref.theme,\n      index = _ref.index,\n      total = _ref.total;\n  var isV3 = theme.isV3,\n      roundness = theme.roundness;\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness\n      };\n    }\n\n    if (isV3) {\n      return {\n        borderRadius: roundness\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness\n    };\n  }\n\n  return undefined;\n};\n\nexports.getCardCoverStyle = getCardCoverStyle;\n\nvar getBorderColor = function getBorderColor(_ref2) {\n  var theme = _ref2.theme;\n\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return (0, _color.default)(_colors.white).alpha(0.12).rgb().string();\n  }\n\n  return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref3) {\n  var theme = _ref3.theme,\n      isMode = _ref3.isMode;\n\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n\n    return theme.colors.surface;\n  }\n\n  return undefined;\n};\n\nvar getCardColors = function getCardColors(_ref4) {\n  var theme = _ref4.theme,\n      mode = _ref4.mode;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme: theme,\n      isMode: isMode\n    }),\n    borderColor: getBorderColor({\n      theme: theme\n    })\n  };\n};\n\nexports.getCardColors = getCardColors;","map":{"version":3,"sources":["utils.tsx"],"names":["getCardCoverStyle","total","roundness","index","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","getBorderColor","theme","color","getBackgroundColor","isMode","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"mappings":";;;;;;;AAAA;;AACA;;AAKO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAQ3B;EAR4B,IAAA,KAAA,GAQ5B,IAR4B,CAAA,KAAA;EAAA,IAAA,KAAA,GAQ5B,IAR4B,CAAA,KAAA;EAAA,IAGhCC,KAHgC,GAQ5B,IAR4B,CAGhCA,KAHgC;EAShC,IAAM,IAAN,GAAA,KAAA,CAAM,IAAN;EAAA,IAAcC,SAAd,GAAA,KAAA,CAAcA,SAAd;;EAEA,IAAIC,KAAK,KAAT,CAAA,EAAiB;IACf,IAAIF,KAAK,KAAT,CAAA,EAAiB;MACf,OAAO;QACLG,YAAY,EAAEF;MADT,CAAP;IAGD;;IAED,IAAA,IAAA,EAAU;MACR,OAAO;QACLE,YAAY,EAAEF;MADT,CAAP;IAGD;;IAED,OAAO;MACLG,mBAAmB,EADd,SAAA;MAELC,oBAAoB,EAAEJ;IAFjB,CAAP;EAID;;EAED,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6BC,KAAK,KAAKF,KAAK,GAAhD,CAAA,EAAsD;IACpD,OAAO;MACLM,sBAAsB,EAAEL;IADnB,CAAP;EAGD;;EAED,OAAA,SAAA;AApCK,CAAA;;;;AAuCP,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAAiC;EAAhC,IAAEC,KAAF,GAAgC,KAAhC,CAAEA,KAAF;;EACtB,IAAIA,KAAK,CAAT,IAAA,EAAgB;IACd,OAAOA,KAAK,CAALA,MAAAA,CAAP,OAAA;EACD;;EAED,IAAIA,KAAK,CAAT,IAAA,EAAgB;IACd,OAAOC,IAAAA,cAAAA,EAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;EACD;;EACD,OAAOA,IAAAA,cAAAA,EAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAP,MAAOA,EAAP;AARF,CAAA;;AAWA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAMrB;EANsB,IAAA,KAAA,GAMtB,KANsB,CAAA,KAAA;EAAA,IAE1BC,MAF0B,GAMtB,KANsB,CAE1BA,MAF0B;;EAO1B,IAAIH,KAAK,CAAT,IAAA,EAAgB;IACd,IAAIG,MAAM,CAAV,WAAU,CAAV,EAAyB;MACvB,OAAOH,KAAK,CAALA,MAAAA,CAAP,cAAA;IACD;;IACD,OAAOA,KAAK,CAALA,MAAAA,CAAP,OAAA;EACD;;EACD,OAAA,SAAA;AAbF,CAAA;;AAgBO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAMvB;EANwB,IAAA,KAAA,GAMxB,KANwB,CAAA,KAAA;EAAA,IAE5BC,IAF4B,GAMxB,KANwB,CAE5BA,IAF4B;;EAO5B,IAAMF,MAAM,GAAIG,SAAVH,MAAUG,CAAAA,aAAD,EAA6B;IAC1C,OAAOD,IAAI,KAAX,aAAA;EADF,CAAA;;EAIA,OAAO;IACLE,eAAe,EAAEL,kBAAkB,CAAC;MAClCF,KADkC,EAClCA,KADkC;MAElCG,MAAAA,EAAAA;IAFkC,CAAD,CAD9B;IAKLK,WAAW,EAAET,cAAc,CAAC;MAAEC,KAAAA,EAAAA;IAAF,CAAD;EALtB,CAAP;AAXK,CAAA","sourcesContent":["import color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: Theme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    if (isV3) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: Theme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: Theme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    return theme.colors.surface;\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: Theme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}