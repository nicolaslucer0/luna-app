{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ListAccordionGroupContext = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ListAccordionGroupContext = React.createContext(null);\nexports.ListAccordionGroupContext = ListAccordionGroupContext;\n\nvar ListAccordionGroup = function ListAccordionGroup(_ref) {\n  var expandedIdProp = _ref.expandedId,\n      onAccordionPress = _ref.onAccordionPress,\n      children = _ref.children;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      expandedId = _React$useState2[0],\n      setExpandedId = _React$useState2[1];\n\n  var onAccordionPressDefault = function onAccordionPressDefault(newExpandedId) {\n    setExpandedId(function (currentExpandedId) {\n      return currentExpandedId === newExpandedId ? undefined : newExpandedId;\n    });\n  };\n\n  return React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\nvar _default = ListAccordionGroup;\nexports.default = _default;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","onAccordionPressDefault","newExpandedId","setExpandedId","currentExpandedId","expandedIdProp","onAccordionPress"],"mappings":";;;;;;;;;AAAA;;;;;;AAsBO,IAAMA,yBAAyB,GACpCC,KAAK,CAALA,aAAAA,CADK,IACLA,CADK;;;AAwCP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAId;EAJe,IAAA,cAAA,GAIf,IAJe,CAC1BC,UAD0B;EAAA,IAAA,gBAAA,GAIf,IAJe,CAAA,gBAAA;EAAA,IAG1BC,QAH0B,GAIf,IAJe,CAG1BA,QAH0B;;EAK1B,sBAAoCH,KAAK,CAALA,QAAAA,CAApC,SAAoCA,CAApC;EAAA;EAAA,IAAM,UAAN;EAAA,IAAM,aAAN;;EAIA,IAAMI,uBAAuB,GAAIC,SAA3BD,uBAA2BC,CAAAA,aAAD,EAAoC;IAClEC,aAAa,CAAEC,UAAAA,iBAAD;MAAA,OACZA,iBAAiB,KAAjBA,aAAAA,GAAAA,SAAAA,GADFD,aAAc;IAAA,CAAD,CAAbA;EADF,CAAA;;EAMA,OACE,KAAA,CAAA,aAAA,CAAC,yBAAD,CAAA,QAAA,EAAA;IACE,KAAK,EAAE;MACLJ,UAAU,EAAEM,cAAc,IADrB,UAAA;MAELC,gBAAgB,EAAEA,gBAAgB,IAAIL;IAFjC;EADT,CAAA,EADF,QACE,CADF;AAfF,CAAA;;AA2BAH,kBAAkB,CAAlBA,WAAAA,GAAAA,qBAAAA;eAEA,kB","sourcesContent":["import * as React from 'react';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext =\n  React.createContext<ListAccordionGroupContextType>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"script"}