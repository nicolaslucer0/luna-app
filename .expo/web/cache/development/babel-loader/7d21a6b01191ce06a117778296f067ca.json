{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderAppbarContent = exports.modeTextVariant = exports.modeAppbarHeight = exports.getAppbarColor = exports.DEFAULT_APPBAR_HEIGHT = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AppbarContent = _interopRequireDefault(require(\"./AppbarContent\"));\n\nvar _AppbarAction = _interopRequireDefault(require(\"./AppbarAction\"));\n\nvar _AppbarBackAction = _interopRequireDefault(require(\"./AppbarBackAction\"));\n\nvar _overlay = _interopRequireDefault(require(\"../../styles/overlay\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar getAppbarColor = function getAppbarColor(theme, elevation, customBackground, elevated) {\n  var isV3 = theme.isV3,\n      isDarkTheme = theme.dark,\n      mode = theme.mode,\n      colors = theme.colors;\n  var isAdaptiveMode = mode === 'adaptive';\n\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return (0, _overlay.default)(elevation, colors === null || colors === void 0 ? void 0 : colors.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return (0, _color.default)(colors.surface).mix((0, _color.default)(colors.primary), 0.08).rgb().string();\n  }\n\n  return colors.surface;\n};\n\nexports.getAppbarColor = getAppbarColor;\nvar DEFAULT_APPBAR_HEIGHT = 56;\nexports.DEFAULT_APPBAR_HEIGHT = DEFAULT_APPBAR_HEIGHT;\nvar MD3_DEFAULT_APPBAR_HEIGHT = 64;\nvar modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT\n};\nexports.modeAppbarHeight = modeAppbarHeight;\nvar modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge'\n};\nexports.modeTextVariant = modeTextVariant;\n\nvar renderAppbarContent = function renderAppbarContent(_ref) {\n  var children = _ref.children,\n      isDark = _ref.isDark,\n      _ref$shouldCenterCont = _ref.shouldCenterContent,\n      shouldCenterContent = _ref$shouldCenterCont === void 0 ? false : _ref$shouldCenterCont,\n      isV3 = _ref.isV3,\n      renderOnly = _ref.renderOnly,\n      renderExcept = _ref.renderExcept,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'small' : _ref$mode;\n  return _react.default.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).filter(function (child) {\n    return renderExcept ? !renderExcept.includes(child.type) : child;\n  }).filter(function (child) {\n    return renderOnly ? renderOnly.includes(child.type) : child;\n  }).map(function (child, i) {\n    if (!_react.default.isValidElement(child) || ![_AppbarContent.default, _AppbarAction.default, _AppbarBackAction.default].includes(child.type)) {\n      return child;\n    }\n\n    var props = {\n      color: isV3 ? undefined : typeof child.props.color !== 'undefined' ? child.props.color : isDark ? _colors.white : _colors.black\n    };\n\n    if (child.type === _AppbarContent.default) {\n      props.mode = mode;\n      props.style = [isV3 ? i === 0 && !shouldCenterContent && styles.v3Spacing : i !== 0 && styles.v2Spacing, shouldCenterContent && styles.centerAlignedContent, child.props.style];\n    }\n\n    return _react.default.cloneElement(child, props);\n  });\n};\n\nexports.renderAppbarContent = renderAppbarContent;\n\nvar styles = _reactNative.StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center'\n  },\n  v2Spacing: {\n    marginLeft: 8\n  },\n  v3Spacing: {\n    marginLeft: 12\n  }\n});","map":{"version":3,"sources":["utils.ts"],"names":["getAppbarColor","dark","colors","isAdaptiveMode","mode","isDarkTheme","overlay","color","DEFAULT_APPBAR_HEIGHT","MD3_DEFAULT_APPBAR_HEIGHT","modeAppbarHeight","small","medium","large","modeTextVariant","renderAppbarContent","shouldCenterContent","child","renderExcept","renderOnly","React","props","isV3","isDark","black","i","styles","centerAlignedContent","alignItems","v2Spacing","marginLeft","v3Spacing"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport { StyleSheet } from 'react-native';\nimport type { ColorValue, StyleProp, ViewStyle } from 'react-native';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport overlay from '../../styles/overlay';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\nexport type AppbarModes = 'small' | 'medium' | 'large' | 'center-aligned';\n\nexport const getAppbarColor = (\n  theme: Theme,\n  elevation: number,\n  customBackground?: ColorValue,\n  elevated?: boolean\n) => {\n  const { isV3, dark: isDarkTheme, mode, colors } = theme;\n  const isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors?.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return color(colors.surface)\n      .mix(color(colors.primary), 0.08)\n      .rgb()\n      .string();\n  }\n\n  return colors.surface;\n};\n\ntype RenderAppbarContentProps = {\n  children: React.ReactNode;\n  isDark: boolean;\n  shouldCenterContent?: boolean;\n  isV3: boolean;\n  renderOnly?: React.ReactNode[];\n  renderExcept?: React.ReactNode[];\n  mode?: AppbarModes;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\nconst MD3_DEFAULT_APPBAR_HEIGHT = 64;\n\nexport const modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT,\n};\n\nexport const modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge',\n};\n\nexport const renderAppbarContent = ({\n  children,\n  isDark,\n  shouldCenterContent = false,\n  isV3,\n  renderOnly,\n  renderExcept,\n  mode = 'small',\n}: RenderAppbarContentProps) => {\n  return (\n    React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        renderExcept ? !renderExcept.includes(child.type) : child\n      )\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      .filter((child) => (renderOnly ? renderOnly.includes(child.type) : child))\n      .map((child, i) => {\n        if (\n          !React.isValidElement(child) ||\n          ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n            // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n            child.type\n          )\n        ) {\n          return child;\n        }\n\n        const props: {\n          color?: string;\n          style?: StyleProp<ViewStyle>;\n          mode?: AppbarModes;\n        } = {\n          color: isV3\n            ? undefined\n            : typeof child.props.color !== 'undefined'\n            ? child.props.color\n            : isDark\n            ? white\n            : black,\n        };\n\n        if (child.type === AppbarContent) {\n          props.mode = mode;\n          props.style = [\n            isV3\n              ? i === 0 && !shouldCenterContent && styles.v3Spacing\n              : i !== 0 && styles.v2Spacing,\n            shouldCenterContent && styles.centerAlignedContent,\n            child.props.style,\n          ];\n        }\n        return React.cloneElement(child, props);\n      })\n  );\n};\n\nconst styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center',\n  },\n  v2Spacing: {\n    marginLeft: 8,\n  },\n  v3Spacing: {\n    marginLeft: 12,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}