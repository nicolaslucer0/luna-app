{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"height\", \"paddingHorizontal\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\n\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      underlineColor = _ref.underlineColor,\n      activeUnderlineColor = _ref.activeUnderlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isAndroid = _reactNative.Platform.OS === 'android';\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref3.fontSize,\n      fontWeight = _ref3.fontWeight,\n      fontVariant = _ref3.fontVariant,\n      height = _ref3.height,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      textAlign = _ref3.textAlign,\n      viewStyle = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);\n\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n\n  var _calculateFlatInputHo = (0, _helpers.calculateFlatInputHorizontalPadding)({\n    adornmentConfig: adornmentConfig\n  }),\n      paddingLeft = _calculateFlatInputHo.paddingLeft,\n      paddingRight = _calculateFlatInputHo.paddingRight;\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: _constants.FLAT_INPUT_OFFSET,\n    mode: _enums.InputMode.Flat\n  });\n  var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  var containerStyle = {\n    backgroundColor: theme.dark ? (0, _color.default)(colors.background).lighten(0.24).rgb().string() : (0, _color.default)(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactNative.I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: _constants.FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingFlat = (0, _helpers.adjustPaddingFlat)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({\n    height: flatHeight\n  }, paddingFlat, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({\n    height: flatHeight\n  }, paddingFlat, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && !!label && React.createElement(_reactNative.View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: 'text-input-flat'\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps));\n};\n\nvar _default = TextInputFlat;\nexports.default = _default;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(_reactNative.Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","disabled","editable","error","render","props","multiline","rest","isAndroid","Platform","fonts","font","hasActiveOutline","parentState","fontSize","viewStyle","StyleSheet","fontSizeStyle","isPaddingHorizontalPassed","paddingHorizontal","adornmentConfig","getAdornmentConfig","left","right","paddingRight","calculateFlatInputHorizontalPadding","paddingLeft","rightLayout","rightAffixWidth","leftAffixWidth","leftLayout","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","mode","InputMode","Flat","inputTextColor","activeColor","color","colors","placeholderColor","underlineColorCustom","activeUnderlineColor","errorColor","underlineColor","containerStyle","backgroundColor","theme","borderTopLeftRadius","borderTopRightRadius","roundness","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","label","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","styles","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","paddingOffset","maxFontSizeMultiplier","affixTopPosition","AdornmentSide","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","AdornmentType","isTextInputFocused","textStyle","visible","labeled","testID","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","fontVariant","textAlignVertical","textAlign","outline","Underline","transform","scaleY","position","underline","bottom","zIndex","labelContainer","paddingTop","paddingBottom","input","flexGrow","margin","inputFlat","inputFlatDense","patchContainer","densePatchContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n    });\n\n  let inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark\n      ? color(colors.background).lighten(0.24).rgb().string()\n      : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: { paddingLeft, paddingRight },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              fontVariant,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}