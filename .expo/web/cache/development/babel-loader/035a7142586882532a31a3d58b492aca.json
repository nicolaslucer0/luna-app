{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getButtonColors = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar isDark = function isDark(_ref) {\n  var dark = _ref.dark,\n      backgroundColor = _ref.backgroundColor;\n\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !(0, _color.default)(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nvar getButtonBackgroundColor = function getButtonBackgroundColor(_ref2) {\n  var isMode = _ref2.isMode,\n      theme = _ref2.theme,\n      disabled = _ref2.disabled,\n      customButtonColor = _ref2.customButtonColor;\n\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nvar getButtonTextColor = function getButtonTextColor(_ref3) {\n  var isMode = _ref3.isMode,\n      theme = _ref3.theme,\n      disabled = _ref3.disabled,\n      customTextColor = _ref3.customTextColor,\n      backgroundColor = _ref3.backgroundColor,\n      dark = _ref3.dark;\n\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {\n        return isDark({\n          dark: dark,\n          backgroundColor: backgroundColor\n        }) ? _colors.white : _colors.black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({\n      dark: dark,\n      backgroundColor: backgroundColor\n    }) ? _colors.white : _colors.black;\n  }\n\n  return theme.colors.primary;\n};\n\nvar getButtonBorderColor = function getButtonBorderColor(_ref4) {\n  var isMode = _ref4.isMode,\n      disabled = _ref4.disabled,\n      theme = _ref4.theme;\n\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n  }\n\n  return 'transparent';\n};\n\nvar getButtonBorderWidth = function getButtonBorderWidth(_ref5) {\n  var isMode = _ref5.isMode,\n      theme = _ref5.theme;\n\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return _reactNative.StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nvar getButtonColors = function getButtonColors(_ref6) {\n  var theme = _ref6.theme,\n      mode = _ref6.mode,\n      customButtonColor = _ref6.customButtonColor,\n      customTextColor = _ref6.customTextColor,\n      disabled = _ref6.disabled,\n      dark = _ref6.dark;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var backgroundColor = getButtonBackgroundColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customButtonColor: customButtonColor\n  });\n  var textColor = getButtonTextColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customTextColor: customTextColor,\n    backgroundColor: backgroundColor,\n    dark: dark\n  });\n  var borderColor = getButtonBorderColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getButtonBorderWidth({\n    isMode: isMode,\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};\n\nexports.getButtonColors = getButtonColors;","map":{"version":3,"sources":["utils.tsx"],"names":["isDark","backgroundColor","color","getButtonBackgroundColor","customButtonColor","theme","isMode","getButtonTextColor","dark","customTextColor","getButtonBorderColor","disabled","getButtonBorderWidth","StyleSheet","getButtonColors","modeToCompare","mode","textColor","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: Theme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: Theme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}