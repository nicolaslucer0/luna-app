{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _shadow = _interopRequireDefault(require(\"../styles/shadow\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _overlay = _interopRequireWildcard(require(\"../styles/overlay\"));\n\nvar _excluded = [\"style\", \"theme\"],\n    _excluded2 = [\"elevation\", \"children\", \"theme\", \"style\", \"testID\"],\n    _excluded3 = [\"position\", \"alignSelf\", \"top\", \"left\", \"right\", \"bottom\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar MD2Surface = function MD2Surface(_ref) {\n  var style = _ref.style,\n      overrideTheme = _ref.theme,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref3$elevation = _ref3.elevation,\n      elevation = _ref3$elevation === void 0 ? 4 : _ref3$elevation;\n\n  var _useTheme = (0, _theming.useTheme)(overrideTheme),\n      isDarkTheme = _useTheme.dark,\n      mode = _useTheme.mode,\n      colors = _useTheme.colors;\n\n  return React.createElement(_reactNative.Animated.View, _extends({}, rest, {\n    style: [{\n      backgroundColor: isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.surface\n    }, elevation ? (0, _shadow.default)(elevation) : null, style]\n  }));\n};\n\nvar Surface = function Surface(_ref2) {\n  var _ref2$elevation = _ref2.elevation,\n      elevation = _ref2$elevation === void 0 ? 1 : _ref2$elevation,\n      children = _ref2.children,\n      overridenTheme = _ref2.theme,\n      style = _ref2.style,\n      testID = _ref2.testID,\n      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n  var theme = (0, _theming.useTheme)(overridenTheme);\n  if (!theme.isV3) return React.createElement(MD2Surface, _extends({}, props, {\n    theme: theme,\n    style: style\n  }), children);\n  var colors = theme.colors;\n  var inputRange = [0, 1, 2, 3, 4, 5];\n\n  var backgroundColor = function () {\n    var _colors$elevation2;\n\n    if ((0, _overlay.isAnimatedValue)(elevation)) {\n      return elevation.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (elevation) {\n          var _colors$elevation;\n\n          return (_colors$elevation = colors.elevation) === null || _colors$elevation === void 0 ? void 0 : _colors$elevation[\"level\" + elevation];\n        })\n      });\n    }\n\n    return (_colors$elevation2 = colors.elevation) === null || _colors$elevation2 === void 0 ? void 0 : _colors$elevation2[\"level\" + elevation];\n  }();\n\n  if (_reactNative.Platform.OS === 'web') {\n    return React.createElement(_reactNative.Animated.View, _extends({}, props, {\n      testID: testID,\n      style: [{\n        backgroundColor: backgroundColor\n      }, elevation ? (0, _shadow.default)(elevation, theme.isV3) : null, style]\n    }), children);\n  }\n\n  if (_reactNative.Platform.OS === 'android') {\n    var elevationLevel = [0, 3, 6, 9, 12, 15];\n\n    var getElevationAndroid = function getElevationAndroid() {\n      if ((0, _overlay.isAnimatedValue)(elevation)) {\n        return elevation.interpolate({\n          inputRange: inputRange,\n          outputRange: elevationLevel\n        });\n      }\n\n      return elevationLevel[elevation];\n    };\n\n    var _ref4 = _reactNative.StyleSheet.flatten(style) || {},\n        margin = _ref4.margin,\n        padding = _ref4.padding,\n        transform = _ref4.transform,\n        borderRadius = _ref4.borderRadius;\n\n    var outerLayerStyles = {\n      margin: margin,\n      padding: padding,\n      transform: transform,\n      borderRadius: borderRadius\n    };\n    var _sharedStyle = [{\n      backgroundColor: backgroundColor\n    }, style];\n    return React.createElement(_reactNative.Animated.View, _extends({}, props, {\n      testID: testID,\n      style: [{\n        backgroundColor: backgroundColor,\n        transform: transform\n      }, outerLayerStyles, _sharedStyle, {\n        elevation: getElevationAndroid()\n      }]\n    }), children);\n  }\n\n  var iOSShadowOutputRanges = [{\n    shadowOpacity: 0.15,\n    height: [0, 1, 2, 4, 6, 8],\n    shadowRadius: [0, 3, 6, 8, 10, 12]\n  }, {\n    shadowOpacity: 0.3,\n    height: [0, 1, 1, 1, 2, 4],\n    shadowRadius: [0, 1, 2, 3, 3, 4]\n  }];\n  var shadowColor = '#000';\n\n  var _ref5 = _reactNative.StyleSheet.flatten(style) || {},\n      position = _ref5.position,\n      alignSelf = _ref5.alignSelf,\n      top = _ref5.top,\n      left = _ref5.left,\n      right = _ref5.right,\n      bottom = _ref5.bottom,\n      restStyle = (0, _objectWithoutProperties2.default)(_ref5, _excluded3);\n\n  var absoluteStyles = {\n    position: position,\n    alignSelf: alignSelf,\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  var sharedStyle = [{\n    backgroundColor: backgroundColor\n  }, restStyle];\n\n  if ((0, _overlay.isAnimatedValue)(elevation)) {\n    var _inputRange = [0, 1, 2, 3, 4, 5];\n\n    var getStyleForAnimatedShadowLayer = function getStyleForAnimatedShadowLayer(layer) {\n      return {\n        shadowColor: shadowColor,\n        shadowOpacity: elevation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n          extrapolate: 'clamp'\n        }),\n        shadowOffset: {\n          width: 0,\n          height: elevation.interpolate({\n            inputRange: _inputRange,\n            outputRange: iOSShadowOutputRanges[layer].height\n          })\n        },\n        shadowRadius: elevation.interpolate({\n          inputRange: _inputRange,\n          outputRange: iOSShadowOutputRanges[layer].shadowRadius\n        })\n      };\n    };\n\n    return React.createElement(_reactNative.Animated.View, {\n      style: [getStyleForAnimatedShadowLayer(0), absoluteStyles]\n    }, React.createElement(_reactNative.Animated.View, {\n      style: getStyleForAnimatedShadowLayer(1)\n    }, React.createElement(_reactNative.Animated.View, _extends({}, props, {\n      testID: testID,\n      style: sharedStyle\n    }), children)));\n  }\n\n  var getStyleForShadowLayer = function getStyleForShadowLayer(layer) {\n    return {\n      shadowColor: shadowColor,\n      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,\n      shadowOffset: {\n        width: 0,\n        height: iOSShadowOutputRanges[layer].height[elevation]\n      },\n      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation]\n    };\n  };\n\n  return React.createElement(_reactNative.Animated.View, {\n    style: [getStyleForShadowLayer(0), absoluteStyles]\n  }, React.createElement(_reactNative.Animated.View, {\n    style: [getStyleForShadowLayer(1)]\n  }, React.createElement(_reactNative.Animated.View, _extends({}, props, {\n    testID: testID,\n    style: sharedStyle\n  }), children)));\n};\n\nvar _default = Surface;\nexports.default = _default;","map":{"version":3,"sources":["Surface.tsx"],"names":["MD2Surface","theme","rest","elevation","StyleSheet","dark","colors","useTheme","backgroundColor","isDarkTheme","mode","overlay","surface","shadow","Surface","props","style","inputRange","isAnimatedValue","outputRange","Platform","elevationLevel","getElevationAndroid","borderRadius","outerLayerStyles","margin","padding","transform","sharedStyle","iOSShadowOutputRanges","shadowOpacity","height","shadowRadius","shadowColor","restStyle","absoluteStyles","position","alignSelf","top","right","bottom","left","getStyleForAnimatedShadowLayer","layer","extrapolate","shadowOffset","width","getStyleForShadowLayer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\nimport shadow from '../styles/shadow';\nimport { useTheme } from '../core/theming';\nimport overlay, { isAnimatedValue } from '../styles/overlay';\nimport type { MD3Elevation, Theme } from '../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes shadows and background on iOS and Android.\n   * Used to create UI hierarchy between components.\n   *\n   * Note: In version 2 the `elevation` prop was accepted via `style` prop i.e. `style={{ elevation: 4 }}`.\n   * It's no longer supported with theme version 3 and you should use `elevation` property instead.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst MD2Surface = ({\n  style,\n  theme: overrideTheme,\n  ...rest\n}: Omit<Props, 'elevation'>) => {\n  const { elevation = 4 } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const { dark: isDarkTheme, mode, colors } = useTheme(overrideTheme);\n\n  return (\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors?.surface)\n              : colors?.surface,\n        },\n        elevation ? shadow(elevation) : null,\n        style,\n      ]}\n    />\n  );\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-android.png\" />\n *     <figcaption>Surface on Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-ios.png\" />\n *     <figcaption>Surface on iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface} elevation={4}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *   },\n * });\n * ```\n */\nconst Surface = ({\n  elevation = 1,\n  children,\n  theme: overridenTheme,\n  style,\n  testID,\n  ...props\n}: Props) => {\n  const theme = useTheme(overridenTheme);\n\n  if (!theme.isV3)\n    return (\n      <MD2Surface {...props} theme={theme} style={style}>\n        {children}\n      </MD2Surface>\n    );\n\n  const { colors } = theme;\n\n  const inputRange = [0, 1, 2, 3, 4, 5];\n\n  const backgroundColor = (() => {\n    if (isAnimatedValue(elevation)) {\n      return elevation.interpolate({\n        inputRange,\n        outputRange: inputRange.map((elevation) => {\n          return colors.elevation?.[`level${elevation as MD3Elevation}`];\n        }),\n      });\n    }\n\n    return colors.elevation?.[`level${elevation}`];\n  })();\n\n  if (Platform.OS === 'web') {\n    return (\n      <Animated.View\n        {...props}\n        testID={testID}\n        style={[\n          { backgroundColor },\n          elevation ? shadow(elevation, theme.isV3) : null,\n          style,\n        ]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  if (Platform.OS === 'android') {\n    const elevationLevel = [0, 3, 6, 9, 12, 15];\n\n    const getElevationAndroid = () => {\n      if (isAnimatedValue(elevation)) {\n        return elevation.interpolate({\n          inputRange,\n          outputRange: elevationLevel,\n        });\n      }\n\n      return elevationLevel[elevation];\n    };\n\n    const { margin, padding, transform, borderRadius } = (StyleSheet.flatten(\n      style\n    ) || {}) as ViewStyle;\n\n    const outerLayerStyles = { margin, padding, transform, borderRadius };\n    const sharedStyle = [{ backgroundColor }, style];\n\n    return (\n      <Animated.View\n        {...props}\n        testID={testID}\n        style={[\n          {\n            backgroundColor,\n            transform,\n          },\n          outerLayerStyles,\n          sharedStyle,\n          {\n            elevation: getElevationAndroid(),\n          },\n        ]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  const iOSShadowOutputRanges = [\n    {\n      shadowOpacity: 0.15,\n      height: [0, 1, 2, 4, 6, 8],\n      shadowRadius: [0, 3, 6, 8, 10, 12],\n    },\n    {\n      shadowOpacity: 0.3,\n      height: [0, 1, 1, 1, 2, 4],\n      shadowRadius: [0, 1, 2, 3, 3, 4],\n    },\n  ];\n\n  const shadowColor = '#000';\n\n  const { position, alignSelf, top, left, right, bottom, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const absoluteStyles = { position, alignSelf, top, right, bottom, left };\n  const sharedStyle = [{ backgroundColor }, restStyle];\n\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 4, 5];\n\n    const getStyleForAnimatedShadowLayer = (layer: 0 | 1) => {\n      return {\n        shadowColor,\n        shadowOpacity: elevation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n          extrapolate: 'clamp',\n        }),\n        shadowOffset: {\n          width: 0,\n          height: elevation.interpolate({\n            inputRange,\n            outputRange: iOSShadowOutputRanges[layer].height,\n          }),\n        },\n        shadowRadius: elevation.interpolate({\n          inputRange,\n          outputRange: iOSShadowOutputRanges[layer].shadowRadius,\n        }),\n      };\n    };\n\n    return (\n      <Animated.View\n        style={[getStyleForAnimatedShadowLayer(0), absoluteStyles]}\n      >\n        <Animated.View style={getStyleForAnimatedShadowLayer(1)}>\n          <Animated.View {...props} testID={testID} style={sharedStyle}>\n            {children}\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n    );\n  }\n\n  const getStyleForShadowLayer = (layer: 0 | 1) => {\n    return {\n      shadowColor,\n      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,\n      shadowOffset: {\n        width: 0,\n        height: iOSShadowOutputRanges[layer].height[elevation],\n      },\n      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation],\n    };\n  };\n\n  return (\n    <Animated.View style={[getStyleForShadowLayer(0), absoluteStyles]}>\n      <Animated.View style={[getStyleForShadowLayer(1)]}>\n        <Animated.View {...props} testID={testID} style={sharedStyle}>\n          {children}\n        </Animated.View>\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"script"}