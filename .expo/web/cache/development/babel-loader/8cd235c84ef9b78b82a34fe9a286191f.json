{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.FAB = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"../ActivityIndicator\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"../CrossFadeIcon\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _getContrastingColor = _interopRequireDefault(require(\"../../utils/getContrastingColor\"));\n\nvar _excluded = [\"small\", \"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"animated\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"loading\", \"testID\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\n_getContrastingColor.default;\n\nvar FAB = function FAB(_ref) {\n  var small = _ref.small,\n      icon = _ref.icon,\n      label = _ref.label,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      accessibilityState = _ref.accessibilityState,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? true : _ref$animated,\n      customColor = _ref.color,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      loading = _ref.loading,\n      testID = _ref.testID,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      visibility = _React$useRef.current;\n\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n  var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref2$backgroundColor;\n\n  var foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');\n  }\n\n  var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [{\n      backgroundColor: backgroundColor,\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }]\n    }, styles.container, disabled && styles.disabled, style],\n    pointerEvents: visible ? 'auto' : 'none'\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: Object.assign({}, accessibilityState, {\n      disabled: disabled\n    }),\n    style: styles.touchable,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n    pointerEvents: \"none\"\n  }, icon && loading !== true ? React.createElement(IconComponent, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  }) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: 18,\n    color: foregroundColor\n  }) : null, label ? React.createElement(_Text.default, {\n    selectable: false,\n    style: [styles.label, uppercase && styles.uppercaseLabel, Object.assign({\n      color: foregroundColor\n    }, theme.fonts.medium)]\n  }, label) : null)));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(FAB);\n\nexports.default = _default;\nvar FABWithTheme = (0, _theming.withTheme)(FAB);\nexports.FAB = FABWithTheme;","map":{"version":3,"sources":["FAB.tsx"],"names":["getContrastingColor","FAB","accessibilityLabel","animated","color","visible","uppercase","rest","current","visibility","React","Animated","scale","theme","toValue","duration","useNativeDriver","IconComponent","disabledColor","backgroundColor","disabled","accent","StyleSheet","foregroundColor","rippleColor","opacity","transform","styles","testID","label","small","loading","medium","container","borderRadius","elevation","touchable","standard","height","width","extended","paddingHorizontal","content","flexDirection","alignItems","justifyContent","marginHorizontal","uppercaseLabel","textTransform","withTheme","FABWithTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport type { $RemoveChildren } from '../../types';\n\ngetContrastingColor;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = getContrastingColor(\n      backgroundColor,\n      white,\n      'rgba(0, 0, 0, .54)'\n    );\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]},"metadata":{},"sourceType":"script"}