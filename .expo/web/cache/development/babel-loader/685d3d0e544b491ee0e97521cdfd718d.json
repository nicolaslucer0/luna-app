{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SegmentedButtons = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _SegmentedButtonItem = _interopRequireDefault(require(\"./SegmentedButtonItem\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n      onValueChange = _ref.onValueChange,\n      buttons = _ref.buttons,\n      multiSelect = _ref.multiSelect,\n      density = _ref.density,\n      style = _ref.style;\n  var theme = (0, _theming.useTheme)();\n  return React.createElement(_reactNative.View, {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n\n    var onPress = function onPress(e) {\n      var _item$onPress;\n\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat((0, _toConsumableArray2.default)(value), [item.value]) : item.value;\n      onValueChange(nextValue);\n    };\n\n    return React.createElement(_SegmentedButtonItem.default, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle]\n    }));\n  }));\n};\n\nexports.SegmentedButtons = SegmentedButtons;\n\nvar styles = _reactNative.StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\n\nvar _default = SegmentedButtons;\nexports.default = _default;","map":{"version":3,"sources":["SegmentedButtons.tsx"],"names":["SegmentedButtons","style","theme","styles","disabledChildStyle","getDisabledSegmentedButtonStyle","buttons","index","i","segment","checked","multiSelect","Array","value","item","onPress","e","nextValue","val","onValueChange","row","flexDirection"],"mappings":";;;;;;;;;AAAA;;AACA;;AAOA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuGA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAOZ;EAPa,IAAA,KAAA,GAOb,IAPa,CAAA,KAAA;EAAA,IAAA,aAAA,GAOb,IAPa,CAAA,aAAA;EAAA,IAAA,OAAA,GAOb,IAPa,CAAA,OAAA;EAAA,IAAA,WAAA,GAOb,IAPa,CAAA,WAAA;EAAA,IAAA,OAAA,GAOb,IAPa,CAAA,OAAA;EAAA,IAMxBC,KANwB,GAOb,IAPa,CAMxBA,KANwB;EAQxB,IAAMC,KAAK,GAAX,IAAA,iBAAA,GAAA;EACA,OACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;IAAM,KAAK,EAAE,CAACC,MAAM,CAAP,GAAA,EAAA,KAAA;EAAb,CAAA,EACG,OAAO,CAAP,GAAA,CAAY,UAAA,IAAA,EAAA,CAAA,EAAa;IACxB,IAAMC,kBAAkB,GAAGC,IAAAA,sCAAAA,EAAgC;MACzDH,KADyD,EACzDA,KADyD;MAEzDI,OAFyD,EAEzDA,OAFyD;MAGzDC,KAAK,EAAEC;IAHkD,CAAhCH,CAA3B;IAKA,IAAMI,OAAO,GACXD,CAAC,KAADA,CAAAA,GAAAA,OAAAA,GAAoBA,CAAC,KAAKF,OAAO,CAAPA,MAAAA,GAANE,CAAAA,GAAAA,MAAAA,GADtB,SAAA;IAGA,IAAME,OAAO,GACXC,WAAW,IAAIC,KAAK,CAALA,OAAAA,CAAfD,KAAeC,CAAfD,GACIE,KAAK,CAALA,QAAAA,CAAeC,IAAI,CADvBH,KACIE,CADJF,GAEIE,KAAK,KAAKC,IAAI,CAHpB,KAAA;;IAKA,IAAMC,OAAO,GAAIC,SAAXD,OAAWC,CAAAA,CAAD,EAA8B;MAAA,IAAA,aAAA;;MAC5C,CAAA,aAAA,GAAA,IAAI,CAAJ,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;MAEA,IAAMC,SAAS,GACbN,WAAW,IAAIC,KAAK,CAALA,OAAAA,CAAfD,KAAeC,CAAfD,GACID,OAAO,GACLG,KAAK,CAALA,MAAAA,CAAcK,UAAAA,GAAD;QAAA,OAASJ,IAAI,CAAJA,KAAAA,KADjB,GACQ;MAAA,CAAbD,CADK,8CAEL,KAFK,IAEMC,IAAI,CAHrBH,KACW,EADXA,GAIIG,IAAI,CARkC,KAG5C;MAQAK,aAAa,CAAbA,SAAa,CAAbA;IAXF,CAAA;;IAcA,OACE,KAAA,CAAA,aAAA,CAAA,4BAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;MAEE,GAAG,EAFL,CAAA;MAGE,OAAO,EAHT,OAAA;MAIE,OAAO,EAJT,OAAA;MAKE,OAAO,EALT,OAAA;MAME,OAAO,EANT,OAAA;MAOE,KAAK,EAAE,CAACL,IAAI,CAAL,KAAA,EAAA,kBAAA;IAPT,CAAA,CAAA,CADF;EA9BN,CAEK,CADH,CADF;AATF,CAAA;;;;AAuDA,IAAMX,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BiB,GAAG,EAAE;IACHC,aAAa,EAAE;EADZ;AAD0B,CAAlB,CAAf;;eAMA,gB","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * @supported Available in v5.x\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SegmentedButtons\n *      value={value}\n *      onValueChange={setValue}\n *      buttons={[\n *        {\n *          value: 'walk',\n *          label: 'Walking',\n *        },\n *        {\n *          value: 'train',\n *          label: 'Transit',\n *        },\n *      ]}\n *      style={styles.group}\n *    />\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n}: Props) => {\n  const theme = useTheme();\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"]},"metadata":{},"sourceType":"script"}