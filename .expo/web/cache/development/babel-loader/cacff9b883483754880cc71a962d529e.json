{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NativeStackView = _interopRequireDefault(require(\"../views/NativeStackView\"));\n\nvar _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction NativeStackNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(Object.assign({}, _native.StackActions.popToTop(), {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(_NativeStackView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAWA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,oBAAT,OAO8B;EAAA,IAN5BC,EAM4B,QAN5BA,EAM4B;EAAA,IAL5BC,gBAK4B,QAL5BA,gBAK4B;EAAA,IAJ5BC,QAI4B,QAJ5BA,QAI4B;EAAA,IAH5BC,eAG4B,QAH5BA,eAG4B;EAAA,IAF5BC,aAE4B,QAF5BA,aAE4B;EAAA,IADzBC,IACyB;;EAC5B,4BACEC,kCAMEC,mBANFD,EAMe;IACbN,EADa,EACbA,EADa;IAEbC,gBAFa,EAEbA,gBAFa;IAGbC,QAHa,EAGbA,QAHa;IAIbC,eAJa,EAIbA,eAJa;IAKbC;EALa,CANfE,CADF;EAAA,IAAQE,KAAR,yBAAQA,KAAR;EAAA,IAAeC,WAAf,yBAAeA,WAAf;EAAA,IAA4BC,UAA5B,yBAA4BA,UAA5B;EAAA,IAAwCC,iBAAxC,yBAAwCA,iBAAxC;;EAeAC,KAAK,CAACC,SAAND,CACE;IAAA;;IAAA,OAEEF,UAFF,SAEEA,cAFF,WAEEA,GAFF,MAEEA,GAFF,yBAEEA,UAAU,CAAEI,WAFd,0DAEEC,uCAA0B,UAA1B,EAAuCC,WAAD,EAAY;MAChD,IAAMC,SAAS,GAAGP,UAAU,CAACO,SAAXP,EAAlB;MAIAQ,qBAAqB,CAAC,YAAM;QAC1B,IACEV,KAAK,CAACW,KAANX,GAAc,CAAdA,IACAS,SADAT,IAEA,CAAEQ,CAAD,CAAkCI,gBAHrC,EAIE;UAGAV,UAAU,CAACW,QAAXX,mBACKY,qBAAaC,QAAbD,EADLZ;YAEEc,MAAM,EAAEhB,KAAK,CAACiB;UAFhBf;QAID;MAZkB,EAArBQ;IALQ,CAAV,CAFF;EADF,GAuBE,CAACR,UAAD,EAAaF,KAAK,CAACW,KAAnB,EAA0BX,KAAK,CAACiB,GAAhC,CAvBFb;EA0BA,OACEA,oBAACD,iBAAD,QACEC,oBAACc,wBAAD,eACMrB,IADN;IAEEG,KAAK,EAAEA,KAFT;IAGEE,UAAU,EAAEA,UAHd;IAIED,WAAW,EAAEA;EAJf,GADF,CADF;AAUD;;eAEckB,oCAKb5B,oBALa4B,C","names":["NativeStackNavigator","id","initialRouteName","children","screenListeners","screenOptions","rest","useNavigationBuilder","StackRouter","state","descriptors","navigation","NavigationContent","React","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","NativeStackView","createNavigatorFactory"],"sources":["createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"script"}