{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _colors = require(\"../styles/themes/v2/colors\");\n\nvar _excluded = [\"leftInset\", \"horizontalInset\", \"style\", \"theme\", \"bold\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Divider = function Divider(_ref) {\n  var leftInset = _ref.leftInset,\n      _ref$horizontalInset = _ref.horizontalInset,\n      horizontalInset = _ref$horizontalInset === void 0 ? false : _ref$horizontalInset,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$bold = _ref.bold,\n      bold = _ref$bold === void 0 ? false : _ref$bold,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isDarkTheme = theme.dark,\n      isV3 = theme.isV3;\n  var dividerColor = isV3 ? theme.colors.surfaceVariant : (0, _color.default)(isDarkTheme ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n  return React.createElement(_reactNative.View, _extends({}, rest, {\n    style: [{\n      height: _reactNative.StyleSheet.hairlineWidth,\n      backgroundColor: dividerColor\n    }, leftInset && styles.leftInset, isV3 && horizontalInset && styles.horizontalInset, isV3 && bold && styles.bold, style]\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  leftInset: {\n    marginLeft: 72\n  },\n  horizontalInset: {\n    marginLeft: 28,\n    marginRight: 28\n  },\n  bold: {\n    height: 1\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Divider);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,IAAMA,OAAO,GAAG,SAAVA,OAAU,OAOH;EAAA,IANXC,SAMW,QANXA,SAMW;EAAA,gCALXC,eAKW;EAAA,IALXA,eAKW,qCALO,KAKP;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,KAGW,QAHXA,KAGW;EAAA,qBAFXC,IAEW;EAAA,IAFXA,IAEW,0BAFJ,KAEI;EAAA,IADRC,IACQ;EACX,IAAcC,WAAd,GAAoCH,KAApC,CAAQI,IAAR;EAAA,IAA2BC,IAA3B,GAAoCL,KAApC,CAA2BK,IAA3B;EAEA,IAAMC,YAAY,GAAGD,IAAI,GACrBL,KAAK,CAACO,MAANP,CAAaQ,cADQ,GAErBC,oBAAMN,WAAW,GAAGO,aAAH,GAAWC,aAA5BF,EACGG,KADHH,CACS,IADTA,EAEGI,GAFHJ,GAGGK,MAHHL,EAFJ;EAOA,OACEM,oBAACC,iBAAD,eACMd,IADN;IAEEH,KAAK,EAAE,CACL;MAAEkB,MAAM,EAAEC,wBAAWC,aAArB;MAAoCC,eAAe,EAAEd;IAArD,CADK,EAELT,SAAS,IAAIwB,MAAM,CAACxB,SAFf,EAGLQ,IAAI,IAAIP,eAARO,IAA2BgB,MAAM,CAACvB,eAH7B,EAILO,IAAI,IAAIJ,IAARI,IAAgBgB,MAAM,CAACpB,IAJlB,EAKLF,KALK;EAFT,GADF;AAjBF;;AA+BA,IAAMsB,MAAM,GAAGH,wBAAWI,MAAXJ,CAAkB;EAC/BrB,SAAS,EAAE;IACT0B,UAAU,EAAE;EADH,CADoB;EAI/BzB,eAAe,EAAE;IACfyB,UAAU,EAAE,EADG;IAEfC,WAAW,EAAE;EAFE,CAJc;EAQ/BvB,IAAI,EAAE;IACJgB,MAAM,EAAE;EADJ;AARyB,CAAlBC,CAAf;;eAaeO,wBAAU7B,OAAV6B,C","names":["Divider","leftInset","horizontalInset","style","theme","bold","rest","isDarkTheme","dark","isV3","dividerColor","colors","surfaceVariant","color","white","black","alpha","rgb","string","React","View","height","StyleSheet","hairlineWidth","backgroundColor","styles","create","marginLeft","marginRight","withTheme"],"sources":["Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/themes/v2/colors';\nimport type { $RemoveChildren, Theme } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * @renamed Renamed from 'inset' to 'leftInset` in v5.x\n   * Whether divider has a left inset.\n   */\n  leftInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider has a horizontal inset on both sides.\n   */\n  horizontalInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider should be bolded.\n   */\n  bold?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({\n  leftInset,\n  horizontalInset = false,\n  style,\n  theme,\n  bold = false,\n  ...rest\n}: Props) => {\n  const { dark: isDarkTheme, isV3 } = theme;\n\n  const dividerColor = isV3\n    ? theme.colors.surfaceVariant\n    : color(isDarkTheme ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n\n  return (\n    <View\n      {...rest}\n      style={[\n        { height: StyleSheet.hairlineWidth, backgroundColor: dividerColor },\n        leftInset && styles.leftInset,\n        isV3 && horizontalInset && styles.horizontalInset,\n        isV3 && bold && styles.bold,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72,\n  },\n  horizontalInset: {\n    marginLeft: 28,\n    marginRight: 28,\n  },\n  bold: {\n    height: 1,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"script"}