{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Modal = _interopRequireDefault(require(\"../Modal\"));\n\nvar _DialogContent = _interopRequireDefault(require(\"./DialogContent\"));\n\nvar _DialogActions = _interopRequireDefault(require(\"./DialogActions\"));\n\nvar _DialogIcon = _interopRequireDefault(require(\"./DialogIcon\"));\n\nvar _DialogTitle = _interopRequireDefault(require(\"./DialogTitle\"));\n\nvar _DialogScrollArea = _interopRequireDefault(require(\"./DialogScrollArea\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _overlay = _interopRequireDefault(require(\"../../styles/overlay\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar DIALOG_ELEVATION = 24;\n\nvar Dialog = function Dialog(_ref) {\n  var children = _ref.children,\n      _ref$dismissable = _ref.dismissable,\n      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n      onDismiss = _ref.onDismiss,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      style = _ref.style,\n      theme = _ref.theme;\n  var isV3 = theme.isV3,\n      dark = theme.dark,\n      mode = theme.mode,\n      colors = theme.colors,\n      roundness = theme.roundness;\n  var borderRadius = (isV3 ? 7 : 1) * roundness;\n  var backgroundColorV2 = dark && mode === 'adaptive' ? (0, _overlay.default)(DIALOG_ELEVATION, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.surface;\n  var backgroundColor = isV3 ? theme.colors.elevation.level3 : backgroundColorV2;\n  return React.createElement(_Modal.default, {\n    dismissable: dismissable,\n    onDismiss: onDismiss,\n    visible: visible,\n    contentContainerStyle: [{\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, styles.container, style],\n    theme: theme\n  }, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (isV3) {\n      if (i === 0 && React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          style: [{\n            marginTop: 24\n          }, child.props.style]\n        });\n      }\n    }\n\n    if (i === 0 && React.isValidElement(child) && child.type === _DialogContent.default) {\n      return React.cloneElement(child, {\n        style: [{\n          paddingTop: 24\n        }, child.props.style]\n      });\n    }\n\n    return child;\n  }));\n};\n\nDialog.Content = _DialogContent.default;\nDialog.Actions = _DialogActions.default;\nDialog.Title = _DialogTitle.default;\nDialog.ScrollArea = _DialogScrollArea.default;\nDialog.Icon = _DialogIcon.default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginVertical: _reactNative.Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Dialog);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","isV3","dark","mode","colors","roundness","borderRadius","backgroundColorV2","overlay","surface","backgroundColor","elevation","level3","React","Modal","contentContainerStyle","styles","container","Children","toArray","filter","child","map","i","isValidElement","cloneElement","marginTop","props","type","DialogContent","paddingTop","Content","Actions","DialogActions","Title","DialogTitle","ScrollArea","DialogScrollArea","Icon","DialogIcon","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","justifyContent","withTheme"],"sources":["Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\nimport DialogIcon from './DialogIcon';\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\nimport type { Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"small\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => {\n  const { isV3, dark, mode, colors, roundness } = theme;\n\n  const borderRadius = (isV3 ? 7 : 1) * roundness;\n\n  const backgroundColorV2 =\n    dark && mode === 'adaptive'\n      ? overlay(DIALOG_ELEVATION, colors?.surface)\n      : colors?.surface;\n  const backgroundColor = isV3\n    ? theme.colors.elevation.level3\n    : backgroundColorV2;\n\n  return (\n    <Modal\n      dismissable={dismissable}\n      onDismiss={onDismiss}\n      visible={visible}\n      contentContainerStyle={[\n        {\n          borderRadius,\n          backgroundColor,\n        },\n        styles.container,\n        style,\n      ]}\n      theme={theme}\n    >\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (isV3) {\n            if (i === 0 && React.isValidElement(child)) {\n              return React.cloneElement(child, {\n                style: [{ marginTop: 24 }, child.props.style],\n              });\n            }\n          }\n\n          if (\n            i === 0 &&\n            React.isValidElement(child) &&\n            child.type === DialogContent\n          ) {\n            // Dialog content is the first item, so we add a top padding\n            return React.cloneElement(child, {\n              style: [{ paddingTop: 24 }, child.props.style],\n            });\n          }\n\n          return child;\n        })}\n    </Modal>\n  );\n};\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n// @component ./DialogIcon.tsx\nDialog.Icon = DialogIcon;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"script"}