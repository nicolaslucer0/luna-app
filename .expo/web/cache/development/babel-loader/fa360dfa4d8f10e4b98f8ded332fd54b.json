{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar _DrawerProgressContext = _interopRequireDefault(require(\"../../utils/DrawerProgressContext\"));\n\nvar _GestureHandler = require(\"../GestureHandler\");\n\nvar _Overlay = _interopRequireDefault(require(\"./Overlay\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Clock = _reactNativeReanimated.default.Clock,\n    Value = _reactNativeReanimated.default.Value,\n    onChange = _reactNativeReanimated.default.onChange,\n    clockRunning = _reactNativeReanimated.default.clockRunning,\n    startClock = _reactNativeReanimated.default.startClock,\n    stopClock = _reactNativeReanimated.default.stopClock,\n    spring = _reactNativeReanimated.default.spring,\n    abs = _reactNativeReanimated.default.abs,\n    add = _reactNativeReanimated.default.add,\n    and = _reactNativeReanimated.default.and,\n    block = _reactNativeReanimated.default.block,\n    call = _reactNativeReanimated.default.call,\n    cond = _reactNativeReanimated.default.cond,\n    divide = _reactNativeReanimated.default.divide,\n    eq = _reactNativeReanimated.default.eq,\n    event = _reactNativeReanimated.default.event,\n    greaterThan = _reactNativeReanimated.default.greaterThan,\n    lessThan = _reactNativeReanimated.default.lessThan,\n    max = _reactNativeReanimated.default.max,\n    min = _reactNativeReanimated.default.min,\n    multiply = _reactNativeReanimated.default.multiply,\n    neq = _reactNativeReanimated.default.neq,\n    or = _reactNativeReanimated.default.or,\n    set = _reactNativeReanimated.default.set,\n    sub = _reactNativeReanimated.default.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new _reactNativeReanimated.default.Value(0);\nvar ANIMATED_ONE = new _reactNativeReanimated.default.Value(1);\n\nvar DrawerView = function (_React$Component) {\n  (0, _inherits2.default)(DrawerView, _React$Component);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DrawerView);\n    _this = _super.apply(this, arguments);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);\n\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getDrawerWidth\", function () {\n      var _this$props = _this.props,\n          drawerStyle = _this$props.drawerStyle,\n          dimensions = _this$props.dimensions;\n\n      var _ref4 = _reactNative.StyleSheet.flatten(drawerStyle) || {},\n          _ref4$width = _ref4.width,\n          width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;\n\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n\n      return typeof width === 'number' ? width : 0;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"clock\", new Clock());\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"interactionHandle\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isSwiping\", new Value(FALSE));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"gestureState\", new Value(_GestureHandler.GestureState.UNDETERMINED));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"touchX\", new Value(0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"velocityX\", new Value(0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"gestureX\", new Value(0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"offsetX\", new Value(0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"currentOpenValue\", _this.props.open);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pendingOpenValue\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isStatusBarHidden\", false);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, Object.assign({}, SPRING_CONFIG, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = (0, _slicedToArray2.default)(_ref, 1),\n            value = _ref5[0];\n\n        var open = Boolean(value);\n\n        _this.handleEndInteraction();\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref2, 1),\n          value = _ref6[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {\n      var _ref7 = (0, _slicedToArray2.default)(_ref3, 1),\n          value = _ref7[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props2 = _this.props,\n          hideStatusBar = _this$props2.hideStatusBarOnOpen,\n          statusBarAnimation = _this$props2.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n\n        _reactNative.StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          open = _this$props3.open,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n          hideStatusBar = _this$props3.hideStatusBarOnOpen;\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          open = _this$props4.open,\n          swipeEnabled = _this$props4.swipeEnabled,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerType = _this$props4.drawerType,\n          swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n          drawerStyle = _this$props4.drawerStyle,\n          overlayStyle = _this$props4.overlayStyle,\n          renderDrawerContent = _this$props4.renderDrawerContent,\n          renderSceneContent = _this$props4.renderSceneContent,\n          gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? _reactNative.I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : _reactNative.I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(_DrawerProgressContext.default.Provider, {\n        value: progress\n      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(_reactNativeReanimated.default.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(_reactNative.View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(_Overlay.default, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(_reactNativeReanimated.default.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(_reactNativeReanimated.default.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(_reactNativeReanimated.default.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: _reactNative.Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\n\nexports.default = DrawerView;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: Object.assign({\n    flex: 1\n  }, _reactNative.Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"mappings":"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","names":["Clock","Animated","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","_defineProperty","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","props","drawerStyle","dimensions","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","GestureState","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","getConstants","isRTL","offset","hitSlop","right","left","progress","React","DrawerProgressContext","Provider","PanGestureHandler","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","View","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","Overlay","onPress","Code","exec","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.getConstants().isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.getConstants().isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"script"}