{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;\nexports.default = createIconSet;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ensureNativeModuleAvailable = _interopRequireDefault(require(\"./ensure-native-module-available\"));\n\nvar _createIconSourceCache = _interopRequireDefault(require(\"./create-icon-source-cache\"));\n\nvar _iconButton = _interopRequireDefault(require(\"./icon-button\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _jsxFileName = \"/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-vector-icons/lib/create-icon-set.js\";\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;\nexports.NativeIconAPI = NativeIconAPI;\nvar DEFAULT_ICON_SIZE = 12;\nexports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;\nvar DEFAULT_ICON_COLOR = 'black';\nexports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;\n\nfunction createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n\n  var fontReference = _reactNative.Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n\n  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));\n\n  var Icon = function (_PureComponent) {\n    (0, _inherits2.default)(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.root = null;\n\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return (0, _jsxRuntime.jsxs)(_reactNative.Text, Object.assign({\n          selectable: false\n        }, props, {\n          children: [glyph, children]\n        }));\n      }\n    }]);\n    return Icon;\n  }(_react.PureComponent);\n\n  Icon.propTypes = {\n    allowFontScaling: _propTypes.default.bool,\n    name: IconNamePropType,\n    size: _propTypes.default.number,\n    color: _propTypes.default.any,\n    children: _propTypes.default.node,\n    style: _propTypes.default.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = (0, _createIconSourceCache.default)();\n\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return glyph;\n  }\n\n  function getImageSourceSync(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    (0, _ensureNativeModuleAvailable.default)();\n    var glyph = resolveGlyph(name);\n    var processedColor = (0, _reactNative.processColor)(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: _reactNative.PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  function getImageSource(_x) {\n    return _getImageSource.apply(this, arguments);\n  }\n\n  function _getImageSource() {\n    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n      (0, _ensureNativeModuleAvailable.default)();\n      var glyph = resolveGlyph(name);\n      var processedColor = (0, _reactNative.processColor)(color);\n      var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n      if (imageSourceCache.has(cacheKey)) {\n        return imageSourceCache.get(cacheKey);\n      }\n\n      try {\n        var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n        var value = {\n          uri: imagePath,\n          scale: _reactNative.PixelRatio.get()\n        };\n        imageSourceCache.setValue(cacheKey, value);\n        return value;\n      } catch (error) {\n        imageSourceCache.setError(cacheKey, error);\n        throw error;\n      }\n    });\n    return _getImageSource.apply(this, arguments);\n  }\n\n  function loadFont() {\n    return _loadFont.apply(this, arguments);\n  }\n\n  function _loadFont() {\n    _loadFont = (0, _asyncToGenerator2.default)(function* () {\n      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n      if (_reactNative.Platform.OS === 'ios') {\n        (0, _ensureNativeModuleAvailable.default)();\n\n        if (!file) {\n          throw new Error('Unable to load font, because no file was specified. ');\n        }\n\n        yield NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));\n      }\n    });\n    return _loadFont.apply(this, arguments);\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = (0, _iconButton.default)(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","PureComponent","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","createIconSourceCache","resolveGlyph","getImageSourceSync","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","createIconButtonComponent"],"sources":["/Users/nicolaslucero/development/personal/LunaApp/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}