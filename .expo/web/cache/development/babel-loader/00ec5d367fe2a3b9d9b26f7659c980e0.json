{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'text-input' : _ref$testID,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      isV3 = theme.isV3,\n      roundness = theme.roundness;\n  var font = !isV3 ? theme.fonts.regular : {};\n  var hasActiveOutline = parentState.focused || error;\n\n  var _getConstants = (0, _helpers.getConstants)(isV3),\n      INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n      MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n\n  var _ref4 = _reactNative.StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n\n  var _getOutlinedInputColo = (0, _helpers.getOutlinedInputColors)({\n    activeOutlineColor: activeOutlineColor,\n    customOutlineColor: customOutlineColor,\n    disabled: disabled,\n    error: error,\n    theme: theme\n  }),\n      inputTextColor = _getOutlinedInputColo.inputTextColor,\n      activeColor = _getOutlinedInputColo.activeColor,\n      outlineColor = _getOutlinedInputColo.outlineColor,\n      placeholderColor = _getOutlinedInputColo.placeholderColor,\n      errorColor = _getOutlinedInputColo.errorColor;\n\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  var minInputHeight = (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - _constants.LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, _constants.LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: _constants.LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: _reactNative.Platform.OS === 'android',\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingOut = (0, _helpers.adjustPaddingOut)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + _constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID\n  };\n  var minHeight = height || (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -_constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -_constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: _constants.ADORNMENT_SIZE,\n    labelYOffset: -_constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      paddingTop: _constants.LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: _LabelBackground.default,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: testID + \"-outlined\"\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n};\n\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n      activeColor = _ref3.activeColor,\n      backgroundColor = _ref3.backgroundColor,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      focused = _ref3.focused,\n      outlineColor = _ref3.outlineColor,\n      roundness = _ref3.roundness;\n  return React.createElement(_reactNative.View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["TextInputOutlined","disabled","editable","error","underlineColor","outlineColor","render","props","multiline","testID","rest","adornmentConfig","getAdornmentConfig","left","right","roundness","font","theme","hasActiveOutline","parentState","ADORNMENT_OFFSET","getConstants","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","errorColor","getOutlinedInputColors","activeOutlineColor","customOutlineColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","isV3","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","lineHeight","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","placeholderStyle","position","paddingHorizontal","INPUT_PADDING_HORIZONTAL","labelProps","onLayoutAnimatedText","fontWeight","wiggleOffsetX","activeColor","placeholderColor","maxFontSizeMultiplier","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","isTextInputFocused","textStyle","visible","labeled","paddingTop","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","color","textAlignVertical","textAlign","outline","Outline","borderRadius","borderWidth","borderColor","top","bottom","labelContainer","paddingBottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input',\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = !isV3 ? theme.fonts.regular : {};\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: `${testID}-outlined`,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}