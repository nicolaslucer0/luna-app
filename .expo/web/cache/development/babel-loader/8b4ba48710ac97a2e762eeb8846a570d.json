{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _State = require(\"../State\");\n\nvar _constants = require(\"./constants\");\n\nvar _DiscreteGestureHandler = _interopRequireDefault(require(\"./DiscreteGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"shouldActivateOnStart\", \"disallowInterruption\", \"shouldCancelWhenOutside\", \"minDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar PressGestureHandler = function (_DiscreteGestureHandl) {\n  (0, _inherits2.default)(PressGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(PressGestureHandler);\n\n  function PressGestureHandler() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PressGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"visualFeedbackTimer\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"initialEvent\", null);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"shouldDelayTouches\", true);\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(PressGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'press';\n    }\n  }, {\n    key: \"minDurationMs\",\n    get: function get() {\n      return (0, _utils.isnan)(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n    }\n  }, {\n    key: \"maxDist\",\n    get: function get() {\n      return (0, _utils.isnan)(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Press;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(inputData);\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_ref) {\n      var shouldCancelWhenOutside = _ref.shouldCancelWhenOutside,\n          maxDistSq = _ref.maxDistSq;\n      return shouldCancelWhenOutside || !(0, _utils.isValidNumber)(maxDistSq);\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var _Hammer$INPUT_START$H;\n\n      return (_Hammer$INPUT_START$H = {}, (0, _defineProperty3.default)(_Hammer$INPUT_START$H, _hammerjs.default.INPUT_START, _State.State.BEGAN), (0, _defineProperty3.default)(_Hammer$INPUT_START$H, _hammerjs.default.INPUT_MOVE, _State.State.ACTIVE), (0, _defineProperty3.default)(_Hammer$INPUT_START$H, _hammerjs.default.INPUT_END, _State.State.END), (0, _defineProperty3.default)(_Hammer$INPUT_START$H, _hammerjs.default.INPUT_CANCEL, _State.State.CANCELLED), _Hammer$INPUT_START$H)[type];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          shouldCancelWhenOutside: true,\n          maxDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return Object.assign({}, (0, _get2.default)((0, _getPrototypeOf2.default)(PressGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        time: this.minDurationMs\n      });\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.onGestureStart(ev);\n    }\n  }, {\n    key: \"shouldDelayTouchForEvent\",\n    value: function shouldDelayTouchForEvent(_ref2) {\n      var pointerType = _ref2.pointerType;\n      return this.shouldDelayTouches && pointerType === 'touch';\n    }\n  }, {\n    key: \"onGestureStart\",\n    value: function onGestureStart(ev) {\n      var _this2 = this;\n\n      this.isGestureRunning = true;\n      clearTimeout(this.visualFeedbackTimer);\n      this.initialEvent = ev;\n      this.visualFeedbackTimer = (0, _utils.fireAfterInterval)(function () {\n        _this2.sendGestureStartedEvent(_this2.initialEvent);\n\n        _this2.initialEvent = null;\n      }, this.shouldDelayTouchForEvent(ev) && _constants.CONTENT_TOUCHES_DELAY);\n    }\n  }, {\n    key: \"sendGestureStartedEvent\",\n    value: function sendGestureStartedEvent(ev) {\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.sendEvent(Object.assign({}, ev, {\n        eventType: _hammerjs.default.INPUT_MOVE,\n        isFirst: true\n      }));\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(PressGestureHandler.prototype), \"forceInvalidate\", this).call(this, event);\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.initialEvent = null;\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this3 = this;\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(PressGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.isGestureRunning) {\n        if (ev.isFinal) {\n          var timeout;\n\n          if (this.visualFeedbackTimer) {\n            timeout = _constants.CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n            this.sendGestureStartedEvent(this.initialEvent);\n            this.initialEvent = null;\n          }\n\n          (0, _utils.fireAfterInterval)(function () {\n            _this3.sendEvent(Object.assign({}, ev, {\n              eventType: _hammerjs.default.INPUT_END,\n              isFinal: true\n            }));\n\n            _this3.onGestureEnded();\n          }, timeout);\n        } else {\n          this.sendEvent(Object.assign({}, ev, {\n            eventType: _hammerjs.default.INPUT_MOVE,\n            isFinal: false\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$shouldActivateO = _ref3.shouldActivateOnStart,\n          shouldActivateOnStart = _ref3$shouldActivateO === void 0 ? false : _ref3$shouldActivateO,\n          _ref3$disallowInterru = _ref3.disallowInterruption,\n          disallowInterruption = _ref3$disallowInterru === void 0 ? false : _ref3$disallowInterru,\n          _ref3$shouldCancelWhe = _ref3.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref3$shouldCancelWhe === void 0 ? true : _ref3$shouldCancelWhe,\n          _ref3$minDurationMs = _ref3.minDurationMs,\n          minDurationMs = _ref3$minDurationMs === void 0 ? Number.NaN : _ref3$minDurationMs,\n          _ref3$maxDist = _ref3.maxDist,\n          maxDist = _ref3$maxDist === void 0 ? Number.NaN : _ref3$maxDist,\n          _ref3$minPointers = _ref3.minPointers,\n          minPointers = _ref3$minPointers === void 0 ? 1 : _ref3$minPointers,\n          _ref3$maxPointers = _ref3.maxPointers,\n          maxPointers = _ref3$maxPointers === void 0 ? 1 : _ref3$maxPointers,\n          props = (0, _objectWithoutProperties2.default)(_ref3, _excluded);\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(PressGestureHandler.prototype), \"updateGestureConfig\", this).call(this, Object.assign({\n        shouldActivateOnStart: shouldActivateOnStart,\n        disallowInterruption: disallowInterruption,\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        minDurationMs: minDurationMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }]);\n  return PressGestureHandler;\n}(_DiscreteGestureHandler.default);\n\nvar _default = PressGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["PressGestureHandler.ts"],"names":["name","minDurationMs","isnan","maxDist","NativeGestureClass","Hammer","simulateCancelEvent","updateHasCustomActivationCriteria","maxDistSq","shouldCancelWhenOutside","isValidNumber","getState","State","CANCELLED","getConfig","getHammerConfig","time","onGestureActivated","shouldDelayTouchForEvent","pointerType","onGestureStart","clearTimeout","fireAfterInterval","sendGestureStartedEvent","eventType","isFirst","forceInvalidate","onRawEvent","ev","timeout","isFinal","updateGestureConfig","shouldActivateOnStart","disallowInterruption","Number","minPointers","maxPointers","props"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport {\n  CONTENT_TOUCHES_DELAY,\n  CONTENT_TOUCHES_QUICK_TAP_END_DELAY,\n  HammerInputNames,\n} from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { Config, HammerInputExt } from './GestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  private visualFeedbackTimer: any;\n  private initialEvent: HammerInputExt | null = null;\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    // @ts-ignore FIXME(TS)\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({\n    shouldCancelWhenOutside,\n    maxDistSq,\n  }: Config & { shouldCancelWhenOutside: boolean }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n\n  getState(type: keyof typeof HammerInputNames): State {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }: HammerInputExt) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev: HammerInputExt) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev: HammerInputExt) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          // Aesthetic timing for a quick tap.\n          // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n          // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent({\n            ...ev,\n            eventType: Hammer.INPUT_END,\n            isFinal: true,\n          });\n          // @ts-ignore -- this should explicitly support undefined\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false,\n        });\n      }\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"]},"metadata":{},"sourceType":"script"}