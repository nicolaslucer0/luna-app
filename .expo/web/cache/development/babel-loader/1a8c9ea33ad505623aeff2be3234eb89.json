{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSegmentedButtonDensityPadding = exports.getSegmentedButtonColors = exports.getSegmentedButtonBorderRadius = exports.getDisabledSegmentedButtonStyle = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/themes/v2/colors\");\n\nvar DEFAULT_PADDING = 9;\n\nvar getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {\n  var density = _ref.density;\n  var padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n\n    case 'medium':\n      return padding - 4;\n\n    case 'high':\n      return padding - 8;\n\n    default:\n      return padding;\n  }\n};\n\nexports.getSegmentedButtonDensityPadding = getSegmentedButtonDensityPadding;\n\nvar getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {\n  var _buttons$index, _buttons;\n\n  var theme = _ref2.theme,\n      index = _ref2.index,\n      buttons = _ref2.buttons;\n  var width = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n\n  return {};\n};\n\nexports.getDisabledSegmentedButtonStyle = getDisabledSegmentedButtonStyle;\n\nvar getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {\n  var segment = _ref3.segment,\n      theme = _ref3.theme;\n\n  if (segment === 'first') {\n    return Object.assign({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return Object.assign({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  }\n};\n\nexports.getSegmentedButtonBorderRadius = getSegmentedButtonBorderRadius;\n\nvar getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {\n  var checked = _ref4.checked,\n      theme = _ref4.theme;\n\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n\n  return 'transparent';\n};\n\nvar getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {\n  var theme = _ref5.theme,\n      disabled = _ref5.disabled,\n      checked = _ref5.checked;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n};\n\nvar getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {\n  var theme = _ref6.theme;\n\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return _reactNative.StyleSheet.hairlineWidth;\n};\n\nvar getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {\n  var theme = _ref7.theme,\n      disabled = _ref7.disabled;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n\n    return theme.colors.primary;\n  }\n};\n\nvar getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {\n  var theme = _ref8.theme,\n      disabled = _ref8.disabled,\n      checked = _ref8.checked;\n  var backgroundColor = getSegmentedButtonBackgroundColor({\n    theme: theme,\n    checked: checked\n  });\n  var borderColor = getSegmentedButtonBorderColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked\n  });\n  var textColor = getSegmentedButtonTextColor({\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};\n\nexports.getSegmentedButtonColors = getSegmentedButtonColors;","map":{"version":3,"mappings":"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","names":["DEFAULT_PADDING","getSegmentedButtonDensityPadding","density","padding","getDisabledSegmentedButtonStyle","theme","index","buttons","width","getSegmentedButtonBorderWidth","isDisabled","_buttons$index","disabled","isNextDisabled","_buttons","borderRightWidth","getSegmentedButtonBorderRadius","segment","borderTopRightRadius","borderBottomRightRadius","isV3","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","checked","colors","secondaryContainer","color","primary","alpha","rgb","string","getSegmentedButtonBorderColor","surfaceDisabled","outline","dark","white","black","StyleSheet","hairlineWidth","getSegmentedButtonTextColor","onSurfaceDisabled","onSurface","getSegmentedButtonColors","backgroundColor","borderColor","textColor","borderWidth"],"sources":["utils.ts"],"sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\nimport color from 'color';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\ntype BaseProps = {\n  theme: Theme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: Theme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: Theme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n}: Omit<BaseProps, 'checked'>) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({ theme, disabled });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"]},"metadata":{},"sourceType":"script"}