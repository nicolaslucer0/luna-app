{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"right\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      right = _ref.right,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var roundness = theme.roundness,\n      isV3 = theme.isV3;\n  var backgroundColor = active ? isV3 ? theme.colors.secondaryContainer : (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? isV3 ? theme.colors.onSecondaryContainer : theme.colors.primary : isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.68).rgb().string();\n  var labelMargin = icon ? isV3 ? 12 : 32 : 0;\n  var borderRadius = (isV3 ? 7 : 1) * roundness;\n  var underlayColor = isV3 ? (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0.16).rgb().toString() : undefined;\n  return React.createElement(_reactNative.View, rest, React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: borderRadius\n    }, isV3 && styles.v3Container, style],\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel,\n    underlayColor: underlayColor\n  }, React.createElement(_reactNative.View, {\n    style: [styles.wrapper, isV3 && styles.v3Wrapper]\n  }, React.createElement(_reactNative.View, {\n    style: styles.content\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, Object.assign({\n      color: contentColor,\n      marginLeft: labelMargin\n    }, isV3 ? theme.typescale.labelLarge : theme.fonts.medium)]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  v3Container: {\n    justifyContent: 'center',\n    height: 56,\n    marginLeft: 12,\n    marginRight: 12,\n    marginVertical: 0\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  v3Wrapper: {\n    marginLeft: 16,\n    marginRight: 24,\n    padding: 0\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\n\nvar _default = (0, _theming.withTheme)(DrawerItem);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["DrawerItem","icon","label","active","theme","style","onPress","accessibilityLabel","right","rest","roundness","isV3","backgroundColor","colors","secondaryContainer","color","primary","alpha","rgb","string","contentColor","onSecondaryContainer","onSurfaceVariant","text","labelMargin","borderRadius","underlayColor","mix","toString","undefined","React","View","TouchableRipple","borderless","delayPressIn","styles","container","v3Container","accessibilityRole","accessibilityState","selected","wrapper","v3Wrapper","content","Icon","source","size","Text","variant","selectable","numberOfLines","marginLeft","typescale","labelLarge","fonts","medium","displayName","StyleSheet","create","marginHorizontal","marginVertical","justifyContent","height","marginRight","flexDirection","alignItems","padding","flex","withTheme"],"sources":["DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { roundness, isV3 } = theme;\n\n  const backgroundColor = active\n    ? isV3\n      ? theme.colors.secondaryContainer\n      : color(theme.colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? isV3\n      ? theme.colors.onSecondaryContainer\n      : theme.colors.primary\n    : isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.68).rgb().string();\n\n  const labelMargin = icon ? (isV3 ? 12 : 32) : 0;\n  const borderRadius = (isV3 ? 7 : 1) * roundness;\n  const underlayColor = isV3\n    ? color(backgroundColor)\n        .mix(color(theme.colors.onSecondaryContainer), 0.16)\n        .rgb()\n        .toString()\n    : undefined;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius },\n          isV3 && styles.v3Container,\n          style,\n        ]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n        underlayColor={underlayColor}\n      >\n        <View style={[styles.wrapper, isV3 && styles.v3Wrapper]}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              variant=\"labelLarge\"\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  marginLeft: labelMargin,\n                  ...(isV3 ? theme.typescale.labelLarge : theme.fonts.medium),\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  v3Container: {\n    justifyContent: 'center',\n    height: 56,\n    marginLeft: 12,\n    marginRight: 12,\n    marginVertical: 0,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  v3Wrapper: {\n    marginLeft: 16,\n    marginRight: 24,\n    padding: 0,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"script"}