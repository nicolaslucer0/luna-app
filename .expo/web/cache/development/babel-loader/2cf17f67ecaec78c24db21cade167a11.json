{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _CardSheet = _interopRequireDefault(require(\"./CardSheet\"));\n\nvar _GestureHandler = require(\"../GestureHandler\");\n\nvar _CardAnimationContext = _interopRequireDefault(require(\"../../utils/CardAnimationContext\"));\n\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\n\nvar _getInvertedMultiplier = _interopRequireDefault(require(\"../../utils/getInvertedMultiplier\"));\n\nvar _memoize = _interopRequireDefault(require(\"../../utils/memoize\"));\n\nvar _excluded = [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = _reactNative.Platform.OS !== 'web';\n\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = _reactNative.StyleSheet.flatten(style);\n\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nvar Card = function (_React$Component) {\n  (0, _inherits2.default)(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isCurrentlyMounted\", false);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isClosing\", new _reactNative.Animated.Value(FALSE));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"inverted\", new _reactNative.Animated.Value((0, _getInvertedMultiplier.default)(_this.props.gestureDirection)));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"layout\", {\n      width: new _reactNative.Animated.Value(_this.props.layout.width),\n      height: new _reactNative.Animated.Value(_this.props.layout.height)\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isSwiping\", new _reactNative.Animated.Value(FALSE));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"interactionHandle\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pendingGestureCallback\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"lastToValue\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props = _this.props,\n          gesture = _this$props.gesture,\n          transitionSpec = _this$props.transitionSpec,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onTransition = _this$props.onTransition;\n\n      var toValue = _this.getAnimateToValue(Object.assign({}, _this.props, {\n        closing: closing\n      }));\n\n      _this.lastToValue = toValue;\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, Object.assign({}, spec.config, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        clearTimeout(_this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);\n\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n          layout = _this$props2.layout,\n          onClose = _this$props2.onClose,\n          onGestureBegin = _this$props2.onGestureBegin,\n          onGestureCanceled = _this$props2.onGestureCanceled,\n          onGestureEnd = _this$props2.onGestureEnd,\n          gestureDirection = _this$props2.gestureDirection,\n          gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case _GestureHandler.GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case _GestureHandler.GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            _this.handleEndInteraction();\n\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case _GestureHandler.GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n\n            var _velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n\n            var closing = (translation + _velocity * gestureVelocityImpact) * (0, _getInvertedMultiplier.default)(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n\n                _this.forceUpdate();\n              }, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getInterpolatedStyle\", (0, _memoize.default)(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    }));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getCardAnimationContext\", (0, _memoize.default)(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"contentRef\", React.createRef());\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          layout = _this$props3.layout,\n          gestureDirection = _this$props3.gestureDirection,\n          closing = _this$props3.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue((0, _getInvertedMultiplier.default)(gestureDirection));\n      }\n\n      var toValue = this.getAnimateToValue(this.props);\n\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = (0, _getInvertedMultiplier.default)(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          styleInterpolator = _this$props5.styleInterpolator,\n          index = _this$props5.index,\n          current = _this$props5.current,\n          gesture = _this$props5.gesture,\n          next = _this$props5.next,\n          layout = _this$props5.layout,\n          insets = _this$props5.insets,\n          overlay = _this$props5.overlay,\n          overlayEnabled = _this$props5.overlayEnabled,\n          shadowEnabled = _this$props5.shadowEnabled,\n          gestureEnabled = _this$props5.gestureEnabled,\n          gestureDirection = _this$props5.gestureDirection,\n          pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n          children = _this$props5.children,\n          customContainerStyle = _this$props5.containerStyle,\n          contentStyle = _this$props5.contentStyle,\n          rest = (0, _objectWithoutProperties2.default)(_this$props5, _excluded);\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? _reactNative.Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n\n      var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = typeof backgroundColor === 'string' ? (0, _color.default)(backgroundColor).alpha() === 0 : false;\n      return React.createElement(_CardAnimationContext.default.Provider, {\n        value: animationContext\n      }, React.createElement(_reactNative.Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(_reactNative.View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(_reactNative.View, {\n        pointerEvents: \"box-none\",\n        style: _reactNative.StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(_reactNative.Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(_reactNative.Animated.View, {\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(_reactNative.Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(_CardSheet.default, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n  return Card;\n}(React.Component);\n\nexports.default = Card;\n\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: _reactNative.Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(_reactNative.Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","hasOpacityStyle","style","flattenedStyle","StyleSheet","Card","React","overlayEnabled","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","styles","componentDidMount","closing","componentDidUpdate","height","width","prevProps","gestureDirection","getInvertedMultiplier","toValue","componentWillUnmount","Animated","velocity","onTransition","spec","transitionSpec","animation","clearTimeout","gesture","undefined","isInteraction","finished","onClose","onOpen","getDistanceForDirection","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","setTimeout","onGestureEnd","memoize","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","containerStyle","rest","interpolatedStyle","animationContext","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","contentStyle","isTransparent","Color","opacity","absoluteFill","overlayStyle","handleGestureStateChange","container","flex","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: any;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}