{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'text-input' : _ref$testID,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      isV3 = theme.isV3,\n      roundness = theme.roundness;\n  var font = !isV3 ? theme.fonts.regular : {};\n  var hasActiveOutline = parentState.focused || error;\n\n  var _getConstants = (0, _helpers.getConstants)(isV3),\n      INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n      MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n\n  var _ref4 = _reactNative.StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n\n  var _getOutlinedInputColo = (0, _helpers.getOutlinedInputColors)({\n    activeOutlineColor: activeOutlineColor,\n    customOutlineColor: customOutlineColor,\n    disabled: disabled,\n    error: error,\n    theme: theme\n  }),\n      inputTextColor = _getOutlinedInputColo.inputTextColor,\n      activeColor = _getOutlinedInputColo.activeColor,\n      outlineColor = _getOutlinedInputColo.outlineColor,\n      placeholderColor = _getOutlinedInputColo.placeholderColor,\n      errorColor = _getOutlinedInputColo.errorColor;\n\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  var minInputHeight = (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - _constants.LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, _constants.LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: _constants.LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: _reactNative.Platform.OS === 'android',\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingOut = (0, _helpers.adjustPaddingOut)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + _constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID\n  };\n  var minHeight = height || (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -_constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -_constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: _constants.ADORNMENT_SIZE,\n    labelYOffset: -_constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      paddingTop: _constants.LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: _LabelBackground.default,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: testID + \"-outlined\"\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n};\n\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n      activeColor = _ref3.activeColor,\n      backgroundColor = _ref3.backgroundColor,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      focused = _ref3.focused,\n      outlineColor = _ref3.outlineColor,\n      roundness = _ref3.roundness;\n  return React.createElement(_reactNative.View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["TextInputOutlined","disabled","editable","label","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","props","React","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","rest","adornmentConfig","getAdornmentConfig","colors","isV3","roundness","font","fonts","regular","hasActiveOutline","focused","getConstants","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","getOutlinedInputColors","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","minInputHeight","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","placeholderOpacity","interpolatePlaceholder","labeled","measured","placeholderStyle","position","paddingHorizontal","labelProps","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","InputLabel","labelBackground","LabelBackground","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","TextInputAdornment","pointerEvents","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input',\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = !isV3 ? theme.fonts.regular : {};\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: `${testID}-outlined`,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}