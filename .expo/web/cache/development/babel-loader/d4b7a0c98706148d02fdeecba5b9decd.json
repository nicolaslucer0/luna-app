{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.RadioButtonItem = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\n\nvar _utils = require(\"./utils\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _RadioButton = _interopRequireDefault(require(\"./RadioButton\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _RadioButtonAndroid = _interopRequireDefault(require(\"./RadioButtonAndroid\"));\n\nvar _RadioButtonIOS = _interopRequireDefault(require(\"./RadioButtonIOS\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n      label = _ref.label,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      _onPress = _ref.onPress,\n      disabled = _ref.disabled,\n      color = _ref.color,\n      uncheckedColor = _ref.uncheckedColor,\n      status = _ref.status,\n      theme = _ref.theme,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      _ref$labelVariant = _ref.labelVariant,\n      labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant;\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n\n  if (mode === 'android') {\n    radioButton = React.createElement(_RadioButtonAndroid.default, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(_RadioButtonIOS.default, radioButtonProps);\n  } else {\n    radioButton = React.createElement(_RadioButton.default, radioButtonProps);\n  }\n\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {\n    var checked = (0, _utils.isChecked)({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(_TouchableRipple.default, {\n      onPress: function onPress() {\n        return (0, _utils.handlePress)({\n          onPress: _onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked: checked,\n        disabled: disabled\n      },\n      testID: testID,\n      disabled: disabled\n    }, React.createElement(_reactNative.View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(_Text.default, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nvar _default = (0, _theming.withTheme)(RadioButtonItem);\n\nexports.default = _default;\nvar RadioButtonItemWithTheme = (0, _theming.withTheme)(RadioButtonItem);\nexports.RadioButtonItem = RadioButtonItemWithTheme;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","accessibilityLabel","position","labelVariant","radioButtonProps","value","disabled","status","color","uncheckedColor","isLeading","mode","radioButton","textColor","theme","disabledTextColor","textAlign","computedStyle","context","checked","contextValue","handlePress","onPress","onValueChange","styles","withTheme","RadioButtonItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","flexShrink","flexGrow","font","fontSize"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AA6GA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAgBX;EAhBY,IAAA,KAAA,GAgBZ,IAhBY,CAAA,KAAA;EAAA,IAAA,KAAA,GAgBZ,IAhBY,CAAA,KAAA;EAAA,IAAA,KAAA,GAgBZ,IAhBY,CAAA,KAAA;EAAA,IAAA,UAAA,GAgBZ,IAhBY,CAAA,UAAA;EAAA,IAAA,QAAA,GAgBZ,IAhBY,CAAA,OAAA;EAAA,IAAA,QAAA,GAgBZ,IAhBY,CAAA,QAAA;EAAA,IAAA,KAAA,GAgBZ,IAhBY,CAAA,KAAA;EAAA,IAAA,cAAA,GAgBZ,IAhBY,CAAA,cAAA;EAAA,IAAA,MAAA,GAgBZ,IAhBY,CAAA,MAAA;EAAA,IAAA,KAAA,GAgBZ,IAhBY,CAAA,KAAA;EAAA,4BAgBZ,IAhBY,CAWvBC,kBAXuB;EAAA,IAWvBA,kBAXuB,sCAAA,KAAA;EAAA,IAAA,MAAA,GAgBZ,IAhBY,CAAA,MAAA;EAAA,IAAA,IAAA,GAgBZ,IAhBY,CAAA,IAAA;EAAA,oBAgBZ,IAhBY,CAcvBC,QAduB;EAAA,IAcvBA,QAduB,8BAAA,UAAA;EAAA,wBAgBZ,IAhBY,CAevBC,YAfuB;EAAA,IAevBA,YAfuB,kCAeR,WAfQ;EAiBvB,IAAMC,gBAAgB,GAAG;IAAEC,KAAF,EAAEA,KAAF;IAASC,QAAT,EAASA,QAAT;IAAmBC,MAAnB,EAAmBA,MAAnB;IAA2BC,KAA3B,EAA2BA,KAA3B;IAAkCC,cAAAA,EAAAA;EAAlC,CAAzB;EACA,IAAMC,SAAS,GAAGR,QAAQ,KAA1B,SAAA;EACA,IAAA,WAAA;;EAEA,IAAIS,IAAI,KAAR,SAAA,EAAwB;IACtBC,WAAW,GAAG,KAAA,CAAA,aAAA,CAAA,2BAAA,EAAdA,gBAAc,CAAdA;EADF,CAAA,MAEO,IAAID,IAAI,KAAR,KAAA,EAAoB;IACzBC,WAAW,GAAG,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAdA,gBAAc,CAAdA;EADK,CAAA,MAEA;IACLA,WAAW,GAAG,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAdA,gBAAc,CAAdA;EACD;;EAED,IAAMC,SAAS,GAAGC,KAAK,CAALA,IAAAA,GAAaA,KAAK,CAALA,MAAAA,CAAbA,SAAAA,GAAsCA,KAAK,CAALA,MAAAA,CAAxD,IAAA;EACA,IAAMC,iBAAiB,GAAGD,KAAK,CAALA,IAAAA,GACtBA,KAAK,CAALA,MAAAA,CADsBA,iBAAAA,GAEtBA,KAAK,CAALA,MAAAA,CAFJ,QAAA;EAGA,IAAME,SAAS,GAAGN,SAAS,GAAA,OAAA,GAA3B,MAAA;EAEA,IAAMO,aAAa,GAAG;IACpBT,KAAK,EAAEF,QAAQ,GAAA,iBAAA,GADK,SAAA;IAEpBU,SAAAA,EAAAA;EAFoB,CAAtB;EAKA,OACE,KAAA,CAAA,aAAA,CAAA,oCAAA,CAAA,QAAA,EAAA,IAAA,EACIE,UAAAA,OAAD,EAAsC;IACrC,IAAMC,OAAO,GACX,IAAA,gBAAA,EAAU;MACRC,YAAY,EAAEF,OAAF,KAAA,IAAEA,IAAAA,OAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,OAAO,CADb,KAAA;MAERX,MAFQ,EAERA,MAFQ;MAGRF,KAAAA,EAAAA;IAHQ,CAAV,MADF,SAAA;IAMA,OACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;MACE,OAAO,EAAE;QAAA,OACPgB,IAAAA,kBAAAA,EAAY;UACVC,OAAO,EADG,QAAA;UAEVC,aAAa,EAAEL,OAAF,KAAA,IAAEA,IAAAA,OAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,OAAO,CAFZ,aAAA;UAGVb,KAAAA,EAAAA;QAHU,CAAZgB,CADO;MAAA,CADX;MAQE,kBAAkB,EARpB,kBAAA;MASE,iBAAiB,EATnB,OAAA;MAUE,kBAAkB,EAAE;QAClBF,OADkB,EAClBA,OADkB;QAElBb,QAAAA,EAAAA;MAFkB,CAVtB;MAcE,MAAM,EAdR,MAAA;MAeE,QAAQ,EAAEA;IAfZ,CAAA,EAiBE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;MAAM,KAAK,EAAE,CAACkB,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;MAAwC,aAAa,EAAC;IAAtD,CAAA,EACGd,SAAS,IADZ,WAAA,EAEE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;MACE,OAAO,EADT,YAAA;MAEE,KAAK,EAAE,CACLc,MAAM,CADD,KAAA,EAEL,CAACV,KAAK,CAAN,IAAA,IAAeU,MAAM,CAFhB,IAAA,EAAA,aAAA,EAAA,UAAA;IAFT,CAAA,EAFF,KAEE,CAFF,EAaG,CAAA,SAAA,IA/BP,WAkBI,CAjBF,CADF;EATN,CACE,CADF;AAxCF,CAAA;;AAyFAxB,eAAe,CAAfA,WAAAA,GAAAA,kBAAAA;;eAEeyB,IAAAA,kBAAAA,EAAf,eAAeA,C;;;AAGf,IAAMC,wBAAwB,GAAGD,IAAAA,kBAAAA,EAAjC,eAAiCA,CAAjC;;;AAIA,IAAMD,MAAM,GAAG,uBAAA,CAAA,MAAA,CAAkB;EAC/BG,SAAS,EAAE;IACTC,aAAa,EADJ,KAAA;IAETC,UAAU,EAFD,QAAA;IAGTC,cAAc,EAHL,eAAA;IAITC,eAAe,EAJN,CAAA;IAKTC,iBAAiB,EAAE;EALV,CADoB;EAQ/BC,KAAK,EAAE;IACLC,UAAU,EADL,CAAA;IAELC,QAAQ,EAAE;EAFL,CARwB;EAY/BC,IAAI,EAAE;IACJC,QAAQ,EAAE;EADN;AAZyB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport type { MD3TypescaleKey, Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={() =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}